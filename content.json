{"meta":{"title":"Liu Tao","subtitle":"A little older, a little wiser, but happy to see you.","description":"A blog of Liu Tao","author":"Liu Tao","url":"https://tao93.top"},"pages":[{"title":"About","date":"2018-09-26T07:47:46.696Z","updated":"2018-09-26T07:47:46.695Z","comments":false,"path":"about/index.html","permalink":"https://tao93.top/about/index.html","excerpt":"","text":"Github: Tao93 Email: heyustc@gmail.com"}],"posts":[{"title":"Android 自定义简易 PickerView","slug":"Android 自定义简易 PickerView","date":"2019-04-07T12:28:04.685Z","updated":"2019-07-05T13:37:25.923Z","comments":true,"path":"2019/04/07/Android 自定义简易 PickerView/","link":"","permalink":"https://tao93.top/2019/04/07/Android 自定义简易 PickerView/","excerpt":"","text":"最近的做的一项 feature 中，需要使用类似于 iOS 的 UIPickerView 的控件，功能是通过滚动 item 来选择其中一个，也就是下图这样的： Android SDK 倒是有一个 NumberPicker 和这个非常类似，不过 NumberPicker 设计有点问题，滚动很慢，即使是手指快速滑动，也只能滚动五六个 items，而 Github 上确实有不少优秀的实现，可以和 iOS 的 UIPickerView 非常相似，不过其代码有些复杂，以至于想要速读代码然后自己写一份也比较费时间。所以，我就想到自己基于 Android 的 ListView 写一个简单的自定义 PickerView。 既然使用 ListView，那么首先需要解决问题有如下几个： 如何让所有 item 都能通过滑动而滚动到视图中间，从而表示该 item 被选中？ 如果让 ListView 的 idle 状态变为离散的，而非本来的任意滚动状态都可以为 idle？ 怎么获取当前选中的 item 的序号？ 第一个问题比较好办，在 list 的首尾各填充一些空白的 item，这样就能让用户可见的所有 item 都能滑动到正中间。第二个问题，我的做法是，如果手指离开时，ListView 缓慢滑动，那么就在速度低于某个阈值时，让它滑动到恰好将一些 item 显示出来而不要有某个 item 只显示一部分；而如果手指离开时 ListView 快速滑动，那么就在 ListView 刚刚变为 idle 状态时，让它就近滑动到「恰好将一些 item 显示出来」的状态。第三个问题好办，计算一下当前显示的所有 item 的 position 就能知道最中间显示的 item 的 position。 另外还有一些细节问题： 需要在中间绘制上两条灰色水平线； 需要在 canvas 的最上层绘制不是正中间区域绘制半透明矩形，从而让非选中的 item 看起来是灰色的； 点击非选中的 item 时，需要滚动 ListView 让该 item 滑动到正中间。 实现的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224/** * The Adapter interface for &#123;@link PickerView&#125; which is like UIPickerView on iOS. */public interface PickerAdapter &#123; /** get resource id of layout for each item of the picker view. */ @LayoutRes int getItemLayoutResource(); /** count of items in the picker view. */ int getItemCount(); /** text string for the item at the specified position. */ String getItemAt(int pos);&#125;/** * A view to let users to choose one item from a list, like UIPickerView on iOS. */public class PickerView extends FrameLayout &#123; /** the listView which is used to implement this PickerView */ private ListView listView; /** the count of visible items, must be odd numbers, the middle item would be the the selected one. */ private int visibleCount = 5; // 5 items visible by default private float itemHeight; Paint dividerLinePaint; Paint greyLayerPaint; /** adapter for this pickerView */ PickerAdapter adapter; private float dividerThickness; private float dividerMarginLeft; private float dividerMarginRight; private float velocityThreshold; private VelocityTracker velocityTracker = VelocityTracker.obtain(); public PickerView(@NonNull Context context) &#123; this(context, null); &#125; public PickerView(@NonNull Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public PickerView(@NonNull Context context, @Nullable AttributeSet attrs, final int defStyleAttr) &#123; super(context, attrs, defStyleAttr); setWillNotDraw(false); itemHeight = getResources().getDimension(R.dimen.picker_view_item_height); velocityThreshold = getResources().getDisplayMetrics().density * 260; TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PickerView); dividerThickness = ta.getDimension(R.styleable.PickerView_divider_thickness, getResources().getDisplayMetrics().density); dividerMarginLeft = ta.getDimension(R.styleable.PickerView_divider_margin_left, 0); dividerMarginRight = ta.getDimension(R.styleable.PickerView_divider_margin_right, 0); int dividerColor = ta.getColor(R.styleable.PickerView_divider_color, Color.LTGRAY); ta.recycle(); dividerLinePaint = new Paint(); dividerLinePaint.setColor(dividerColor); dividerLinePaint.setStyle(Paint.Style.STROKE); dividerLinePaint.setStrokeWidth(dividerThickness); greyLayerPaint = new Paint(); greyLayerPaint.setColor(0xb0ffffff); &#125; public void setAdapter(PickerAdapter adapter) &#123; setAdapter(adapter, 0, 0); &#125; public void setAdapter(PickerAdapter adapter, int initPos) &#123; setAdapter(adapter, 0, initPos); &#125; /** * set adapter and other two parameters. * @param visibleCount count of visible items in the picker, must be odd numbers. * @param initPos position of the initially selected item, 0 means the first item would be selected. */ public void setAdapter(PickerAdapter adapter, int visibleCount, int initPos) &#123; if (adapter.getItemCount() &lt;= 0) &#123; return; &#125; if (visibleCount &gt; 0 &amp;&amp; visibleCount % 2 != 0) &#123; this.visibleCount = visibleCount; &#125; this.adapter = adapter; listView = new ListView(getContext()); addView(listView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (int) (itemHeight * this.visibleCount))); listView.setOverScrollMode(View.OVER_SCROLL_NEVER); // remove over scroll effects. listView.setVerticalScrollBarEnabled(false); listView.setDivider(null); // remove listView's dividers listView.setOnScrollListener(new AbsListView.OnScrollListener() &#123; @Override public void onScrollStateChanged(AbsListView view, int scrollState) &#123; if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) &#123; // scroll to nearest place that fit the selection properly. scrollToNearest(); &#125; &#125; @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) &#123; &#125; &#125;); listView.setAdapter(new InnerAdapter()); if (initPos &gt; 0 &amp;&amp; initPos &lt; adapter.getItemCount()) &#123; listView.setSelection(initPos); &#125; &#125; /** * @return the position of the currently selected item, starting from 0. */ public int getSelectedPosition() &#123; listView.getFirstVisiblePosition(); View firstChild = listView.getChildAt(0); if (Math.abs(firstChild.getTop()) &lt; firstChild.getHeight() / 10) &#123; return listView.getFirstVisiblePosition(); &#125; else &#123; return listView.getFirstVisiblePosition() + 1; &#125; &#125; @Override public boolean dispatchTouchEvent(MotionEvent ev) &#123; boolean superResult = super.dispatchTouchEvent(ev); velocityTracker.addMovement(ev); if (ev.getActionMasked() == MotionEvent.ACTION_UP) &#123; velocityTracker.computeCurrentVelocity(1000); float yVelocity = velocityTracker.getYVelocity(); // scroll to nearest proper place directly if the fling is very slow if (Math.abs(yVelocity) &lt; velocityThreshold) &#123; scrollToNearest(); &#125; &#125; return superResult; &#125; /** scroll the listView to fit the nearest proper position */ private void scrollToNearest() &#123; View firstChild = listView.getChildAt(0); if (Math.abs(firstChild.getTop()) &gt; Math.abs(firstChild.getBottom())) &#123; listView.smoothScrollToPosition(listView.getLastVisiblePosition()); &#125; else &#123; listView.smoothScrollToPosition(listView.getFirstVisiblePosition()); &#125; &#125; @Override protected void onDetachedFromWindow() &#123; velocityTracker.recycle(); super.onDetachedFromWindow(); &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); //canvas.drawRect(0, itemHeight * 2, getWidth(), itemHeight * 3, dividerLinePaint); canvas.drawLine(dividerMarginLeft, itemHeight * 2 - dividerThickness, getWidth() - dividerMarginRight, itemHeight * 2 - dividerThickness, dividerLinePaint); canvas.drawLine(dividerMarginLeft, itemHeight * 3 + dividerThickness, getWidth() - dividerMarginRight, itemHeight * 3 + dividerThickness, dividerLinePaint); // draw two transparent rectangles to make not selected items looks grey canvas.drawRect(0, 0, getWidth(), itemHeight * 2 - dividerThickness, greyLayerPaint); canvas.drawRect(0, getHeight() - 2 * itemHeight + dividerThickness, getWidth(), getBottom(), greyLayerPaint); &#125; /** * the adapter for the listView */ private class InnerAdapter extends BaseAdapter &#123; @Override public int getCount() &#123; // we would add visibleCount - 1 empty strings to the list View, so the count should plus visibleCount - 1. return adapter.getItemCount() + visibleCount - 1; &#125; @Override public Object getItem(int position) &#123; // there're visibleCount - 1 items with empty text, they would be equally put at the starting and ending. if (position &lt; visibleCount / 2 || position &gt;= getCount() - visibleCount / 2) &#123; return \"\"; &#125; return adapter.getItemAt(position - visibleCount / 2); &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(final int position, View convertView, ViewGroup parent) &#123; if (convertView == null) &#123; convertView = View.inflate(getContext(), adapter.getItemLayoutResource(), null); convertView.setBackgroundColor(Color.WHITE); // to avoid the default touch effect of listView item &#125; // select a item when it's clicked by users convertView.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; int cur = getSelectedPosition() + visibleCount / 2; if (position &gt; cur) &#123; listView.smoothScrollToPosition(position + visibleCount / 2); &#125; else if (position &lt; cur) &#123; listView.smoothScrollToPosition(position - visibleCount / 2); &#125; &#125; &#125;); TextView textView = convertView.findViewById(R.id.picker_text_view); textView.setText((String) getItem(position)); return convertView; &#125; &#125;&#125; 还有一些小细节。比如 ListView 的高度需要正好是 itemView 的奇数倍，这样才能恰好只显示一些 item，并且最中间显示其中一个 item。再比如为了避免 ListView 自带的点击 item 时的视觉效果，需要给 itemView 设置纯白色背景。 至此，一个简易的 PickerView 就完成了。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"一个不一样的 ANR","slug":"一个不一样的 ANR","date":"2019-01-18T13:04:23.787Z","updated":"2019-07-05T13:40:43.196Z","comments":true,"path":"2019/01/18/一个不一样的 ANR/","link":"","permalink":"https://tao93.top/2019/01/18/一个不一样的 ANR/","excerpt":"","text":"最近碰到一个 ANR 问题，拿到 traces 文件后，显示主线程的堆栈是下面这样的： 1234567at android.os.MessageQueue.nativePollOnce(Native method)at android.os.MessageQueue.next(MessageQueue.java:323)at android.os.Looper.loop(Looper.java:135)at android.app.ActivityThread.main(ActivityThread.java:5417)at java.lang.reflect.Method.invoke!(Native method)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616) 这样一段堆栈，在很多情况下表明主线程是正常的，即处在等待区下一条主线程消息的过程中，而不是陷在某个耗时特别长的消息中。 经过反复测试，最后确认这个 ANR 和设置了 Default UncaughtExceptionHandler 有关，问题代码可以简化成下面的样子： 123456789101112131415161718192021222324252627282930313233public class MainActivity extends AppCompatActivity &#123; static &#123; Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123; @Override public void uncaughtException(final Thread t, Throwable e) &#123; Log.i(\"uncaught\", Thread.currentThread().toString()); Log.i(\"uncaught\", t.toString()); &#125; &#125;); &#125; private Thread thread; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; throw new RuntimeException(\"hello world\"); &#125; &#125;).start(); //throw new RuntimeException(\"hello world!!\"); &#125; &#125;); &#125;&#125; 上面的代码的表现是，如果只让第 26 行抛出异常，那么一切看起来都正常，但是如果让第 29 行抛出异常，那么应用直接就无响应了。 经过一番查找与验证，我发现原因大致是，当一个 Java 线程抛出了未捕获的异常时，JVM 先会调用到 UncaughtExceptionHandler，然后再会把此线程停止掉。所以这段代码中，如果主线程抛出异常，那么第 6 行的方法结束后，主线程就会被 JVM 给停止掉，既然主线程都停止掉了，那自然就无响应了，也就会发生 ANR 了。 事实上，一般我们设置自定义 UncaughtExceptionHandler 时，都会在自定义的 uncaughtException 方法最后再调用一遍被我们顶替掉的系统默认的 UncaughtExceptionHandler，以便把应用 kill 掉，而这个例子，充分的显示了，当未捕获异常发生后，就算赖着不 kill 掉应用也是不行的，因为可能主线程都已经被停掉了。 关于 JVM 先调用 UncaughtExceptionHandler 然后把发生未捕获异常的线程停止掉的说法，见于 Java Language Specification 11.3，如下所示的片段： 那么主线程被停止掉，是个什么样的状态呢，我用下面的代码，把主线程的状态给输出来： 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class MainActivity extends AppCompatActivity &#123; static &#123; Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123; @Override public void uncaughtException(final Thread t, Throwable e) &#123; Log.i(\"uncaught\", Thread.currentThread().toString()); Log.i(\"uncaught\", t.toString()); &#125; &#125;); &#125; private Thread thread; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; final Thread mainThread = Thread.currentThread(); Log.i(\"&lt;&lt;&lt;\", mainThread.getState().toString()); if (thread == null) &#123; thread = new Thread(new Runnable() &#123; @Override public void run() &#123; for (int i = 0; i &lt; 3; ++i) &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; Log.i(\"&lt;&lt;&lt;\", mainThread.getState().toString()); &#125; &#125; &#125;); thread.start(); &#125; throw new RuntimeException(\"hello world!!\"); &#125; &#125;); &#125;&#125; 上面代码的第 24 行和第 35 行一共会 4 此输出主线程的状态，结果如下面所示： 123401-18 21:00:24.308 14533 14533 I &lt;&lt;&lt; : RUNNABLE01-18 21:00:25.309 14533 14570 I &lt;&lt;&lt; : NEW01-18 21:00:26.310 14533 14570 I &lt;&lt;&lt; : NEW01-18 21:00:27.311 14533 14570 I &lt;&lt;&lt; : NEW 从上面代码可知，主线程从 RUNNABLE 状态变成了 NEW 状态，为什么是 NEW 状态，我也不清楚，也许将来对 JVM 了解更多了，会清除吧。 回到这个 ANR 来，这个例子说明，我们如果使用自定义的 UncaughtExceptionHandler，记得要把应用 kill 掉，还有 default 的 UncaughtExceptionHandler 是全局公用的，很容易会出现被顶替 (覆盖)，所以切记别随意调用，免得出现意料之外的问题。 修复这样的 ANR，分成两部分，第一部分是先移除或者修改不恰当的设置 UncaughtExceptionHandler 的代码，先消除 ANR，然后还需要把引发 ANR 的另一个原因，也就是未捕获的异常给修复掉，不然应用不会 ANR 了但是会 Crash。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"Android 绘制圆形图片","slug":"Android 绘制圆形图片","date":"2019-01-12T10:38:32.256Z","updated":"2019-01-12T10:38:33.385Z","comments":true,"path":"2019/01/12/Android 绘制圆形图片/","link":"","permalink":"https://tao93.top/2019/01/12/Android 绘制圆形图片/","excerpt":"","text":"记录一下，以免忘记，以备使用。 方法一： 123456789101112131415161718192021222324252627282930313233343536373839404142public class MyView extends View &#123; Paint paint = new Paint(); Shader shader; Matrix mat = new Matrix(); Bitmap bitmap; public MyView(Context context) &#123; this(context, null); &#125; public MyView(Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public MyView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); // create a bitmap from the image resource what we want to draw bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon); // a bitmap shader, would be set into paint, here we use repeat tile mode, but since we'll // scale to make the bitmap fill the canvas just right, so there would be no repeat. shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT); // after this, the paint would contains this bitmap. paint.setShader(shader); &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); // scale to make bitmap fill the canvas mat.setScale((float)getWidth() / bitmap.getWidth(), (float)getHeight() / bitmap.getHeight()); shader.setLocalMatrix(mat); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); // draw a circle with the paint. canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, paint); &#125;&#125; 方法二： 123456789101112131415161718192021222324252627282930313233343536373839404142public class MyView2 extends View &#123; private Path mPath; private Drawable mDrawable; public MyView2(Context context) &#123; this(context, null); &#125; public MyView2(Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public MyView2(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); mPath = new Path(); mDrawable = getResources().getDrawable(R.drawable.dossier_icon); &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); // make the path to be a circle whose diameter is width of the view. mPath.reset(); mPath.addCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, Path.Direction.CW); // drawable must setBounds before draw mDrawable.setBounds(0, 0, getWidth(), getHeight()); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); // save current (default) clip canvas.save(); // make the clip to be the circle canvas.clipPath(mPath); // draw the bitmapDrawable mDrawable.draw(canvas); // restore default clip canvas.restore(); &#125;&#125; 方法三： 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class MyView3 extends View &#123; Paint mPaint = new Paint(); Paint whitePaint = new Paint(); private Bitmap bitmap; private Matrix mat = new Matrix(); private Xfermode mXfermode; public MyView3(Context context) &#123; this(context, null); &#125; public MyView3(Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public MyView3(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); mXfermode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN); whitePaint.setColor(Color.RED); bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon); &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); mat.setScale((float)getWidth() / bitmap.getWidth(), (float)getHeight() / bitmap.getHeight()); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); // save current layer and create a new layer int count = canvas.saveLayer(0, 0, getWidth(), getHeight(), mPaint); // draw a white circle in the new layer canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, whitePaint); // this xfer mode is src_in type, which could make image to be drawn in only previous white circle area. mPaint.setXfermode(mXfermode); // draw bitmap in new layer canvas.drawBitmap(bitmap, mat, mPaint); // this is necessary, or the influence would last mPaint.setXfermode(null); // back to previous layer. canvas.restoreToCount(count); &#125;&#125; 三个方法中，方法二最简便易用，方法三最不推荐，因为新增一个 canvas layer 是开销很大的，这一点 saveLayerAlpha 方法的注释有说明。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"给三星 tablet SM-T830 刷机[续]","slug":"给三星 tablet SM-T830 刷机[续]","date":"2019-01-01T13:20:54.004Z","updated":"2019-07-05T13:43:20.411Z","comments":true,"path":"2019/01/01/给三星 tablet SM-T830 刷机[续]/","link":"","permalink":"https://tao93.top/2019/01/01/给三星 tablet SM-T830 刷机[续]/","excerpt":"","text":"事情的起因是，从 xda 上面这个帖子 看到，有人在三星 Tab S4 平板上面刷了个类原生 Android 的系统，他表示用起来挺好，只不过 4 个扬声器只有底部两个可以发声。看到这个我心里就痒痒，因为三星的官方 rom 我并不喜欢，里面有三星的 app store，还有三星的一套账户系统，调试到系统代码的时候，行号也完全对不上(Pixel是可以对上行号的)，所以我也想给手里的 Tab S4 平板刷一个类原生系统。 然后我就在 xda 上面查了查，发现我应该需要先刷入一个 TWRP recovery，然后再使用 TWRP 刷入类原生系统。另外我也注意到，之所以能刷并没有适配 Tab S4 的 ROM，得归功于 Project Trable。谷歌提出 Project Trable 是为了让 Android 系统的开发和底层驱动的开发分离开，两者只要满足协议，就可以组合在一起，这样就可减小 Android 系统升级时厂商开发驱动的工作，从而让设备更快升级 Android 系统。Project Trable 也使得那些符合要求的设备，可以刷大量满足 Project Trable 要求的 General System Image (GSI)。Tab S4 就是符合 Project Trable 要求的，所以我就是要给它刷 GSI。 回到前面说的 TWRP 的事情，TWRP 官方并没有适配 Tab S4 的版本，不过我在这个帖子里面发现了用于 Tab S4 的非官方 TWRP，并写出了步骤： 确认 OEM 已解锁； 设备进入 download 模式； 使用 odin 的 AP slot 来刷入 TWRP 压缩包，记得要取消勾选「Auto Reboot」; 关机，然后再进入 TWRP； 进入 TWRP，然后刷入 Forced encryption disabler patch，format DATA 一下； 进入 TWRP，刷入 Magisk 压缩包，于是设备就 root 了。 步骤其实很简单，不过我在这里折腾了 3 天。我先按照上面的步骤来，结果发现进 TWRP 后就无法访问 internal storage，自然就刷不了 Forced encryption disabler patch。我试了非常多想法，比如重刷三星官方固件，刷更旧的官方固件(原因是这个帖子里面工具发出来时，官方固件还更旧一些，而我看到这帖子时已经更新到比较新了)，刷国行的官方固件，都不行，其中刷更低版本的固件还有限制即 BootLoader 不能降级，所以其实官方固件降不了多少级。我还看到了这种帖子，里面告诉我说，需要先刷一个 DM-Verity patched boot，我也试了，发现刷完这个 DM-Verity patched boot 后直接无法进入系统，报 Verification Failed 错误，必须重置设备才行。翻遍 xda 那个 40 几页的帖子后，我发现其实这个帖子就是抄 xda 那个帖子，只不过抄的时候，xda 帖子上面的步骤确实第一步是刷 DM-Verity patched boot，不过后来 xda 帖子步骤更新了，成了现在这样的。 不是无法访问 internal storage 嘛，后来我买了个 micro SD 卡，插进设备，在 TWRP 中这个 micro SD 是可以访问的，所以我就可以继续刷入 Forced encryption disabler patch 并 format DATA，然后我就 boot loop 了，真气人。即使我再刷入 GSI，依然是 boot loop。 后来那个 xda 帖子的作者回复我说「全程没看到我刷 Magisk 的描述，但 Magisk 是必要的，否则会 boot loop」。我确实没刷 Magisk，因为我并没有像 root，我只想搞个 TWRP 然后刷 GSI 而已。于是我就刷了 Magisk，发现不在 boot loop 了，然后再这里 下载了 system-arm64-aonly-gapps-su.img.xz 这个 GSI 并刷入，这次终于成功了，进入了一个类似 AOSP user-debug 类型的 aosp 系统，很简陋，连 Contact，Settings，等这些应用都是 aosp 版本的，和正常的很不一样，相机应用则直接打开就 crash。顺便记录一下 TWRP 刷 GSI 的方法，很简单： 进入 TWRP，wipe 一下； 进入 install，切换到 install image 模式，找到 GSI； partition 选择 system image，flash； 重启 关键是，这个 aosp 系统有些 bug，最受不了的 bug 是，锁屏、旋转时屏幕都会变形一下，截屏得到的图片也是会变形一下。这和我最初看到的 xda 帖子里面那人说的只是扬声器没有全部发声差远了。所以我就想找更好些的 GSI。问了那个人，结果没回复我。 最后找到了 Pixel Experience ，虽然依然有一些 bug，不过感觉还可以。 放几张截图： 最后还有一点，这次我是用 Virtual Box 中的 Win 10 虚拟机刷的，让 VirtualBox 中的 Win 10 虚拟机连接上 Android 设备，需要给 VirtualBox 安装 extension pack，在 Win 10 虚拟机中安装 guest additions，然后还需要在此 win 10 虚拟机的设置中添加对应的 USB filter (需要设备连接上后才能添加)，并按照 USB 类型勾选 USB 2.0 还是 3.0，如下图所示： 最后，在设备连接上电脑后，把 win 10 的窗口放在最前面，然后再 macOS 的菜单栏勾选对应的 USB device，勾选的话，就是 win 10 虚拟机连接词 USB 设备，否则驾驶 macOS 连接此 USB device，如下图： 2019 年 5 月 29 日更新 最近得知三星已经给一些设备推送了 Android Pie 的更新，而组里面几部 Tab S4 都是运行国内版系统的国行机器，所以没有收到更新通知，所以我就有了把我手里的 Tab S4 刷回基于 Android Pie 的国外版三星系统。 步骤很简单，先用 SamFirm tool 下载基于 Android Pie 的 stock firmware 包，然后设备先进入 TWRP recovery (我之前刷了 TWRP，所以有这个)，然后点 Reboot 再点 Download 即可进入三星设备的 Download 模式，然后就是很简单地使用 odin 工具把系统刷进去就好了。 注意 Download 模式和 Recovery 是不一样的。TWRP 是 custom recovery，而三星自带的 recovery 是类似下面这样的: 即使用 TWRP 取代了自带的 Recovery，我们依然可以进入 Download 模式，从而用 odin 刷回到官方 firmware。","categories":[],"tags":[{"name":"GSI","slug":"GSI","permalink":"https://tao93.top/tags/GSI/"},{"name":"Project Treble","slug":"Project-Treble","permalink":"https://tao93.top/tags/Project-Treble/"}]},{"title":"Android Toast 两个 Crash","slug":"Android Toast 两个 Crash","date":"2018-12-22T15:05:48.751Z","updated":"2019-07-05T13:36:03.113Z","comments":true,"path":"2018/12/22/Android Toast 两个 Crash/","link":"","permalink":"https://tao93.top/2018/12/22/Android Toast 两个 Crash/","excerpt":"","text":"Toast 是 Android 系统一种非常简单的提示性小工具，最近我尝试修复 Toast 相关的两种 Crash，所以把相关的原委和过程记录了下来。先来看一下第一种 Crash 的 log: 12345678910android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@e2815e is not valid; is your activity running? at android.view.ViewRootImpl.setView(ViewRootImpl.java:679) at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:342) at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93) at android.widget.Toast$TN.handleShow(Toast.java:459) at android.widget.Toast$TN$2.handleMessage(Toast.java:342) at android.os.Handler.dispatchMessage(Handler.java:102) at android.os.Looper.loop(Looper.java:154) at android.app.ActivityThread.main(ActivityThread.java:6119) at java.lang.reflect.Method.invoke(Native Method) 上面的 stack trace 中的代码全部是关于 UI 线程中处理一个消息的，这个消息需要做的是把 Toast 需要显示的 view 添加到 WindowManager 中，从而可以显示出来。这样的 crash 是没有任何 app 代码牵涉其中的，所以无法确定是 app 何处的代码导致的这个 crash。我们先来看看 Toast 显示的大致过程。 首先是通过 Toast#makeText 方法或者 Toast 构造函数创建 Toast 对象，然后就可以调用它的 show 方法了。不过此方法是异步的，它仅仅是将该 toast 添加到一个队列中，等待显示，即此方法不等 toast 真正显示就已经返回了，而 toast 的显示需要用一个新的 UI 线程消息中的代码来显示出来。 Toast#show 方法： 12345678910111213141516171819/** * Show the view for the specified duration. */public void show() &#123; if (mNextView == null) &#123; throw new RuntimeException(\"setView must have been called\"); &#125; INotificationManager service = getService(); String pkg = mContext.getOpPackageName(); TN tn = mTN; tn.mNextView = mNextView; try &#123; service.enqueueToast(pkg, tn, mDuration); &#125; catch (RemoteException e) &#123; // Empty &#125;&#125; 上面代码的第 15 行是一个跨进程调用了 NotificationServiceManager 的方法，而作为参数的 TN 对象是实现了 IInterface 的，所以可以通过 Binder 传给其他进程。Toast 真正的显示，需要等 NotificationServiceManager 回调回来，这个回调也就是调用 Toast 内部类 TN 的 show 方法。而从 api 25 开始，此方法还会将 NotificationServiceManager 产生的一个 window token 传递过来。 api 25 中的 TN#show 方法： 12345678/** * schedule handleShow into the right thread */@Overridepublic void show(IBinder windowToken) &#123; if (localLOGV) Log.v(TAG, \"SHOW: \" + this); mHandler.obtainMessage(0, windowToken).sendToTarget();&#125; api 24 中的 TN#show 方法： 12345678/** * schedule handleShow into the right thread */@Overridepublic void show() &#123; if (localLOGV) Log.v(TAG, \"SHOW: \" + this); mHandler.post(mShow);&#125; 此 TN#show 方法是被远程调用的，所以实际会运行在 app 的 Binder 线程池的线程中，所以此方法向主线程发了一个消息，这个消息才是真正让 toast 显示的地方。不同的是 api 25 的代码还会把 window token 也传递到消息中。处理这个消息的代码，会调用 TN#handleShow 方法，这个 handleShow 是下面这样的： 12345678910111213141516171819202122232425262728293031323334353637383940public void handleShow() &#123; if (localLOGV) Log.v(TAG, \"HANDLE SHOW: \" + this + \" mView=\" + mView + \" mNextView=\" + mNextView); if (mView != mNextView) &#123; // remove the old view if necessary handleHide(); mView = mNextView; Context context = mView.getContext().getApplicationContext(); String packageName = mView.getContext().getOpPackageName(); if (context == null) &#123; context = mView.getContext(); &#125; mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE); // We can resolve the Gravity here by using the Locale for getting // the layout direction final Configuration config = mView.getContext().getResources().getConfiguration(); final int gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection()); mParams.gravity = gravity; if ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123; mParams.horizontalWeight = 1.0f; &#125; if ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123; mParams.verticalWeight = 1.0f; &#125; mParams.x = mX; mParams.y = mY; mParams.verticalMargin = mVerticalMargin; mParams.horizontalMargin = mHorizontalMargin; mParams.packageName = packageName; mParams.removeTimeoutMilliseconds = mDuration == Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT; if (mView.getParent() != null) &#123; if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this); mWM.removeView(mView); &#125; if (localLOGV) Log.v(TAG, \"ADD! \" + mView + \" in \" + this); mWM.addView(mView, mParams); trySendAccessibilityEvent(); &#125;&#125; 上面代码的第 37 行，才是真正把 toast 的 view 添加到 WindowManager，也就是让 toast 显示出来，至此理了一遍 toast 显示的流程。而最前面的 crash log 表明，crash 是发生在 ViewRootImpl#setView 方法中的，并且提示 window token invalid。这其实就是提示 从 NotificationManagerService 传过来给 TN 的 token 对象失效了。而失效的原因，其实得从 NotificationManagerService 中找。 NotificationManagerService#showNextToastLocked 方法： 12345678910111213141516171819202122232425void showNextToastLocked() &#123; ToastRecord record = mToastQueue.get(0); while (record != null) &#123; if (DBG) Slog.d(TAG, \"Show pkg=\" + record.pkg + \" callback=\" + record.callback); try &#123; record.callback.show(record.token); scheduleTimeoutLocked(record); return; &#125; catch (RemoteException e) &#123; Slog.w(TAG, \"Object died trying to show notification \" + record.callback + \" in package \" + record.pkg); // remove it from the list and let the process die int index = mToastQueue.indexOf(record); if (index &gt;= 0) &#123; mToastQueue.remove(index); &#125; keepProcessAliveIfNeededLocked(record.pid); if (mToastQueue.size() &gt; 0) &#123; record = mToastQueue.get(0); &#125; else &#123; record = null; &#125; &#125; &#125;&#125; 此方法就是 NotificationManagerService 发起显示下一个 toast 的代码，注意到第 6 行调用的 show 方法，其实就是远程调用 TN 对象的 show 方法，而第 6 行的 callback 其实就是 TN 对象所对应的远程代理对象。紧接着第 7 行调用的 scheduleTimeoutLocked 方法，其实设定了一个失效限制，使得第 6 行传递的 token 会在几秒内失效。 scheduleTimeoutLocked 方法 1234567private void scheduleTimeoutLocked(ToastRecord r)&#123; mHandler.removeCallbacksAndMessages(r); Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r); long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY; mHandler.sendMessageDelayed(m, delay);&#125; 上面代码发送一个 delayed 消息(截止 api 27，此 delay 时长是 2 秒或 3.5 秒），处理上面方法发送的消息的代码： 1234567891011@Overridepublic void handleMessage(Message msg)&#123; switch (msg.what) &#123; case MESSAGE_TIMEOUT: handleTimeout((ToastRecord)msg.obj); break; ... &#125;&#125; 上面被调用的 handleTimeOut 方法： 12345678910private void handleTimeout(ToastRecord record)&#123; if (DBG) Slog.d(TAG, \"Timeout pkg=\" + record.pkg + \" callback=\" + record.callback); synchronized (mToastQueue) &#123; int index = indexOfToastLocked(record.pkg, record.callback); if (index &gt;= 0) &#123; cancelToastLocked(index); &#125; &#125;&#125; 上面第 7 行被调用的 cancelToastLocked 方法： 12345678910111213141516171819202122 void cancelToastLocked(int index) &#123; ToastRecord record = mToastQueue.get(index); try &#123; record.callback.hide(); &#125; catch (RemoteException e) &#123; Slog.w(TAG, \"Object died trying to hide notification \" + record.callback + \" in package \" + record.pkg); // don't worry about this, we're about to remove it from // the list anyway &#125; ToastRecord lastToast = mToastQueue.remove(index); mWindowManagerInternal.removeWindowToken(lastToast.token, true, DEFAULT_DISPLAY); keepProcessAliveIfNeededLocked(record.pid); if (mToastQueue.size() &gt; 0) &#123; // Show the next one. If the callback fails, this will remove // it from the list, so don't assume that the list hasn't changed // after this point. showNextToastLocked(); &#125;&#125; 上面第 13 行就是使 window token 失效的代码。至此可知，NotificationServiceManager 远程调用 TN#show 方法后几秒内，此 token 就会失效，在这几秒内如果 toast 没有真正添加到 WindowManager，那么等添加的时候，就会出现 BadTokenException，应用就会 crash。而阻碍 toast 的 view 被添加到 WindowManager，只有 UI 线程的忙碌，也就是如果 UI 线程已经在执行或者马上要执行的其他消息比较耗时，那么 toast 的 view 就无法及时添加。 不过，Google 也意识到这种 UI 线程 block 不到 ANR 时长就 crash 的现象了，所以在 api 26 中，此 BadTokenException 直接被捕获了，也就是下面的第 42 行： 1234567891011121314151617public void handleShow(IBinder windowToken) &#123; ... if (mView != mNextView) &#123; ... if (localLOGV) Log.v(TAG, \"ADD! \" + mView + \" in \" + this); // Since the notification manager service cancels the token right // after it notifies us to cancel the toast there is an inherent // race and we may attempt to add a window after the token has been // invalidated. Let us hedge against that. try &#123; mWM.addView(mView, mParams); trySendAccessibilityEvent(); &#125; catch (WindowManager.BadTokenException e) &#123; /* ignore */ &#125; &#125;&#125; 所以此 crash，仅仅发生在 api 25 的系统中，要修复这个问题，可以参考 github 上的 ToastCompat 中的方法。 再来看一下另一种 Crash log： 1234567891011121314java.lang.IllegalStateException: View android.widget.LinearLayout&#123;41a97eb8 V.E..... ......ID 0,0-540,105 #7f0b020d app:id/toast_layout_root&#125; has already been added to the window manager. at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:223) at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69) at android.widget.Toast$TN.handleShow(Toast.java:402) at android.widget.Toast$TN$1.run(Toast.java:310) at android.os.Handler.handleCallback(Handler.java:730) at android.os.Handler.dispatchMessage(Handler.java:92) at android.os.Looper.loop(Looper.java:137) at android.app.ActivityThread.main(ActivityThread.java:5136) at java.lang.reflect.Method.invokeNative(Method.java) at java.lang.reflect.Method.invoke(Method.java:525) at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:737) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553) at dalvik.system.NativeStart.main(NativeStart.java) 这个 crash 原因是同一个 view 被重复添加到 WindowManager 导致的。抛出异常的地方是 WindowManagerGlobal#addView 方法，也就是下面的代码第 15 行： 1234567891011121314151617181920public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow) &#123; if (view == null) &#123; throw new IllegalArgumentException(\"view must not be null\"); &#125; if (display == null) &#123; throw new IllegalArgumentException(\"display must not be null\"); &#125; ... int index = findViewLocked(view, false); if (index &gt;= 0) &#123; if (mDyingViews.contains(view)) &#123; // Don't wait for MSG_DIE to make it's way through root's queue. mRoots.get(index).doDie(); &#125; else &#123; throw new IllegalStateException(\"View \" + view + \" has already been added to the window manager.\"); &#125; // The previous removeView() had not completed executing. Now it has. &#125; 从上面代码可知，第 10 行 index 非负，且 mDyingViews 包含需添加的 view，则会抛出此异常。第 10 行 index 非负的原因，是 mViews 包含此 view，如下面代码所示： 1234567private int findViewLocked(View view, boolean required) &#123; final int index = mViews.indexOf(view); if (required &amp;&amp; index &lt; 0) &#123; throw new IllegalArgumentException(\"View=\" + view + \" not attached to window manager\"); &#125; return index;&#125; 所以，也就是当需要添加一个 view 时，如果此 view 在 mViews 中却不在 mDyingViews 中，那就会抛出异常。现在我们看一下 Toast#TN#handleShow 方法： 123456789101112131415161718192021public void handleShow(IBinder windowToken) &#123; ... if (mView != mNextView) &#123; ... if (mView.getParent() != null) &#123; if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this); mWM.removeView(mView); &#125; if (localLOGV) Log.v(TAG, \"ADD! \" + mView + \" in \" + this); // Since the notification manager service cancels the token right // after it notifies us to cancel the toast there is an inherent // race and we may attempt to add a window after the token has been // invalidated. Let us hedge against that. try &#123; mWM.addView(mView, mParams); trySendAccessibilityEvent(); &#125; catch (WindowManager.BadTokenException e) &#123; /* ignore */ &#125; &#125;&#125; 上面代码显示，实际上，Toast 被现实时，其实会先把 view 从 WindowManager 移除（注意一下移除的前提是 view 的 parent 不空），然后再尝试添加。我们看看 WindowManagerGlobal#removeView 方法： 1234567891011121314151617public void removeView(View view, boolean immediate) &#123; if (view == null) &#123; throw new IllegalArgumentException(\"view must not be null\"); &#125; synchronized (mLock) &#123; int index = findViewLocked(view, true); View curView = mRoots.get(index).getView(); removeViewLocked(index, immediate); if (curView == view) &#123; return; &#125; throw new IllegalStateException(\"Calling with view \" + view + \" but the ViewAncestor is attached to \" + curView); &#125;&#125; 需要注意上面方法有个 immediate 参数，不过从 Toast#TN#handleShow 调用过来时，这个参数会是 false。现在假设 view 包含在 mViews 中，那么上面第 7 行 index 将非负，上面第 9 行调用了 removeViewLocked 方法： 123456789101112131415161718private void removeViewLocked(int index, boolean immediate) &#123; ViewRootImpl root = mRoots.get(index); View view = root.getView(); if (view != null) &#123; InputMethodManager imm = InputMethodManager.getInstance(); if (imm != null) &#123; imm.windowDismissed(mViews.get(index).getWindowToken()); &#125; &#125; boolean deferred = root.die(immediate); if (view != null) &#123; view.assignParent(null); if (deferred) &#123; mDyingViews.add(view); &#125; &#125;&#125; 上面代码 第 11 行因为 immediate 为 false，所以返回的 deferred 是 true，那么第 15 行就会把 view 添加到 mDyingViews。 至此总结一下，只要 view 的 parent 不空，那么它就会尝试被移除，如果 mView是中有次 view，则尝试移除的结果就是 mDyingViews 也会包含此 view，则 crash 不会发生。 经过分析系统代码，我发现给 view 设置 parent 是在 ViewRootImpl 中的 setView 方法调用 view.assignParent(this) 做到的，而 ViewRootImpl #setView 是在 WindowManagerGlobal#addView 调用的。置空 parent 则是在 WindowManagerGlobal#removeViewLocked 做的，而从 mViews 移除 view 是在 WindowManagerGlobal#doRemoveView 做的： 1234567891011121314void doRemoveView(ViewRootImpl root) &#123; synchronized (mLock) &#123; final int index = mRoots.indexOf(root); if (index &gt;= 0) &#123; mRoots.remove(index); mParams.remove(index); final View view = mViews.remove(index); mDyingViews.remove(view); &#125; &#125; if (ThreadedRenderer.sTrimForeground &amp;&amp; ThreadedRenderer.isAvailable()) &#123; doTrimForeground(); &#125;&#125; 由于这些方法都是在主线程调用的，所以可以肯定，在 addView 时，mView 包含 view 时，则此 view 的 parent不空。而 mView 不包含 view 时，它的 parent 为空。看起来似乎无懈可击，系统代码确保了 toast 的显示不会出现重复添加 view 导致的 IllegalStateException。但是明明 crash 就是发生了，分析堆栈也可知就是出现了 view 在 mViews 中但却不在 mDyingViews 中的情况。 经过分析，我可能找到了一种原因。先来看 WindowManagerGlobal#addView 方法： 12345678910111213141516171819202122232425262728293031323334353637383940public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow) &#123; ... ViewRootImpl root; View panelParentView = null; synchronized (mLock) &#123; ... int index = findViewLocked(view, false); if (index &gt;= 0) &#123; if (mDyingViews.contains(view)) &#123; // Don't wait for MSG_DIE to make it's way through root's queue. mRoots.get(index).doDie(); &#125; else &#123; throw new IllegalStateException(\"View \" + view + \" has already been added to the window manager.\"); &#125; // The previous removeView() had not completed executing. Now it has. &#125; ... root = new ViewRootImpl(view.getContext(), display); view.setLayoutParams(wparams); mViews.add(view); mRoots.add(root); mParams.add(wparams); // do this last because it fires off messages to start doing things try &#123; root.setView(view, wparams, panelParentView); &#125; catch (RuntimeException e) &#123; // BadTokenException or InvalidDisplayException, clean up. if (index &gt;= 0) &#123; removeViewLocked(index, true); &#125; throw e; &#125; &#125; &#125; 首先上面代码可能存在一处漏洞。假设 view 之前从未添加过，那么低 9 行返回 -1，第 25 至 27 行把 view 添加到了 mViews 中，然后假设此 view 添加过程中失败了，即第 31 行抛出了异常，可是此时 index 是 -1，所以第 15 行企图移除此 view 是做不到的，于是此 view 就留在了 mViews 中，这可能是系统的移除漏洞。另一种情况，假设第 9 行返回非负值，那么此 view 在第 13 行会立即移除，第 25 行重新添加到 mView 中时，此 view 新的 index 已经不是第 9 行的值了，然后如果第 31 行添加失败，那么第 35 行将会被执行，可是 index 是错误的，这将会导致错误的 view 被移除！ 上面可能的漏洞要发生，需要第 35 行抛出异常，而查看 ViewRootImpl#setView 方法可知，如果异常抛出，那么 view 的 parent 将尚未设置: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) &#123; synchronized (this) &#123; if (mView == null) &#123; ... if (res &lt; WindowManagerGlobal.ADD_OKAY) &#123; mAttachInfo.mRootView = null; mAdded = false; mFallbackEventHandler.setView(null); unscheduleTraversals(); setAccessibilityFocus(null, null); switch (res) &#123; case WindowManagerGlobal.ADD_BAD_APP_TOKEN: case WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN: throw new WindowManager.BadTokenException( \"Unable to add window -- token \" + attrs.token + \" is not valid; is your activity running?\"); case WindowManagerGlobal.ADD_NOT_APP_TOKEN: throw new WindowManager.BadTokenException( \"Unable to add window -- token \" + attrs.token + \" is not for an application\"); case WindowManagerGlobal.ADD_APP_EXITING: throw new WindowManager.BadTokenException( \"Unable to add window -- app for token \" + attrs.token + \" is exiting\"); case WindowManagerGlobal.ADD_DUPLICATE_ADD: throw new WindowManager.BadTokenException( \"Unable to add window -- window \" + mWindow + \" has already been added\"); case WindowManagerGlobal.ADD_STARTING_NOT_NEEDED: // Silently ignore -- we would have just removed it // right away, anyway. return; case WindowManagerGlobal.ADD_MULTIPLE_SINGLETON: throw new WindowManager.BadTokenException(\"Unable to add window \" + mWindow + \" -- another window of type \" + mWindowAttributes.type + \" already exists\"); case WindowManagerGlobal.ADD_PERMISSION_DENIED: throw new WindowManager.BadTokenException(\"Unable to add window \" + mWindow + \" -- permission denied for window type \" + mWindowAttributes.type); case WindowManagerGlobal.ADD_INVALID_DISPLAY: throw new WindowManager.InvalidDisplayException(\"Unable to add window \" + mWindow + \" -- the specified display can not be found\"); case WindowManagerGlobal.ADD_INVALID_TYPE: throw new WindowManager.InvalidDisplayException(\"Unable to add window \" + mWindow + \" -- the specified window type \" + mWindowAttributes.type + \" is not valid\"); &#125; throw new RuntimeException( \"Unable to add window -- unknown error code \" + res); &#125; ... view.assignParent(this); ... &#125; &#125;&#125; 从上面代码可知，如果抛出异常，view.assignParent(this) 将未被调用。 至此，可将我的猜测总结为：当使用同一个 view 多次显示 toast 时，可能某一次添加失败，导致 view 留在 mViews 中，可是 view 的 parent 又因为添加失败而为空，所以 Toast#TN#handleShow 方法没有调用从 WindowManager 移除此 view 的代码，所以 WindowManagerGlobal#addView 被调用时，view 不在 mDyingViews 中，所以 crash 发生了。 可是这只是猜测，无法验证猜测是否正确。 ----- 以下是 2019 年 1 月 11 日的更新 ------ 现已发现复现第二种 crash (IllegalStateException: view has already been added to the window manager) 的方法，也就是如下的代码： 123456789101112131415161718192021222324public class MainActivity extends AppCompatActivity &#123; private View toastLayout; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); toastLayout = LayoutInflater.from(this).inflate(R.layout.connection_toast, null); findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast toast = new Toast(MainActivity.this); toast.setView(toastLayout); toast.show(); try &#123; Thread.sleep(1980); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; 上面的代码，点击几次按钮来执行 onClick 方法，就可以复现 crash。复现思路是，先让前一个 toast 把 view 添加到 WindowManager，但要让它添加失败，然后第二次另一个 toast 再添加此 view，此次发生 crash，这个思路也是按照前面的猜想来的。首先，上面的代码是将同一个 view 添加到不同的 toast 对象去 show，当添加到第一个 toast 调用 show 方法后，主线程 sleep 1980 毫秒，这个时间是很微妙的，接近 2000 毫秒但是却略少。这个时间可以使得主线程醒来时，toast 的 token 即将失效。不能用更长的 sleep 时间是因为那样的话，主线程还在 sleep 中 token 已失效，token 的失效是在 NotificationManagerService 中产生的，失效后，NotificationManagerService 会处理 MESSAGE_DURATION_REACHED 消息，最终会跨进程调用到 Toast#TN#hide 方法，而这个方法会让我们 app 的主线程消息队列增加一个 HIDE 消息： 如此一来，当主线程 sleep 结束执行 Toast#TN#handleShow 方法时，就会因消息队列已有 HIDE 消息而提前返回: 既然都提前返回了，view 也就不会被第一个 toast 添加到 WindowManager，那么也就不符合我们的思路中「让第一个 toast 把 view 添加到 WindowManager 是发生异常」的想法。 所以，需要 1980 毫秒这样一个时间，这个时间使得主线程醒来执行到第一个 toast 的 Toast#TN#handleShow 时，token 还没失效，所以 handleShow 方法不会提前返回，所以 view 会继续往 WindowManager 添加，但是 20 毫秒不足以让这个添加顺利完成，相反，很可能添加时 token 失效了， 于是添加失败，发生第一种 crash 的 BadTokenException (Anddroid 8 以上此异常会被捕获，前文已描述)，这样就符合我们的思路了。下面截图证明了确实发生了 BadTokenException： 至此，按照前面的思路，此 view 将会无 parent，但是却留在了 WindowManagerGlobal 的 mViews 中，却又不在 mDyingViews 中，于是，当再次按下按钮，执行另一个 toast 添加此 view 的代码时，WindowManagerGlobal#addView 中将发生 IllegalStateException，crash 也就复现了，截图为证： 至此，toast crash 的分析算是有了一个比较完满的结尾。对于本文中 2019 年 1 月 11 日更新的部分，在此感谢刘成同学提供的帮助，他本来用来复现问题的方式是「先调一个 toast 的 show，sleep 三四秒，然后再用同一个 view 调另一个 toast 的 show」，这个方式因为前面讲的原因而无法复现 crash，但却给了我灵感，让我想到了 1980 毫秒这个时间，最终成功复现了 crash。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"Java Comparable Contracts","slug":"Java Comparable Contracts","date":"2018-12-22T13:10:08.148Z","updated":"2019-07-05T13:38:34.760Z","comments":true,"path":"2018/12/22/Java Comparable Contracts/","link":"","permalink":"https://tao93.top/2018/12/22/Java Comparable Contracts/","excerpt":"","text":"实现 Java 中的 Comparable 接口的对象，可以用在 Collections#sort 等方法中进行排序等。通常来说，Comparable 接口的 compareTo 方法都是写起来比较简单的。不过，偶尔还是可能翻车的。比如下面的 crash log，就是翻车的现场： 12345678java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.TimSort.mergeHi(TimSort.java:868) at java.util.TimSort.mergeAt(TimSort.java:485) at java.util.TimSort.mergeCollapse(TimSort.java:408) at java.util.TimSort.sort(TimSort.java:214) at java.util.TimSort.sort(TimSort.java:173) at java.util.Arrays.sort(Arrays.java:659) at java.util.Collections.sort(Collections.java:217) 异常显示违反了 general contract，这些 contract 其实在 Comparable#compareTo 方法的注释中就讲到了，主要就是相反性、传递性、等价性三条 contract。这些 contract 可以写成下面这样的形式： $sgn(x.compareTo(y)) = -sgn(y.compareTo(x)) $ $sgn(x.compareTo(y)) &gt; 0$ and $sgn(y.compareTo(z)) &gt; 0$ implies $sgn(x.compareTo(z)) &gt; 0$ $sgn(x.compareTo(y)) = 0$ implies sgn(x.compareTo(z)) = sgn(y.compareTo(z))$ 上面的 $sgn$ 函数就是下面这样的： 所以第一条的意思是 x 与 y 的比较结果和 y 与 x 的比较结果必须相反；第二条的意思是，比较结果是具有传递性的，第 3 条是如果 x 和 y 的比较结果是相等的，那么它们与任何 z 的比较结果相同。 简单实现的 compareTo 方法通常不会违背上面的协议，不过，稍微复杂点的，就不一定了。比如下面的例子： 1234567891011@Overridepublic int compareTo(Object o2) &#123; Data d2 = (Data) o2 if (isSortByName()) &#123; return getName().compareTo(d2.getName()); &#125; else if (isSortByAge()) &#123; return getAge() - d2.getAge(); &#125; else &#123; return 0; &#125;&#125; 以上面代码来实现 Comparable 接口的对象，然后进行排序，是可能存在的问题的。在一次完整的排序过程中，上面的 compareTo 方法需要调用多次，但是上面的 isSortByName 和 isSortByAge 方法的返回是可能变化的，比如多线程情况下其他线程可能修改了 isSortByName 方法所使用的变量的值。当 isSortByName 的结果变化时，意味着排序的比较标准也变了，自然非常容易违反前面说到的 contract。 而下面的代码片段，同样是有问题的： 12345678910111213141516171819@Overridepublic int compareTo(Object o2) &#123; Data d2 = (Data) o2 boolean date1Empty = TextUtils.isEmpty(getDateStr()); boolean date2Empty = TextUtils.isEmpty(d2.getDateStr()); if (date1Empty &amp;&amp; date2Empty) &#123; return 0; &#125; if (! date1Empty &amp;&amp; ! date2Empty) &#123; SimpleDateFormat format = new SimpleDateFormat(\"....\"); try &#123; Date date1 = format.format(getDateStr()); Date date2 = format.format(d2.getDateStr()); return date1.compareTo(date2); &#125; catch(ParseException e) &#123; return 0; &#125; &#125;&#125; 上面代码的问题在于，ParseException 被捕获并且直接返回 0 了。这意味着两个 date string 只要有一个是无法解析的，那么比较结果就是0，也就是相等。加入 a, b, c 三个 date string，只有 b 是无法解析的，那么 a 和 b 比较结果为 0，b 和 c 比较结果也是 0，则根据第 3 条 contract，a 和 c 的比较结果也应该是 0，可是 a 和 c 都是可以正常解析的，它们的比较结果不一定是 0。所以第 3 条 contract 会被违反。 要改正上面的代码片段，可以直接把异常抛出，以期提前将不可解析的 date string 避免掉。另一种方式更啰嗦点，就是两个不可解析的 date string 认为是相等的，然后可解析和不可解析的字符串的比较约定好大小关系，并确保符合相反性 contract。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://tao93.top/tags/Java/"}]},{"title":"给三星 tablet SM-T830 刷机","slug":"Flash stock firmware in SM-T830","date":"2018-12-08T09:54:33.676Z","updated":"2019-07-05T13:37:49.631Z","comments":true,"path":"2018/12/08/Flash stock firmware in SM-T830/","link":"","permalink":"https://tao93.top/2018/12/08/Flash stock firmware in SM-T830/","excerpt":"","text":"背景前天公司发给我一部三星 tablet 作为测试机，是 Tab S4 wifi 版，具体型号是 SM-T830，虽然不是我期待的 Pixel 3 XL，但是配置也还不错，加上屏幕也比较大。但是坑就坑在，这是一部国行的机器，没有 Google Mobile Service (GMS) 不说，还充斥了不少国内生态的杂物，比如系统设置中的 device storage 界面，居然写着「powered by 360」，还有一些预装的国内应用。 这时摆在我前面的有三种方法：第一，刷机刷入一个原生 Android 系统，这当然是最完美的；第二，找一个三星官方的但是是国外版的系统刷入，这种系统会有 GMS；第三，自己把确实的 Google 服务安装上去，凑活着用。 以上第一种方法，我在网上查了查，几乎不可能，因为这个 机型比较小众，网上根本没有给它刷原生系统的方法，就连 LineageOS 也没有支持这个机型。第二种方法，是比较可行的，这款 tablet 即使小众，也是在全球销售的，国外绝大部分地区销售的都是带有 GMS 的，此外这是个 WiFi 版机型，也不用担心运营商和网络制式的问题，所以刷成功的话，虽不是原生 Android，但也有完整可靠的 GMS 全件套。第三种方法，改动最小，但是也可能有后遗症，因为这样自行补充安装 Google service 的方式有可能是不完备可靠的，指不定啥时候就出点 bug。 所以我就开始实施第二种方法：刷入三星官方固件的国外版本，最后这件事折腾了我一天多。 下载 (错误的) 固件包首先是获取固件包，在网上找了一通，找到了 xda 上的这个帖子，里面贴出了存放在 Google drive 的适用于 SM-T830 的两个官方固件的链接，一个是法国版，另一个是阿拉伯联合酋长国版。帖子的作者还说，他对刷机可能出现的后果不负任何责任，提供这两个包只是让大家免收一些网站要收费才能下载固件包或者是付费才能提速下载的恶心。话说，SM-T830 的小众，从我搜遍 xda 也没找到几个和它相关的帖子即可略见一斑。 固件包大小约是 3.6 GB，起先我从浏览器直接下载 Google drive 上的固件包，网速很慢只有 100KB/S 的样子，下了挺久最后都失败了。后面我发现，先把固件添加到我自己的 Google drive 空间，然后在手机上的 Google drive 应用中下载，配合公司的网络环境，速度可以很快，差不多半个小时就下载好了。 企图用虚拟机，失败三星的内部刷机工具 odin，只能用 Windows 运行，我手里只有 Mac，所以我一开始希望用 virtual box 中的 win10 虚拟机来操作。我从硬盘里面把很久前备份的 win10 的 virtual disk image (也就是一个 .vdi 文件) 拷贝到电脑，然后以此新建一个虚拟机，成功的运行，但是鼓捣了半天，也无法让这个虚拟机连接 USB 设备，别说这台 tablet 不行，连 U 盘都不行。VirtualBox VM Extension Pack 安装了，在 win10 里面也安装了 Guest Additions，USB device filters 也配置了，就是不行，只能放弃，找同事借用 Windows 台式机。 2019年1月1日更新：我后面 VirtualBox 装 Windows 虚拟机是可以连接到 Android 设备的，并且可以刷机，见给三星 tablet SM-T830 刷机[续] 的最后一部分 失败的刷机在同事的台式机上操作之前，我在网上已经看了一段讲解刷机过程的视频，感觉挺简单的，就几个步骤而已。等到开始在 Windows 上面开始弄，我把固件包解压，然后用 odin 开始，这才发现那个视频其实过时了，视频中固件包解压后只有一个文件，但是我解压后其实有 4 个文件。其实这一点 Odin 中都已经提示了，new model 需要 4 个文件： 所以我的固件包是比较新的，所以有多个文件，但是仔细对比发现有点问题，odin 需要的是 BL, AP, CP, HOME_CSC 4 部分，但是我的固件包解压后 4 个文件的文件名是如下所示 (文件我已经删掉了，所以没法贴出完整文件名)： BL…AP…CSC…HOME_CSC… 相当于没有 CP 开头的，反而似乎有两个 CSC 的，这时我也没夺多管，依次点击 odin 中的 BL, AP, CP, CSC 四个安装，然后把 4 个文件都添加进去，然后就点 start 了，然后就失败了。于是我把 CP 和 CSC 需要的文件调换了一下，还是失败。 这时候我就查了一下为啥少了 CP 开头的文件，这才发现，原来 WiFi 版就是没有 CP 文件，这是和基带相关的，只有可插卡上网的版本才有。顺便也发现了我的 CSC… 和 HOME_CSC… 两个文件的区别，据说前者是彻底清空数据，后者会保留用户数据，所以这两个文件其实作用是类似的，其实我也注意到它们大小也非常相近，都是 180MB 左右。 于是我就空出 CP 那里不添加文件，其余 3 个添加上，然后 start，结果左边文本框停留在 ‘setupconnection..’，我一查，发现很多说卡在这一步的，纷纷在求 help。没办法我就只能继续查，有说要先运行 odin 后连接 USB 数据线的(试了不行)。查了一阵，终于查到一个看起来比较靠谱的方法，依然是 xda 论坛上的： 我按照上面说的一步一步走，依然失败，但是没再卡在 setupconnection 了。我总结发现，odin 应该确实有 bug，明明设备连接正常，它就是卡在这一步，这时候可以这么做：1. 重新启动设备，1. 断开 USB 连接，3. 进入 downloading mode，4. 连接 USB 然后再在 odin 中 start，就不会卡在那一步了。 回到刚刚说的，虽然没卡在 setupconnection 了，但是依然失败，提示大概是： abl.elf FAIL! (Auth) Complete(Write) operation failed. All threads completed. (succeed 0 / failed 1) 以 abl.elf 为关键字又是一番在网上搜索，最后发现这个帖子有人遇到这个问题最后解决了： 起初我对「固件版本落后于现有版本」这句话不以为然，因为我觉得这不就意味着只能升级不能降级嘛，不科学。但后面我忽然想到，这句话意思可能是刷机不能刷那些版本比设备出厂时系统版本还更旧的固件，就上这个人确实解决了问题，并且我前面下的固件包都是 2018 年 8 月份的，确实有点旧，所以我开始想怎么下最新的用于 SM-T830 的固件。 下载最新的固件包这时，就又回到开始找固件包的步骤了，网上满是假链接，或者是要注册，要交费的，找得人心累。不过，最后竟然找到一个叫 SamFirm tool 的神器，这个神器可以直接高速下载想要的最新固件，简直不能更棒。如下图所示，输入系统型号，然后选择 auto 模式来查找，就能找到最新的固件，并且下载速度还很快！这个帖子可以下载到这个神器。 如上图所示，准确地填入型号，填入要下载的固件的国家或地区代号（这里我要填的就是某个外国或国外地区，这样固件包才会有 GMS）。这个国家或地区代号可以从这里找到，我在上一张图中填入的是 XEF，其实就是代表法国。填好后勾选 Auto，然后点击 Check Update，即可检查到最新固件包的信息，我在今天（2018年12月8日）检查到的 SM-T830 的法国版最新固件包如上图箭头所示，是 2018年10月24日更新的。然后就可以在 SamFirm 右边点下载了。建议勾选 Decrypt automatically，否则 下载好固件包后还需要重新解密，费时间。 国家或地区代号截图： 成功刷机下载到最新固件后，解压，然后用 odin 依次填入 BL AP CSC 三个地方的文件，点 start，继续卡在 setupconnection，按照我之前的总结跳过这个 setupconnection，然后真正开始刷机，大概 10 分钟不到就刷好了。 写在最后刷个机遇到的坑还真是挺多，把这些记录下来，说不定以后公司的国行设备需要刷机，这些记录就能派上用场了。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"},{"name":"Firmware","slug":"Firmware","permalink":"https://tao93.top/tags/Firmware/"},{"name":"Samsung","slug":"Samsung","permalink":"https://tao93.top/tags/Samsung/"}]},{"title":"矩阵运算在 Android 中的简单场景","slug":"矩阵运算在 Android 中的简单场景","date":"2018-12-04T14:52:16.196Z","updated":"2019-07-05T13:43:08.569Z","comments":true,"path":"2018/12/04/矩阵运算在 Android 中的简单场景/","link":"","permalink":"https://tao93.top/2018/12/04/矩阵运算在 Android 中的简单场景/","excerpt":"","text":"让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) 这样一个方法。这个方法中有个矩阵参数，通过传入此矩阵参数，可以将 source Bitmap 经过一定的转换再创建目标 Bitmap。那么这个矩阵是怎么起作用的呢？先看一段示例代码： 123Matrix matrix = new Matrix();matrix.postRotate(90);Bitmap bitmap2 = Bitmap.createBitmap(bitmap1, 0, 0, bitmap1.width(), bitmap1.getHeight(), matrix, true); 上述代码做的事情是将 bitmap1 顺时针旋转 90° 得到 bitmap2，起关键作用的就是这个 matrix。第一行代码会得到一个 3×3 的单位矩阵，而第二行代码之后，矩阵将会变成下面这样： \\begin{bmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} · \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} = \\begin{bmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}注意在 xy 平面内顺时针 rotate 90° 的操作对应的矩阵是 \\begin{bmatrix} cos 90° & -sin 90° & 0 \\\\ sin 90° & cos90° & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} = \\begin{bmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}记上面的矩阵为 R90，记上面代码中的 matrix 为 M，记单位矩阵为 I，那么第 2 行的操作则是等同于下面的表达式： M = R90·M也就是: M = R90·I注意上面的点乘顺序是 R90 在前，I 在后（虽然这里 R90·I 和 I·R90 结果是一样，但别的场景未必如此）。原因是 代码中是 postRotate 方法，这里 post 表示是把 rotate 放在变换的最后一步。而变换矩阵作用 R90·M 作用在目标向量 V 时，将会是表达式： R90·M·V这样就可以理解为是先 M·V 然后这个结果再被 R90 乘，所以是先做 M 本来的变换，然后再做 R90 的变换，也就是 rotate 90° 在最后一步。这也就是第 2 行代码的 postRotate 90° 等价于 M = R90·M 也就是 M = R90·I 的原因。 所以第 3 行代码传入的 matrix 就是： \\begin{bmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}现在我们进入前面说的 createBitmap 这个方法中去看看源码是怎么实现这个变换的： 1234567891011121314151617public static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) &#123; ... Rect srcR = new Rect(x, y, x + width, y + height); RectF dstR = new RectF(0, 0, width, height); RectF deviceR = new RectF(); m.mapRect(deviceR, dstR); neww = Math.round(deviceR.width()); newh = Math.round(deviceR.height()); bitmap = createBitmap(neww, newh, transformedConfig, transformed || source.hasAlpha()); Canvas canvas = new Canvas(bitmap); canvas.translate(-deviceR.left, -deviceR.top); canvas.concat(m); canvas.drawBitmap(source, srcR, dstR, paint); ... return bitmap;&#125; 上面代码第 3 行 srcR 将是 source Bitmap 中要被转换的部分。而 dstR 是同样宽高但是左上角在 (0, 0) 的矩形。第 6 行则是将 dstR 变换后得到 deviceR，根据前面所知 的 m 的值，可知deviceR 将会是 left, top, right, bottom 分别是 -height, 0, 0, width: 即 deviceR 是 dstR 绕原点顺时针旋转 90° 得到的。紧接着代码 7、8 行得到转换后的 Bitmap 的宽高。然后第 9 行以此宽高创建了新的 Bitmap。第 11 行基于此 Bitmap 创建了 canvas。 重点来了，第 12 行对此 canvas 进行平移变换，平移的目的是让 deviceR 的左上角移动到原点。从而让它位于 x 非负且 y 非负的象限。而第 13 行则将 m 矩阵的变换作用在此 canvas 是。需要注意的是，第 12、13 行的变换，都是 pre 的变换而不是 post 的。所以可以看成 13 行的变换其实是比第 12 行的平移先执行的，也就是整个变换过程可理解为先绕原点顺时针旋转 90°，然后再将左上角平移到原点，这样就成功的完成了将原 Bitmap 旋转 90° 并创建新 Bitmap 的操作，虽然这里除了 rotate，其实还利用了 translation 操作。 用 3×3 矩阵在 xy 平面内变换，可以分为 translate, rotate, scale, skew 一共 4 种，表示这四种操作的矩阵分别记作： T(a, b),\\ R(\\theta),\\ S(u, v),\\ SKx(\\theta), SKy(\\theta)那么它们分别是： \\begin{bmatrix} 1 & 0 & a \\\\ 0 & 1 & b \\\\ 0 & 0 & 1 \\end{bmatrix} ,\\ \\begin{bmatrix} cos(\\theta) & -sin(\\theta) & 0 \\\\ sin(\\theta) & cos(\\theta) & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} ,\\ \\begin{bmatrix} u & 0 & 0 \\\\ 0 & v & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} ,\\ \\begin{bmatrix} 1 & tan(\\theta) & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} ,\\ \\begin{bmatrix} 1 & 0 & 0 \\\\ tan(\\theta) & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}分别表示的含义是： 向 +x 方向平移 a 且向 +y 方向平移 b； 以原点为中心在 xy 平面旋转 theta 角度； 以原点为 pivot，x 方向和 y 方向分别伸缩值为 u 和 v 的比例； 每个点的 $x$ 坐标变为 $x + y·tan(\\theta)$，而 $y$ 坐标不变，视觉表现为图形向 +y 方向倾斜，倾斜角度为 $\\theta$; 每个点的 $y$ 坐标变为 $x·tan(\\theta) + y$，而 $x$ 坐标不变，视觉表现为图形向 +x 方向倾斜，倾斜角度为 $\\theta$. 注意, $T(a, 0)$ 和 $T(0, b)$ 组合起来的变换，等价于 $T(a, b)$，且和组合顺序无关，这从矩阵乘法也可以看出来： \\begin{bmatrix} 1 & 0 & a \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}· \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & b \\\\ 0 & 0 & 1 \\end{bmatrix}= \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & b \\\\ 0 & 0 & 1 \\end{bmatrix}· \\begin{bmatrix} 1 & 0 & a \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}= \\begin{bmatrix} 1 & 0 & a \\\\ 0 & 1 & b \\\\ 0 & 0 & 1 \\end{bmatrix}同样的，$S(u, 0)$ 和 $S(0, v)$ 组合起来等价于 $S(u, v)$ 且和组合顺序无关。而 Skew 无此性质。事实上： \\begin{bmatrix} 1 & tan(\\alpha) & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}· \\begin{bmatrix} 1 & 0 & 0 \\\\ tan(\\beta) & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}= \\begin{bmatrix} 1+tan(\\alpha)tan(\\beta) & tan(\\alpha) & 0 \\\\ tan(\\beta) & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}而： \\begin{bmatrix} 1 & 0 & 0 \\\\ tan(\\beta) & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}· \\begin{bmatrix} 1 & tan(\\alpha) & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}= \\begin{bmatrix} 1 & tan(\\alpha) & 0 \\\\ tan(\\beta) & 1+tan(\\alpha)tan(\\beta) & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}接下来说说 Android 中和 3×3 矩阵相关的一些类，也就是 Matrix, Canvas, Camera 这 3 个类，注意最后这个 Camera 类是 android.graphics 包中的，而不是 android.hardware 中的。 Matrix 对象表示一个 3×3 矩阵，常用于指示 x y 平面内的变换，构造函数创建的都是单位矩阵。Matrix 有一系列 set 方法，用于设置矩阵的值，这些方法对应于一些常见的变换操作，比如 setScale(int sx, int sy) 方法，其实就是把矩阵(不管原来是什么值)变成下面的值： \\begin{bmatrix} sx & 0 & 0 \\\\ 0 & sy & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}上面的缩放是以原点为 pivot 缩放的，此外，还有 setScale(float sx, float sy, float px, float py) 这样以 (px, py) 为 pivot 进行缩放的操作，等价于把矩阵变为下面这样： \\begin{bmatrix} sx & 0 & px(1-sx) \\\\ 0 & sy & py(1-sy) \\\\ 0 & 0 & 1 \\end{bmatrix}注意以上矩阵是可以分解的，分解为两个矩阵，且这两个矩阵交换位置后的积也是上面的矩阵。其他的 set 方法与此类似，就不多说了。 Matrix 还有一系列 post 方法和 pre 方法，比如 postRotate(int degrees) 和 preSkew(int kx, int ky) 方法，前者相当于 $M=R(degrees)·M$，后者相当于 $M=M·SK(kx,\\ ky)$. 注意这里矩阵相乘的顺序取决于是 post 还是 pre. 其实 Matrix 也可以在 3 维空间中变换，比如使用它的 setPolyToPoly 方法，可以得到满足指定的映射关系的矩阵。而这种映射关系可能需要 3 为空间的变换才能满足。 Canvas 类包含一个变换矩阵，这个矩阵可以 get 也可以 set，也可以用 concact(Matrix mat) 来改变 Canvas 的变换矩阵的值，这个过程等价于 $M=M·mat$. 另外，Canvas 的 drawBitmap 方法也可以传入 Matrix 对象来控制 bitmap 被 draw 时需要的施加的变换。Canvas 的 translate 和 rotate 等方法，都是 pre 类型的，并且这种变化，可以理解为是对 canvas 的坐标系进行变化。无变换时，坐标系原点在可见区域的左上角，而 +x 向右，+y 向下。translate(10, 0) 后，canvas 原点向右移动 10，此后绘制在 (0, 0) 位置的东西，其实是位于可见区域的左上角右侧距离为 10 的地方。 以上说的可见区域，其实是 Canvas 中的 clip 概念，这是一个描述可见区域的矩形。一般 Canvas 的初始 clip 的 ltrb f分别为 0, 0, view width, view height. 当 Canvas 变换时，可理解为其坐标系变换了，那么自然 clip 也会跟着变化，比如 translate(10, 0) 后，clip 的 ltrb 就变为 -10, 0, view width - 10, view height. Canvas 出于灵活性考虑，有 save 和 restore 两个方法用于保存和恢复变换的状态，常用做法是，在无变换时 save 一下，然后变换并做绘制，最后restore，以避免影响其它绘制工作。出了translate、rotate、Skew、Scale 这些 2 维变换，Canvas 还有一系列 clip 方法，这些方法将 Canvas 进一步剪裁，并根据剪裁后可见区域是否为空返回布尔值。剪裁操作也是可以 save 和 restore 的，但是注意剪裁操作并不变换坐标系。 Camera 对象专门用于计算变换，且包含 3 维空间中的变换(相反 Matrix 对象其实只是 xy 平面内的变换)，它的变换计算结果是一个矩阵，可通过 getMatrix 方法得到，一般会将此矩阵用作它用，可以将 Camera 理解为一个变换计算器。出于灵活性的考虑，Camera 对象中有 save 和 restore 操作，这就像是 git 中的 stash 和 pop stash 操作一样，可以把当前的变换保存，并在后面某个时候恢复出来，恢复之前的值将会丢失。不同的是，git stash 后 working tree 将是 clean 的，即已修改的内容都清空了，而 Camera 对象 save 后，它的矩阵还是 save 之前的，并不会变成单位矩阵。 需要注意的是，Camera 的坐标系，+x 是向右的，+y 是向上的，而 +z 是向屏幕里面的。所以比如 Camera 的 rotateZ(int degrees) 方法和 Matrix 的 [pre|post]Rotate(int degree) 的旋转方向是反过来的。前者等价于逆时针方向转，后者则是顺时针方向转。下面的例子可以说明这一点： 12345678Matrix mat1 = new Matrix();Camera camera = new Camera();camera.rotateZ(-90);camera.getMatrix(mat1);Matrix mat2 = new Matrix();mat2.preRotate(90); 上面代码执行后 mat1 和 mat2 都是： \\begin{bmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}对于 Camera 对象， 调用它的 translate 等方法，会使得它的 matrix 变为 Camera 的坐标系中对应此变换的值，而这样的矩阵，在应用在 Canvas 上进行绘制时，又是作用在 +y 向下的坐标系中。所以比如 Camera translate(10, -20, 0) 后得到的矩阵是： \\begin{bmatrix} 1 & 0 & 10 \\\\ 0 & 1 & 20 \\\\ 0 & 0 & 1 \\end{bmatrix}需要注意的是，当 Camera 在 z 方向进行 translate 操作时，变换对象在屏幕上的投影大小发生变化，所以，实际变换效果是一个缩放变换，所以 Camera getMatrix 的结果，也是一个二维缩放变换的矩阵。Camera 的 location 也就是 3D 投影中的 camera 位置（观察者位置），此位置默认是 (0, 0, -8)，注意这个 -8 实际相当于 -576 个像素。当 z 方向 translate 距离为正时，相当于远离观察者，最终就是缩小的变换，反正是放大的变换。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"微信 Android 版是如何计步的","slug":"微信 Android 版是如何计步的","date":"2018-11-24T04:54:22.998Z","updated":"2019-07-05T13:42:14.095Z","comments":true,"path":"2018/11/24/微信 Android 版是如何计步的/","link":"","permalink":"https://tao93.top/2018/11/24/微信 Android 版是如何计步的/","excerpt":"","text":"很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能比 iOS 系统中的数据更受用户重视，所以就可以把 iOS 系统中的数据替换为手环产生的数据，所以需要允许写入。不过目前而言，Android 系统中，第三方应用似乎无法写入系统的运动数据，而只能读取。 回到正题，众所周知，微信有个微信运动功能。Android 版微信是怎么计步的呢？我最先是在微信的权限页发现微信声明了 Body Sensors 权限，如下所示： 这个权限很有迷惑性，让人以为有这个就可以读 Android 系统产生的计步数据了。事实上，把这个权限关了，然后晃动手机 20 次，再进入微信运动，步数很准确的增加了 20 次左右，所以这个权限并不影响读取计步数据。 那这个权限可以干嘛呢？Body Sensors 权限被列为 dangerous permission，所属的 permission group 仅有这一个权限。不过很遗憾，我在网上查了挺久，没有查到获得这个权限后可以用来写什么代码做什么事情。倘若想要了解此权限的根底，估计需要在 AOSP 中找答案了。可惜我电脑上次升级失败后，目前我电脑中没有完整的 AOSP。 就目前我在网上了解到的信息而言，此权限似乎没什么用，很多帖子都在询问 Google Play Services 为何要使用此权限以及是否可以关闭该权限。我手中的 Pixel XL 也仅有 Google Play Services 和微信声明了此权限： 根据网上的帖子，在 Android 7 时代的某个时候，Gmail 有个 bug，即关闭 Google Play Services 的 Body Sensors 权限后，Gmail 疯狂弹框显示「This app won’t work properly unless you allow Google Play Services’ request to access the foloowing: Body Sensors」，尽管 Gmail 仍能正常工作。因为此弹框太过怪异，随后谷歌修复了此问题，这说明即使是 Google 自己的应用，也没有严格审查自己是否声明了不必要的权限。 当然把 Google Play Services 的 Body Sensors 权限关闭后，打开 Google Fit 应用时，弹出和上面类似的消息，并且 Google Fit 不再显示我的步数，乍一看，这似乎说得通。但是，此时微信仍然可以正常计步。这说明但就计步这一功能看，Body Sensors 并非必要的。 事实上我的计步 Demo 应用如上述微信一样，也还可以计步。计步 Demo 中的代码非常简单，Google 自己也有个展示此功能的简单项目 android-BatchStepSensor。值得一提的是，Google 的简单项目中 manifest 声明了两项 use-feature，但其实这也不是必要的。第三方应用无需声明任何权限，无需声明任何 use-feature，只需注册一个 android.hardware.SensorEventListener 接口，即可在此接口的 onSensorChanged 方法中源源不断的收到步数更新： 1234567891011121314@Overridepublic void onSensorChanged(SensorEvent event) &#123; switch (event.sensor.getType()) &#123; case Sensor.TYPE_STEP_DETECTOR: stepDetector ++; tvDetector.setText(stepDetector + \"\"); break; case Sensor.TYPE_STEP_COUNTER: // event.values[0] is step count since last reboot of Android device stepCounter = (int) event.values[0]; tvCounter.setText(stepCounter + \"\"); break; &#125;&#125; 这样第三方应用就可以计步了，即使第三方应用进程终止，也可以在应用再次运行时，在 onSensorChanged 方法中得知新的步数。 值得注意的是，系统返回的步数始终是上次重启设备后的总步数。那么第三方应用使用这种方式计步时，会存在一个问题，即应用进程被杀后，如果用户先运动，然后重启设备，然后才打开第三方应用，那么第三方应用会丢失从应用被杀到设备重启之间的步数，而只知道设备重启后新增了多少步数。 经过验证，我的 demo、微信还有 Google Fit 均存在此问题。这说明微信和 Google Fit (或者它依赖的 Google Play Services) 都是通过注册 SensorEventListener 接口来获知步数的。这也说明了微信声明 Body Sensors 权限是冗余的。 那么 Body Sensors 权限到底可以用来做什么？这是一个待填的坑。 对了，网上还有种方式，通过监听手机加速度感应器的事件来自己计步，至于准确性，那就受自己的算法的科学性和复杂性的限制了。方法也是注册 SensorEventListener，不过注册的 type 是 android.hardware.Sensor.TYPE_ACCELEROMETER 而非前面的 TYPE_STEP_COUNTER。更多细节见此帖子。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"不一样的 RelativeLayout measure 过程","slug":"不一样的 RelativeLayout measure 过程","date":"2018-11-02T02:59:59.975Z","updated":"2019-07-05T13:41:07.701Z","comments":true,"path":"2018/11/02/不一样的 RelativeLayout measure 过程/","link":"","permalink":"https://tao93.top/2018/11/02/不一样的 RelativeLayout measure 过程/","excerpt":"","text":"直接用一个简单的例子展示 RelativeLayout 的不一样之处： 图中，左边是一个简单的 Android layout 例子，例子中在外侧是一个最大的 horizontal 的 LinearLayout，它有 3 个 child，分别是左部、分割线和右部。左部和右部非常相似，都是外面一个 ViewGroup 内嵌一个 TextView，且 ViewGroup 的高度都是 wrapContent 而内嵌的 TextView 的高度都是 matchParent. 因为 TextView 背景都是红色，所以从 preview 可以清晰看到，左部的 TextView 等效于 wrapContent，而右部的 TextView 则等效于 matchParent，这就是 RelativeLayout 的不一样。简而言之就是，RelativeLayout 中内嵌的 child tree 的根节点 size 如果是 matchParent，那么此 child tree 测量得到的 size 将会是最大化的，可达到 RelativeLayout size 的上限，而其余常见 ViewGroup 没有此特点，比如 LinearLayout, FrameLayout, ConstraintLayout 等。 究其原因，可以从 RelativeLayout 中的 onMeasure 方法找。 1234567891011@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = views[i]; if (child.getVisibility() != GONE) &#123; final LayoutParams params = (LayoutParams) child.getLayoutParams(); applyVerticalSizeRules(params, myHeight, child.getBaseline()); measureChild(child, params, myWidth, myHeight); ...&#125; 上面是 RelativeLayout#onMeasure 的片段，可知对所有 child 调用了 measureChild 方法，而这是个 RelativeLayout 的 private 方法： 1234567891011121314151617181920212223/** * Measure a child. The child should have left, top, right and bottom information * stored in its LayoutParams. If any of these values is VALUE_NOT_SET it means * that the view can extend up to the corresponding edge. * * @param child Child to measure * @param params LayoutParams associated with child * @param myWidth Width of the the RelativeLayout * @param myHeight Height of the RelativeLayout */private void measureChild(View child, LayoutParams params, int myWidth, int myHeight) &#123; int childWidthMeasureSpec = getChildMeasureSpec(params.mLeft, params.mRight, params.width, params.leftMargin, params.rightMargin, mPaddingLeft, mPaddingRight, myWidth); int childHeightMeasureSpec = getChildMeasureSpec(params.mTop, params.mBottom, params.height, params.topMargin, params.bottomMargin, mPaddingTop, mPaddingBottom, myHeight); child.measure(childWidthMeasureSpec, childHeightMeasureSpec);&#125; 从上述方法看，先获取到 child measureSpec，然后依次为参数来 measure 每个 child。再进入到 RelativeLayout#getChildMeasureSpec 这个方法中看看下面的逻辑： 123456789101112131415161718192021222324252627282930313233343536if (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123; // Constraints fixed both edges, so child must be an exact size. childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY; childSpecSize = Math.max(0, maxAvailable);&#125; else &#123; if (childSize &gt;= 0) &#123; // Child wanted an exact size. Give as much as possible. childSpecMode = MeasureSpec.EXACTLY; if (maxAvailable &gt;= 0) &#123; // We have a maximum size in this dimension. childSpecSize = Math.min(maxAvailable, childSize); &#125; else &#123; // We can grow in this dimension. childSpecSize = childSize; &#125; &#125; else if (childSize == LayoutParams.MATCH_PARENT) &#123; // Child wanted to be as big as possible. Give all available // space. childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY; childSpecSize = Math.max(0, maxAvailable); &#125; else if (childSize == LayoutParams.WRAP_CONTENT) &#123; // Child wants to wrap content. Use AT_MOST to communicate // available space if we know our max size. if (maxAvailable &gt;= 0) &#123; // We have a maximum size in this dimension. childSpecMode = MeasureSpec.AT_MOST; childSpecSize = maxAvailable; &#125; else &#123; // We can grow in this dimension. Child can be as big as it // wants. childSpecMode = MeasureSpec.UNSPECIFIED; childSpecSize = 0; &#125; &#125;&#125; 从上面可以看到，chileSpecMode 赋值为 MeasureSpec.AT_MOST 的地方只有 27 行一个地方，也就是只要 child 声明为 match_parent，那么 child 的 specMode 不出意外就会是 EXACTLY。而 EXACTLY 意味着此 child 为根节点的 view tree 的测量结果将会是此 child 的 specSize，而这个 specSize 显然就是 RelativeLayout 能达到的最大 size (可能需要减去 padding，RelativeLayout 其它 child 占据的空间等)。 顺便再看看 LinearLayout 等等为啥不是这样的，事实上 LinearLayout 等使用的是 ViewGroup 这个抽象基类中的 getChildMeasureSpec 方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123; int specMode = MeasureSpec.getMode(spec); int specSize = MeasureSpec.getSize(spec); int size = Math.max(0, specSize - padding); int resultSize = 0; int resultMode = 0; switch (specMode) &#123; // Parent has imposed an exact size on us case MeasureSpec.EXACTLY: if (childDimension &gt;= 0) &#123; resultSize = childDimension; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123; // Child wants to be our size. So be it. resultSize = size; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123; // Child wants to determine its own size. It can't be // bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; break; // Parent has imposed a maximum size on us case MeasureSpec.AT_MOST: if (childDimension &gt;= 0) &#123; // Child wants a specific size... so be it resultSize = childDimension; resultMode = MeasureSpec.EXACTLY; &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123; // Child wants to be our size, but our size is not fixed. // Constrain child to not be bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123; // Child wants to determine its own size. It can't be // bigger than us. resultSize = size; resultMode = MeasureSpec.AT_MOST; &#125; break; ... //noinspection ResourceType return MeasureSpec.makeMeasureSpec(resultSize, resultMode);&#125; 从上述代码可以看到，如果 child 声明为 matchParent 但是 RelativeLayout 的 specMode 是 AT_MOST 的话，那么 child 的 specMode 如第 35 行所示将会是 AT_MOST，这就是和 RelativeLayout 的不同之处。 总结一下，即使 RelativeLayout 的 specMode 是 AT_MOST，只要它的 child 声明 matchParent，那么 child 的 SpecMode 一般会是 EXACTLY，此 child 为根节点的 viewTree 的测量结果就是最大化的。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"一键设置 Android http proxy 的尝试","slug":"一键设置 Android http proxy 的尝试","date":"2018-11-01T03:04:32.507Z","updated":"2018-11-01T03:04:32.507Z","comments":true,"path":"2018/11/01/一键设置 Android http proxy 的尝试/","link":"","permalink":"https://tao93.top/2018/11/01/一键设置 Android http proxy 的尝试/","excerpt":"","text":"自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&gt; 点击当前 WiFi -&gt; 点击编辑 -&gt; 点击 Advanced options -&gt; proxy 选择 None 或者 Manual -&gt; 上一步如果选了 Manual, 则需要输入 IP 地址和端口号 -&gt; 保存。 这样一个六七步的步骤，真的很让人烦，而如果电脑的局域网 IP 地址不固定的话，就更加让人不爽了，意味着每次电脑重新联网后，手机都需要重新设置代理的 IP。就算电脑 IP 固定，当手机需要使用 Charles 代理或者关闭代理，都比较麻烦。所以很久前我就想有没有方法可以一键设置代理。 我的构想是，如果电脑 IP 地址不固定，那么一键设置需要在电脑上操作，不然无法获知电脑的 IP，当然也可以电脑运行个 socket server，然后手机连接，然后电脑把 IP 发给手机。如果电脑 IP 地址固定，最理想的则是手机上一键设置，这样就不需要 adb 连接了。 经过一番 google 和惨痛的尝试，我得知了两种并不完美的方法。 方法一： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 设置代理信息 exclList是添加不用代理的网址用的 * */ public static void setHttpProxySetting(Context context, String host, int port) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException &#123; WifiManager wifiManager =(WifiManager)context.getSystemService(Context.WIFI_SERVICE); WifiConfiguration config = getCurrentWifiConfiguration(wifiManager); ProxyInfo mInfo = ProxyInfo.buildDirectProxy(host,port); if (config != null)&#123; Class clazz = Class.forName(\"android.net.wifi.WifiConfiguration\"); Class parmars = Class.forName(\"android.net.ProxyInfo\"); Method method = clazz.getMethod(\"setHttpProxy\",parmars); method.invoke(config,mInfo); Object mIpConfiguration = getDeclaredFieldObject(config,\"mIpConfiguration\"); setEnumField(mIpConfiguration, \"STATIC\", \"proxySettings\"); setDeclardFildObject(config,\"mIpConfiguration\", mIpConfiguration); // save the settings wifiManager.updateNetwork(config); wifiManager.disconnect(); wifiManager.reconnect(); &#125; &#125; /** * 取消代理设置 * */ public static void unSetHttpProxy(Context context) throws ClassNotFoundException, InvocationTargetException, IllegalAccessException, NoSuchFieldException, NoSuchMethodException &#123; WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE); WifiConfiguration configuration = getCurrentWifiConfiguration(wifiManager); ProxyInfo mInfo = ProxyInfo.buildDirectProxy(null, 0); if (configuration != null)&#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; configuration.setHttpProxy(mInfo); &#125; else &#123; Class clazz = Class.forName(\"android.net.wifi.WifiConfiguration\"); Class parmars = Class.forName(\"android.net.ProxyInfo\"); Method method = clazz.getMethod(\"setHttpProxy\",parmars); method.invoke(configuration,mInfo); Object mIpConfiguration = getDeclaredFieldObject(configuration,\"mIpConfiguration\"); setEnumField(mIpConfiguration, \"NONE\", \"proxySettings\"); setDeclardFildObject(configuration,\"mIpConfiguration\",mIpConfiguration); &#125; wifiManager.updateNetwork(configuration); wifiManager.disconnect(); wifiManager.reconnect(); &#125; &#125; 上面的方法直接获取到当前连接的 WiFi configuration，然后把它的 http proxy 类型 (枚举变量，主要是 NONE 和 STATIC 两个值)，和值 (即 IP 和 port) 用反射的方法设置进去，然后更新 WiFi configuration，并断开 WiFi 并重新连接 WiFi。以上设置代理和关闭代理的动作，全部由上面的代码一键完成，直接在手机上运行即可，并且代码运行结果和手机 Settings 中的 UI 结果是一致的，感觉相当完美。 然而方法一不支持 API 23 以上的 Android 系统，而所用 API 21 测试是可以完美运行的，在如今 API 28 都发布了的时候，不支持 API 23 以上可以说让实用性大打折扣。不过这是可以理解的，毕竟处于安全考虑，不能让用户的手机随便被第三方 app 默默修改了代理，这太危险了。 方法二： 1adb shell settings put global http_proxy &lt;ip&gt;:&lt;port&gt; 执行以上命令后，Settings 中的 UI 并未更改，但是代理已经生效。这一方法实际是新增了 Settings Provider 中的 key value，有两种方式可以查看到这一新增 key value: 123adb shell settings get global http_proxyadb shell settings get global global_http_proxy_hostadb shell settings get global global_http_proxy_port 123String httpProxy = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.HTTP_PROXY);String httpProxyHost = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST);String httpProxyPort = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT); Android 不运行第三方应用新增这样的属性值，而只有 read 的权限，所以需要 adb 来新增这些属性值，除了这个缺点，还有更致命的缺陷。方法二的 reset proxy 的方法是： 123456adb shell settings delete global http_proxyadb shell settings delete global global_http_proxy_hostadb shell settings delete global global_http_proxy_port# 是的，目前我已知的方法，只有重启才能让上述 delete 生效，当然手动重启都可以。adb reboot 要 reset proxy，删除 key value 和重启 (目前我只知道重启可以) 缺一不可，否则设备只能通过 proxy 使用 http。也就是连别的 wifi 或者使用数据流量都不能使用 http！要想不重启，除非在将 key value 设置为另一个有效的 proxy 配置，这个缺陷可以说非常致命了。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"ShadowSocks for Gradle & Shell","slug":"注意下面的端口号不一定是 1086","date":"2018-10-18T07:11:58.403Z","updated":"2019-07-05T13:42:50.708Z","comments":true,"path":"2018/10/18/注意下面的端口号不一定是 1086/","link":"","permalink":"https://tao93.top/2018/10/18/注意下面的端口号不一定是 1086/","excerpt":"","text":"ShadowSocks 是个很好的工具，它自带 PAC 模式和全局模式。 不过这个全局模式并不能完全让整台电脑的所有网络访问全部通过代理进行，比如终端命令就不可以。我打开全局代理后，然后在终端执行 curl ip.cn 命令，结果显示检查到的 IP 地址依然是本机真实的公网 IP: 12➜ ~ curl ip.cn当前 IP：122.225.224.218 来自：浙江省杭州市 电信 要让 shell 也使用代理，可以执行一下命令来设置代理： 12# 注意下面的端口号不一定是 1086export ALL_PROXY=socks5://127.0.0.1:1086 上面我使用的端口号是 1086，这是因为我的 ShadowSocks 客户端的偏好设置中如下所示的设置项是 1086: 但是每次都执行上面的 export 命令很麻烦，那么可以在 shell 的配置文件中设置 alias： 12345# enable proxyalias proxy=\"export ALL_PROXY=socks5://127.0.0.1:1086\"# disable proxyalias unproxy=\"unset ALL_PROXY\" 前两天我发现在家的时候，Android Studio 无法访问 Google 的 maven 仓库，即使我开全局代理也不行，即使我在 terminal 中按前面方法设置 proxy 并且使用 gradle 命令来构建也不行。 为此，我找到了向 gradle 设置 proxy 的方法，那就是在项目的 local.properties 文件（之所以选这个文件是因为这个文件一般是不纳入 git 管理的，所以我可以随便自定义地修改）加入下面的设置，即可让 gradle 使用代理： 1org.gradle.jvmargs=-Xmx4536m -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1086 上面的端口号和前面的方法中是一致的。","categories":[],"tags":[{"name":"ShadowSocks","slug":"ShadowSocks","permalink":"https://tao93.top/tags/ShadowSocks/"}]},{"title":"Don't let Your App Drain your Users' Battery","slug":"Don't let Your App Drain your Users' Battery","date":"2018-10-10T08:52:40.506Z","updated":"2019-07-05T13:37:38.427Z","comments":true,"path":"2018/10/10/Don't let Your App Drain your Users' Battery/","link":"","permalink":"https://tao93.top/2018/10/10/Don't let Your App Drain your Users' Battery/","excerpt":"","text":"What drives battery Life? Hardware (Screen etc.) Operating System Apps &amp; Services User Interaction Efforts to improve battery Job Scheduler (Since API 21) Doze &amp; App Standby(Since API 23) Doze on-the-go (Since API 24) Background Limits (Since API 26) Adaptive Battery, Background Restrictions etc. (Since API 28) Among the above only Job Scheduler could be directly leveraged by app developers in the code. Job Scheduler (Since API 21)Job Scheduler is suitable when we want to do something in a specified circumstance, such as: Batterry is not Low With specified Netwoek Status Is Charging Storage is not Low Device is Idle Without Job Scheduler, we may need to keep a service running to monitor specified system broadcast and then do what we want, which is not optimized for battery comparing to Job Scheduler. Here is a simple example of Job Scheduler: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class MyJobService extends JobService &#123; @Override public boolean onStartJob(final JobParameters params) &#123; new AsyncTask&lt;Void, Void, Void&gt;() &#123; @Override protected Void doInBackground(Void... voids) &#123; // stuffs that consumes a lot of time like making a backup to the cloud return null; &#125; @Override protected void onPostExecute(Void aVoid) &#123; // tell scheduler our job is done jobFinished(params, false); &#125; &#125;.execute(); // return true to tell scheduler our job is not finished. return true; &#125; @Override public boolean onStopJob(JobParameters params) &#123; return false; &#125;&#125;public class MainActivity extends Activity &#123; private static int sJobId = 0; private JobScheduler mJobScheduler; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mJobScheduler = (JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE); findViewById(R.id.schedule_btn).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; scheduleAJob(); &#125; &#125;); &#125; public void scheduleAJob() &#123; for (JobInfo info : mJobScheduler.getAllPendingJobs()) &#123; if (info.getId() == sJobId) &#123; // the last scheduled job is not finished yet return; &#125; &#125; // build the jobInfo that requires charging, idle and network that won't charge. JobInfo jobInfo = new JobInfo.Builder(++ sJobId, new ComponentName(this, MyJobService.class)) .setRequiresCharging(true) .setRequiresDeviceIdle(true) .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED) .build(); mJobScheduler.schedule(jobInfo); &#125;&#125; Doze (Since API 23)Unplugged and stationary for a period of time, a device would be in doze mode, which restricts all apps regardless whether they targets api 23. However, the OS periodically exits Doze for a brief time to let apps complete their deferred jobs. The bried time slot is called Maintenance window. Below is a figure showing the mode changing: In doze mode, the following are restricted: Network access is suspended WakeLock is ignored Standard AlarmManager alarms (setExact() and setWindow()) are deferred to the next maintenance window No Wi-Fi scaning No Sync Adapters No JobScheduler jobs Stuffs not restricted by Doze: FCM high priority msg Alarms set with setAndAllowWhileIdle() and setExactAndAllowWhileIdle() Testing Doze: 123456789# if your device is connected with a cable, use the following to disable chargingadb shell dumpsys battery unplug# Force the system into Doze modeadb shell dumpsys deviceidle force-idle# exit idle mode &amp; reactivate the deviceadb shell dumpsys deviceidle unforceadb shell dumpsys battery reset # this also recovers charging App Standby (Since API 23)An app is idle if the followings are satisfies: No user touching for a certain period of time No processes in the foreground (either as an activity or foreground service) No notifications showing on the lock screen or in the notification center. Not charging Testing App Standby: 1234567891011# if your device is connected with a cable, use the following to disable chargingadb shell dumpsys battery unplug# check whether your app is in standby mode. A 'Idle=false' output means not in standby modeadb shell am get-inactive &lt;packageName&gt;# Force the app into App Standby modeadb shell am set-inactive &lt;packageName&gt; true# exit Standby mode for your appadb shell am set-inactive &lt;packageName&gt; false Doze on-the-go (Since API 24)A lighter Doze mode which activates when the phone is moving in our pockets or hands. Doze on-the-go allows WakeLock, Wifi Scaning and GPS etc, that’s why it’s lighter than former Doze mode introduced in API 23. Ignore Doze configuration: Background Limits (Since API 26)Background Limits affects apps that targets API 26 or higher and includes Background Service Limitations and Broadcast Limitations. Background Service LimitationsFor an app that targets API 26 or higher, it’s in background if: No visible Activity No foreground Service Not InputMethod Service, Wallpaper service etc. After several minutes of being in background, background services are stopped by the OS. Replacing background services with Scheduler Jobs is fine in many cases. Broadcast Limitations (Introduced in API 25 and strengthened in API 26)For an app that targets API 26 or higher, it: can’t register receivers for implicit broadcasts in Manifest file can register receivers for explicit broadcasts in Manifest file can register receivers for any broadcasts runtimely Broadcasts that require a signature permission are exempted from this restriction. In some cases, registering system broadcasts could be replaced by Scheduler Jobs, such as if we want to do something when the device is charging. Adaptive Battery (Since API 29)A new feature based on Machine Learning. Limit battery for apps that are not used often. Apps should be able to run quickly when they are needed. Don’t bother users to manage manually. Apps are arranged into 4 standby buckets: Active, Working set, Frequent and Rare. Limits are increased from Active to Rare: An app is in Active if it: has launched an activity is running a foreground service has a sync adapter associated with a content provider used by a foreground app has a notification clicked by the user An app is in Working set if it runs often but isn’t active. An app is in Frequent if it is used regularly, but not necessarily every day. An app is in Rare if it is not often used. Find out what bucket the app is currently in programmatically: 1UsageStatsManager.getAppStandbyBucket() Test Standby Buckets: 123456# assgin your app into a specified bucketadb shell am set-standby-bucket &lt;packagename&gt; active|working_set|frequent|rare# check bucket assignments for one app or all apps# the output '10 20 30 40' mean Active, Working set, Frequent, Rare respectivelyadb shell am get-standby-bucket [&lt;packagename&gt;] Battery SaverNew battery saver in API 29: No red status bar and has animation Location service is off when screen is off Battery level threshold is adjustable Apps are encouraged to switch to dark theme when battery saver is on. Check whether battery saver is on programmatically: 1((PowerManager)getSystemService(Context.POWER_SERVICE)).isPowerSaveMode() Test battery saver: 12345# pretend to be in low battery statusadb shell settings put global low_power 1# reset all configurationsadb shell dumpsys battery reset Background Restrictions (Since API 29)Two criterias: Apps targeting pre-Oreo and using background services Excessive WakeLocks (&gt; 1hr in background) Background restrictions are decided by the users: When Background Restrictions is enabled for an app, fllowings are restricted: Background jobs, alarms, services and network accessing Location related updates Foreground services Except GUI operation, Background restrictions could alse be finished via adb: 12345# enable background restrictionsadb shell appops set &lt;package_name&gt; RUN_ANY_IN_BACKGROUND ignore# disable background restrictionsadb shell appops set &lt;package_name&gt; RUN_ANY_IN_BACKGROUND allow","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"通过 wifi 连接 adb","slug":"通过 wifi 连接 adb","date":"2018-09-26T07:47:46.693Z","updated":"2018-09-26T07:47:46.694Z","comments":true,"path":"2018/09/26/通过 wifi 连接 adb/","link":"","permalink":"https://tao93.top/2018/09/26/通过 wifi 连接 adb/","excerpt":"","text":"Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 类型的 native 库，并且也还会有一些其他局限性。 其实，真机也是可以用局域网无线连接的，只需要电脑和 Android 设备在同一个局域网内。大致步骤就是下面几条命令： 12345678910# 先用数据线连接，确保 adb devices 可以看到设备# 让 adb server 重新以 tcp 模式启动，端口指定为 5555adb tcpip 5555# 电脑和手机之间建立无线连接adb connect &lt;IP address of your Computer&gt;# 拔掉数据线，此时再检查一遍是否无线连接成功adb devices 每次都想上面这样执行两三条命令显然太繁杂，尤其是其中还有一步要替换为电脑的当前内网 IP，所以应该写一个脚本来把上面的东西一键搞定： 1234567891011121314151617181920212223#!/usr/bin/env bash# 先断开一下adb disconnectadb tcpip 5555# sleep 两秒，不然的话因为刚执行 adb tcpip 5555 那么后续的命令会找不到 devicessleep 2# 检查是否安装了黑域adb shell pm list packages | grep 'me\\.piebridge\\.brevent'has_brevent=$?if [ $has_brevent -eq 0 ]; then # 重新启动黑阈 adb -d shell sh /data/data/me.piebridge.brevent/brevent.shfi# 获取 android 设备的 IP 地址android_ip=`adb shell \"ifconfig\" | grep 'inet.*cast' | awk '&#123;print $2&#125;' | awk -F':' '&#123;print $2&#125;'`echo 'Android device IP: ' $android_ipadb connect $android_ip 上面的脚本中，会检查是否安装了黑阈，如果安装了，就会重新启动黑阈。黑阈是一款管理 Android 应用运行状态的应用，用来限制应用唤醒和常驻后台。Android 8.0 以上的系统，只要 USB 调试选项发生变更，黑阈就会停止起作用，所以此处需要重新让它运行起来。另外上面的脚本中还通过 ifconfig 命令来获取到电脑的内网 IP，用于执行 adb connect 命令。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"},{"name":"adb","slug":"adb","permalink":"https://tao93.top/tags/adb/"}]},{"title":"记一次混淆问题导致的 bug","slug":"记一次混淆问题导致的 bug","date":"2018-09-26T07:47:46.691Z","updated":"2019-07-05T13:43:40.458Z","comments":true,"path":"2018/09/26/记一次混淆问题导致的 bug/","link":"","permalink":"https://tao93.top/2018/09/26/记一次混淆问题导致的 bug/","excerpt":"","text":"最近把 Card.IO 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用了几个 so 库。只不过没有提供 armeabi 类型的 so 库，而只有 armeabi-v7a 和 armeabi-v8a 之类的 so 库。所以初次提供给公司项目使用时，出现了找不到 so 的错误，也就是 UnsatisfiedLinkError 错误。也就是下面这样的提示： 后面我想尽办法提供了 armeabi 类型的 so 库，这个问题就算告一段落了，然后这还不是结束。今天，测试又发了一段崩溃日志，也就是下面这样的日志： 因为之前出现过找不到 so 库的问题，所以乍一看上面的日志，我们都以为又是找不到 so 库 (为我们的菜表示羞愧 🤩)。然后经过上网查找，并和 native 的代码对比，我才意识到，上面的日志其实是 so 库是找到了的，只不过是加载 so 库时，调用 JNI_onLoad 这个 native 方法时出错了。此外，向测试要了 debug 包，发现没有问题，所以初步断定是混淆的问题，然后就是排查了。 我把测试提供给我的 release 包反编译，然后和 JNI_onLoad 方法中的 native 代码对比，终于找到原因了：release 包中，我提供的库的某个方法被混淆掉了，但是这个方法是需要被 JNI_onLoad 方法调用的。所以问题就是：一个需要被 so 库调用的 Java 方法被混淆了！其实，很多时候我们的项目引入一些著名的第三方包 (比如 Knife 之类的) 时，都会在我们的项目的 Proguard 配置文件中声明不要混淆这些三方包的代码，为的就是避免上面这个问题。说一句显得有点废话的话：第三方包发布混淆包时，他们的 Proguard 配置文件只能在他们的 aar 包构建时生效，而在他们的 aar 构建到我们的项目中时，他们的 Proguard 早已鞭长莫及不起作用了。 回到我遇到的这个问题，我们本地自测时，很少会进行混淆，本地的 release 默认都是未混淆的 (minifyEnabled 是 false)，所以自测的时候根本没有注意到这个问题。这次这个 bug 的解决办法之一是，在最终使用我的 aar 的项目中，显示声明不要混淆我这个 aar 中的某些代码，这就和上一段说的声明不混淆第三方包的代码是一样的。But，还有一种更好的方法，那就是使用 com.android.support.support-annotations 支持库中的 @Keep 注解，此注解可以标记哪些方法或者类在最终构建 apk 时不会被混淆掉 (当然在前面的 aar 构建等过程自然也不会混淆)。 总结一下，当前项目的 Proguard 配置文件只能在当前项目构建输出产物时起作用，而无法确保输出的产物交给其他项目集成时不被混淆。若要确保后者，那就可以用 support-annotations 支持库中的注解了。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"记一个简单的递归问题与解法","slug":"记一个简单的递归问题与解法","date":"2018-09-26T07:47:46.682Z","updated":"2019-07-05T13:43:30.819Z","comments":true,"path":"2018/09/26/记一个简单的递归问题与解法/","link":"","permalink":"https://tao93.top/2018/09/26/记一个简单的递归问题与解法/","excerpt":"","text":"递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。 前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的： 这个问题很明显是个递归问题。我当时就夸下海口说，10分钟给你写个 Python 脚本。虽然实际上用了接近 30 分钟。。。 言归正传，这个问题的递归关系包含两种，嵌套关系和并列关系。比如 2[a]3[c] 最外层是并列关系，即 2[a] 和 3[c] 是两个互相并列的子问题，他们的解答串起来就是 2[a]3[c] 的解答。而 2[2[a]] 最外层则是一个嵌套关系，即要求 2[2[a]] 的解答需要先求子问题 2[a] 的解答 (这个解答显示就是 aa)，所以问题化解为 2[aa]。 所以思路就是，对于一个问题 X，先按并列关系划分为若干个子问题 X1, X2, …, Xn；如果 n 大于 1，那么各个子问题的答案串起来就是答案了；如果 n 等于 1，那么说明 X 最外层并不是并列关系而是嵌套关系或者根本就是单个字母，如果 X 是单个字母，那么答案就是它本身，反之，那么 X 一定是 s[Y] 的形式，答案就是 s 个 Y 的答案串起来。 12345678910111213141516171819202122232425262728293031323334353637def p_loc(input, left): count = 1 i = left while count &gt; 0: i += 1 if input[i] == ']': count -= 1 elif input[i] == '[': count += 1 return idef do(input): if '[' not in input: return input first = input.find('[') i = p_loc(input, first) if i &lt; len(input) -1: parts = [] while i &lt; len(input) -1: parts.append(input[:i+1]) input = input[i+1:] first = input.find('[') i = p_loc(input, first) parts.append(input[:i+1]) res = '' for part in parts: res += do(part) return res else: right = p_loc(input, first) sub_res = do(input[first+1:right]) return int(input[:first]) * sub_res print(do('2[a]3[c]'))print(do('2[2[a]]'))print(do('2[2[a]]3[c]'))","categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://tao93.top/tags/Algorithm/"}]},{"title":"日常修 Bug","slug":"日常修 Bug","date":"2018-09-26T07:47:46.680Z","updated":"2019-07-05T13:42:40.987Z","comments":true,"path":"2018/09/26/日常修 Bug/","link":"","permalink":"https://tao93.top/2018/09/26/日常修 Bug/","excerpt":"","text":"前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。 鉴于报告人没提具体的版本号，也没提怎么出现的，也没提是什么机型出现的，我就和报告人说沟通了一番。报告人说应该是小米 6 出现这个问题，我遂借了一部小米 6，然后运行 demo 并没有复现。现在就有两种可能，第一是只有报告人那台小米 6 有问题，第二是 demo 没问题但是集成到巴西版本后就有问题了。经过艰苦交涉，终于从对方那里要到了一个安装包后，我手里手机复现了此问题，事实很快就清楚了：demo 没问题但是集成后有问题，也就是和机型压根没关系。 先直接给出最后修复的方法，修复方法是在我的扫卡库的 activity 中，调用以下一行就 OK 了： 12// 给 PhoneWindow 设置一个背景 getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT)); 嗯，修复方法很简单，但是为什么这样做就 work 了呢？接下来就是调试的过程了. 首先获取一下这个界面的 layout 信息，尝试看看右侧白色细线是不是额外塞进去的视图，结果并不是。然后我再看是否是设置了什么 padding 导致了这个问题。事实上，正式这样的，可惜我可能是瞎了眼，居然没有看到下面的线索，即 DecorView 的右侧 padding 是 2： 我只看到了下面的 LinearLayout 的宽度是1438，比我的手机屏幕宽度1440少了2个像素，显然就是右侧的白线了。 所以我怎么办呢，我开始调试 measure 和 layout 的过程。因为 DecorView 的宽度是 1440 没错，可是它的 Child LinearLayout 宽度只有 1438，所以我先条件断点在 LinearLayout 类中的 onMeasure 方法。断点的条件我本来想写 getParent() instance DecorView，结果发现无法应用 DecorView，于是我就改成了 getParent() != null &amp;&amp; getParent().getParent() == null，其实这是不对的，DecorView 同样有 Parent，也就是 ViewRootImpl 对象，我把这个给忘了。所以断点条件就成了下面这样臃肿的了： 123getParent() != null &amp;&amp; getParent().getParent() != null &amp;&amp; getParent().getParent().getParent() == null // 当然其实还有更简洁的方式，比如下面这样 getClass().getName.endswith(\"DecorView\") 然后发现不管是 measure 还是 layout 的过程，LinearLayout 宽度始终就是 1438，DecorView 就只给它留了这个大空间。然后我开始调试到 DecorView 的测量过程中，最后发现在 ViewGroup (这里仅仅是由于 DecorView 是继承自 ViewGroup 的) 的 measureChildWithMargins 方法中，找到了关键线索： 也就是上面的 mPaddingRight 的值居然是 2 而不是 0，这意味着 DecorView 的右侧 padding 是2，这样就能解释通为啥 DecorView 的 child 宽度小了 2 了。这是我赶紧回去看 layout 信息，然后就发现了我本来早就该发现的线索了。 OK，接下来是要知道，谁把 DecorView 的右侧 padding 加了 2 的。我对 View 类的 mPaddingRight 属性加了下图所示的断点： 果然，不一会儿，我就有了收获，得到了下面的堆栈： 上面堆栈清晰了展示了右侧 padding 是怎么被设置为 2 的，概括来说，就是 PhoneWindow 在准备 DecorView 时，检查到有一个 Drawable，然后在设置这个 Drawable 时，去设置了 padding。那么为什么设置 Drawable 需要设置 padding 呢？看下图就明白了： 原来，这是个自带 padding 的 NinePatchDrawable。接下来，我就查找了一下，发现这个 drawable 就是 PhoneWindow 中的 mBackgroundsource 属性解析而来。这个属性是从应用主题中指定的。现在回到前面我提前贴出的解决方法之一： 1getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT)) 上面的代码调用 PhoneWindow 的 setBackgroundDrawable 方法，这个调用除了设置 bg drawable 外，还直接让 mBackgroundsource 变为 0，所以后面就轮不到那个 NinePatchDrawable 了。 其实，上面的解决方法还是有点突兀，另一种方法是，在扫卡的库中设置一个主题，这样的话，就不会应用巴西版本乘客端项目中声明的主题了，自然也就不会把那个 NinePatchDrawable 设置进来。 再说点别的。这个扫卡的库，被集成到另一个库中，然后另一个库再集成到巴西版本中。中间这个库，我是没有涉足的。所以为么验证我有没有修复成功，我只能在最终的项目中再引用一下我的库经过改动后的版本，当然版本号也要增加一下。这样的话，就可以新的覆盖旧的，把中间那个库对扫卡库的引用给覆盖的。唉，真是折腾。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"提高开发效率的各种工具","slug":"提高开发效率的各种工具","date":"2018-09-26T07:47:46.677Z","updated":"2019-07-05T13:42:31.404Z","comments":true,"path":"2018/09/26/提高开发效率的各种工具/","link":"","permalink":"https://tao93.top/2018/09/26/提高开发效率的各种工具/","excerpt":"","text":"俗话说，工欲善其事必先利其器。好用的开发工具，虽然不会直接改善我们写的代码，但是对于效率的提高和提高舒适度还是很有帮助的。本文意在提供一些不是非常普遍使用，但是对于效率提升可能非常有用的工具。话不多说，开始正文！ 剪贴板工具 —— Clipy剪贴板工具实在太实用了，不过似乎大部分程序员都没有用上剪贴板工具。而 Clipy 是一款很合适的剪贴板工具，以至于我想起它时，直接将它插到最前面，并且序号编为 0。Clipy 是一个开源的剪贴板工具，简洁不闹心，复制的图片和文本都可以管理，用起来很爽。 oh-my-zsh这是个终端加强工具，macOS 和 Linux 都可用，把默认 shell 从 bash 改为 zsh，然后再加强一下。我只用的 oh-my-zsh 的 3 个 features，但这 3 个都是很有吸引力的。 第一、自带识别 git 项目目录的功能，直接显示分支名、有无未提交的本地修改； 第二、cd 时，直接不停的按 tab，指导选中了你想要的目录，然后回车，就可以进入想进入的目标，减少输入目录名前几个字母的劳累。 第三、这是个 killer feature，在终端输入任何几个字符，按向上的箭头，就可列出以这些字符开头的所有历史命令，这样很多需重复使用的命令、很久忽然想起需要再次使用的命令的使用方便了非常多，比如忽然想起 10 天前，使用 sed 命令搞了个事情，但是 sed 命令你懂的，压根记不住用法，怎么办？直接终端输入 sed 然后按向上箭头，立马调出 sed 开头的历史命令。 local Maven 仓库自打谷歌一手将 Android 的构建工具切换到 Gradle 后，远程依赖变为用由 Gradle 配置从 Maven 仓库获取依赖。而除了 Jcenter、mavenCentral、Google 这样最常见 3 个公开 Maven 仓库外，现在很多公司内部会开发一些 SDK 或者工具包之类的，然后作为依赖放在公司内部的私有 Maven 仓库中，提供给公司内部使用。 问题来了，对于普通的开发者来说，有时候需要修改某个依赖的源代码并加以验证，但是又不想把修改后的代码马上就构建一个新版本的依赖传输到公司的 Maven 仓库。毕竟，天晓得自己要改多少次，如果一直往公司 Maven 仓库推，被别人看到了好像会感觉自己很菜的样子 ?。这时候，如果有一个本地的 Maven 仓库，那先传到本地 Maven 仓库，然后再从本地仓库获取依赖，就可以避免这个问题了，特别是对于一些文件比较大的依赖，这样速度也会更快。 这里说的 local Maven 仓库，不是 Gradle 中使用 mavenLocal() 来声明的那个仓库 (通常位于 ~/.m2/repository) 中，而是指自己在个人电脑上搭建一个 Maven 仓库，就和远程仓库一样，只不过域名使用 localhost 来访问即可。 方法其实比较简单，比如使用 Nexus OSS Maven 的话，在 macOS 系统上简直不要太容易，直接 brew install nexus，然后再 nexus start 就 OK了，此时在浏览器上面打开 http://localhost:8081/nexus 就可以开始登录了，初始用户名和密码分别是 admin 和 admin123，登录之后，里面已经有了一些 repository 了，如下图所示： 我常用的就是上面 Snapshots 这个 repository，专门用来托管 SNAPSHOT 类型的依赖，关于 SNAPSHOT 类型的依赖，我会写一篇更全面详细的文章来讲怎么使用。 OK，现在就可以在向本地的 Maven 仓库传依赖包并拉取使用了。其实，局域网内其他同事也是可以访问这个 Maven 仓库的，比如 http://localhost:8081/nexus/content/repositories/snapshots/ 这个仓库，别的同事要访问我这个 snapshot 仓库的话，只需要他把 localhost 换成我的私有 IP 地址即可。 Python为什么把 Python 列出来呢？因为其实 Python 入门是非常简单的，再加上这年头，不了解一下 Python 都不好意思说自己是程序员。而入门后，可以帮我们做点事情，比如下图中，表达式计算，进制转换: 其实 Python 可以做的事很多，通过引入 Python 自带的包或者第三方库的包，Python 几乎无所不能。举个例子，去年微信跳一跳小游戏刚出来时，我看这个游戏非常简单，我就想，能不能用 Python 做个自动化脚本来跳呢？当然可以！其实原理也很简单，对于每一跳，可以分为若干步：截图、分析图片得出需要跳跃的距离、根据距离来模拟一个长按事件。这样的三个步骤对于 Android 设备是很容易实现的。所以思路就是，使用 Python 调用 adb 工具来截图、pull 截图到电脑中；然后使用 Python 的照片处理库来分析照片的像素，找到跳的那个东西的位置和下一个方块的位置，这样就知道需要跳跃的距离了；调用 adb 模拟一个长按屏幕的事件，长按的时间和需要跳跃的距离成正比，至于这个比值系数，摸索几次测试一下就可以了。详见我的博客 Python 也能玩跳一跳小游戏。 我改进过的 JD-GUI恬不知耻的推荐一下我更改过的 JD-GUI。JD-GUI 本来是一个开源项目，但是已经3年没有维护了。两年前，当时因为工作需要，我要频繁的解压 apk，把 dex 文件转成 jar，然后再用 JD-GUI 反编译查看代码注入效果，所以我就想，这么三个步骤能不能一步搞定。于是经过一个周末的努力，我小改了一下 JD-GUI，使其支持直接拖入 apk 文件，然后自动解压，自动调用 apktool 来将 dex 转成 jar 文件，然后再交给原 JD-GUI 反编译。PS：我非常贴心的提供了 macOS、Windows、Linux 三个平台的 binary 包。 the Unarchiver for macOSmacOS 自带的解压工具比较弱鸡，比如 jar 文件无法解压，一些别的压缩包解压时也会出幺蛾子。而这款 the Unarchiver for macOS 体积不大，简洁却可以应付几乎所有的解压场景，还能提供选择 charset 的机会，从而解压某些压缩包时避免文件名乱码。 USTC Mirror在此推荐一下中国科大开源镜像，这份镜像可以使得在国内访问很多开源软件的速度飞起来。 比如给 pip 设置代理，可以让 pip 下载 Python 扩展包的速度快得飞起。 再比如使用中国科大的 AOSP 镜像，获取 AOSP 项目的源码 (几十 GB 大小) 的速度将要加快很多，如果不使用代理，那么从 Google 官方同步 AOSP 代码，其难度你懂的。 再再比如，非常流行的 Homebrew，是 macOS 平台上使用命令行管理软件包及它们的依赖关系的工具，好比是 Linux 的包管理系统。此外 Homebrew 使用 cask tap 甚至还可以安装 Sublime text，Chrome 等许多的 GUI 软件，并自动建立软链接链接到 GUI 的软件的可执行文件，比如 Sublime text，使用 Homebrew 安装后，就可以在命令行使用 subl 即可打开 Sublime text 了。扯远了，Homebrew 同样存在在国内下载软件速度慢的问题，而同样，中国科大镜像提供了 Homebrew 镜像，能让绝大部分包的下载速度快起来。 最后，先对 USTC Mirror 的维护者表示感谢。然后，我想说这个镜像的内容非常多，绝大部分我也不了解，也就是还有很多可以深入探索的东西。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"常用的 Bash 命令总结","slug":"常用的 Bash 命令总结","date":"2018-09-26T07:47:46.676Z","updated":"2018-09-26T07:47:46.677Z","comments":true,"path":"2018/09/26/常用的 Bash 命令总结/","link":"","permalink":"https://tao93.top/2018/09/26/常用的 Bash 命令总结/","excerpt":"","text":"这篇记录是我看 The Linux Command Line 后为了总结而写的，目的是便于自己随时查阅。The Linux Command Line 是我相当喜欢的一本电子书，它是一本值得一页一页看下去的书。 cp 12345678# 仅复制目标目录不存在或者存在但是更旧的的项。 cp -u # 如果 file2 已经存在, file2 的内容会被 file1 的内容重写。如果 file2 不存在，则会创建它。 cp file1 file2 # 如果目录 dir2 不存在，创建目录 dir2，操作完成后，目录 dir2 中的内容和 dir1 中的一样。如果目录 dir2 存在，则目录 dir1 和其中的内容将会被复制到 dir2 中。 cp -r dir1 dir2 mv 12345# 仅移动目标目录不存在或者存在但是更旧的的项。 mv -u # 如果目录 dir2 不存在，创建目录 dir2，并且移动目录 dir1 的内容到目录 dir2 中，同时删除目录 dir1。如果目录 dir2 存在，移动目录 dir1( 它的内容)到目录 dir2 中。 mv dir1 dir2 rm 1# 警惕不小心写出 rm * .html 这样的命令，这会删除当前目录的所有文件。 命令的4中形式 executable file, 可以是二进制的，也可以是文本形式的脚本； builtins, 即 /bin 下面的 [, echo, kill, pwd, test 和 /usr/bin 下面的 alias, bg, cd, command, false, fc, fg, getopts, hash, jobs, printf, read, true, type, ulimit, umask, unalias, wait, which； shell 函数 alias 定义的别名 type type是一个极其有用的命令，能立马找到当前环境能用的命令是源自哪里，是什么类型的。示例： ➜ ~ type Python3Python3 is /Users/didi/.bin/Python3➜ ~ ls -l /Users/didi/.bin/Python3lrwxr-xr-x 1 didi staff 22 4 25 10:06 /Users/didi/.bin/Python3 -&gt; /usr/local/bin/python3➜ ~ type [[ is a shell builtin➜ ~ type lsls is an alias for ls -G where where命令的有用之处是它可以列出所有出现的地方，比如电脑里面有两个 git 可执行文件，那么 where git 可以把它们统统列出来。 man 手册的章节含义 用户命令 程序接口内核系统调用 库函数程序接口 特殊文件，比如说设备结点和驱动程序 文件格式 游戏娱乐，如屏幕保护程序 其他方面 系统管理员命令 &gt; file_name 巧妙的使用重定向，可以将文本文件的内容清空，也可以新建一个空文件。 重定向的常见用法 1234567891011# 覆盖型重定向 stdout，可以省略那个 1 ls ~ 1&gt; out.txt # 追加性重定向 stdout，可以省略那个 1 ls ~ 1&gt;&gt; out.txt # 覆盖型重定向 stderr ls ~ 2&gt; out.txt # 追加性重定向 stdout ls ~ 2&gt;&gt; out.txt /dev/null 随意放东西进去的垃圾箱 花括号展开 echo Front-{A..D}–Back 将会输出四项内容，即 {A..D} 表示从 A 到 D 一共四个情况。 将命令执行结果展开 12# 只需要把命令放在 $() 里面即可，旧版 shell 也使用把命令放在 `` 中间的方式 echo $(ls) 引号 1234# 双引号中，参数展开，算术表达式展开，和命令替换仍然有效，比如 echo \"$USER $((2+2)) $(cal)\" # 单引号中，所有展开都无效 命令行移动光标 ctrl a # 移动到行首 ctrl e # 移动到行末 alt &lt;- # 左移一个 word alt -&gt; # 右移一个 word ctrl u # 剪切整行内容 ctrl k # 剪切光标后面的内容 ctrl y # 粘贴 管理进程 123456789101112131415161718192021222324# 列出终端相关进程ps # 列出所有进程ps x # 列出所有进程的详细信息ps aux # 显示从终端启动的后台进程jobs # 让指定序号的从终端启动的进程返回到前台fg %JOB_SPEC # 让指定序号的从终端启动的进程返回到后台bg %JOB_SPEC # 给进程发送信号，最常见的信号是：kill -SIG_NUM PID 1 HUP 挂起 2 INT 中断，和 ctrl c 的作用一样 9 KILL 杀死，这个信号并不会发给进程号是 PID 的进程，而是立即强制停止此进程，被杀进程就没有机会保存数据 15 TERM kill 命令的默认信号，终止进程，被中止的进程有机会保存数据","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://tao93.top/tags/Linux/"},{"name":"Bash","slug":"Bash","permalink":"https://tao93.top/tags/Bash/"}]},{"title":"博客系统迁移记录","slug":"博客系统迁移记录","date":"2018-09-26T07:47:46.674Z","updated":"2019-07-05T13:41:51.845Z","comments":true,"path":"2018/09/26/博客系统迁移记录/","link":"","permalink":"https://tao93.top/2018/09/26/博客系统迁移记录/","excerpt":"","text":"此前我用的是 Z-blog 系统，这个系统上手简单，不过仅支持在网页在线编写文章。这种方式弊端是比较死板，如果将来需要把文章移动到别的地方会很麻烦，而如果是用 MarkDown 来写文章就不会有这个麻烦了。本文就详细记录这次博客系统迁移的细节，包含 Linux 系统配置、Nginx 的配置、hexo 的配置和 deploy 脚本等内容。 首先是，这次又把 VPS 的 Server 硬盘重置了，每次重置后都需要重新设置配置一遍 Linux 系统（我的 VPS 是 Ubuntu 16.04），所以这次记录一下配置的过程，也就是各种配置命令： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586adduser liutao # add user, with root userusermod -aG sudo liutao # add sudo permission, with root usersu - liutao # switch to user liutao# update repository infosudo apt-get updatesudo apt-get upgrade# configure shadowsockssudo apt install python-pipsudo pip install shadowsockssudo mkdir /etc/shadowsocks# create config filesudo vim /etc/shadowsocks/ss.json&#123; \"server\":\"0.0.0.0\", \"server_port\":22222, \"local_port\":1080, \"password\":\"your pass word\", \"timeout\":1000, \"method\":\"aes-256-cfb\"&#125;# add service configuration info,.sudo vim /etc/systemd/system/shadowsocks.service[Unit]Description=Shadowsocks ServerAfter=network.target[Service]ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/ss.jsonRestart=on-abort[Install]WantedBy=multi-user.target# start shadowsocks servicesudo systemctl start shadowsocks# start shadowsocks on startupsudo systemctl enable shadowsocks# install linuxbrewsh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"# install zshsudo apt-get install zsh# install oh my zsh, this dependends on zshsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"vim .zshrc# install Nginx, MySQL, Phpwget http://soft.vpser.net/lnmp/lnmp1.5-full.tar.gzgunzip lnmp1.5-full.tar.gztar xf lnmp1.5-full.tarcd lnmp1.5-fullsudo ./install.sh lnmp# install word-presswget https://wordpress.org/latest.zipunzip latest.zip -d wordpress# set root to be/home/liutao/wordpresssudo vim /usr/local/nginx/conf/nginx.confsudo nginx -s reload# 然后本地浏览器打开 https://tao93.top/ 开始设置 WordPress# create database named wordpressmysql -u root -p&gt; create database wordpress# 然后在浏览器中填入刚刚的 database 名字，及其他信息# 在 server 中的 WordPress 根目录中创建 wp-config.php 并填入浏览器页面显示的内容# 找到 nginx 使用的 config 文件sudo nginx -t# 为了解决一些权限问题，www 是 nginx 配置文件中声明的 web server 的 user name# 这样就把 group 改为了 www，并且 group 用户都有 write 的权限sudo chgrp -R www &lt;root_dir_of_wordpress&gt;sudo chmod -R g+w &lt;root_dir_of_wordpress&gt;# 另外还在 &lt;root_dir_of_wordpress&gt; 中的 wp-config.php 文件中插入了 define('FS_METHOD','direct'); 这样一行，不知道是不是必要的 以上就是最终配置到 WordPress 的过程。之所以配置 WordPress，是因为我查到 WordPress 可以使用 Markdown，另外 WordPress 自带评论功能，插件和主题也非常丰富，所以就先使用 WordPress。结果发现 WordPress 的 Markdown 还需要安装插件才能支持，另外支持也不是很好，比如代码块会把比较长的行转行显示（即不是可以左右滑动），代码行号与高亮都没要。 所以，我还是痛下决心，换回到 hexo。hexo 比较简单，本地安装 hexo 后，在空目录中执行 hexo init 即可生成一堆相关文件，其中的 public 用来存放从当前 theme 和 markdown 文件生成的 static web 文件；而 source 目录用来存放 markdown 文件。简单使用步骤： 123456# in hexo root directoryhexo g # generate static web fileshexo server # start local web server, then browse http://localhost:4000 to preview web pages# copy files in public to server's directory, therefore updated pages can be browsed at https://tao93.top/ 以上就是简单的用法，不过实际上我做了一些额外工作。例如为了避免 markdown 文件意外丢失，我们需要把它们备份到 server 上，server 和 local 同时丢失的可能性极小。另外，markdown 中插入图片时，可以先把图片放在本地，然后 markdown 中指向图片的本地路径，这样生成的 web 文件会把图片拷贝到 public 目录中某处，然后 html 文件引用 public 目录中的 image，这时的引用其实就是一个 url 了。但是我不是这样做的，我是先把要插入的图片拷贝到 Server 的 public 目录某处，这样就会得到一个指向次图片的 url，然后再 markdown 中直接使用这个 url。这样的话，只要 server 的图片库保持稳定，markdown 文件就不用和本地图片库绑定在一起。同样的，server 的图片库也需要备份到 local，以确保安全。下面就开始介绍以上两点。 首先是本地 source 目录需要备份到 server 上，我的方式是本地 source 目录使用 git 来追踪，然后 server 上简历一个 bare repository source.git，这样本地的每次 commit 都 push 到 server 上的 source.git，就可以作为备份了。相应的本地的 public 目录也要 push 到 server 上的 public.git 这样一个 bare repository，然后在 server 上的 public 中，从 public.git 这个 remote git pull 一下，这样 server 中的 public 就有了最新的 web 文件。 接下来是图片上传到 server 中，为了方便，我写了一个 Python 脚本，用来把本地图片上传到 server，或者把剪贴板的图片 (便于复制图片的情景) 上传到 server，然后将对应的 url 粘贴到剪贴板，这样的话，只需要执行这个 Python 脚本，就可以上传本地图片或者剪贴板上的图片，并把得到的 url 复制到剪贴板，然后就可以直接粘贴到 markdown 中。以下是这个 upload_pic.py 脚本： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364from PIL import ImageGrab, Imageimport sysimport datetimeimport osnow = datetime.datetime.now()# store image files in date format directory path in serverdate_path = now.strftime('%Y/%m/%d')# use timestamp as image file name in serverf_name = str(int(now.timestamp()))if len(sys.argv) == 1: # get picture in clipboard im = ImageGrab.grabclipboard() # check whether it's a picture if isinstance(im, Image.Image): # file name in server f_name = str(int(datetime.datetime.now().timestamp())) + '.png' # save in local im.save(f_name) # the url of the image url = 'https://tao93.top/images/' + date_path + '/' + f_name # copy the url to clipboard os.system(\"echo '%s' | pbcopy\" % url) print('url has been copied') print('copying...') dest_path = '/home/liutao/hexo_blog/public/images/' + date_path # mkdir in server and copy the image os.system(\"ssh liutao@tao93.top 'mkdir -p \" + dest_path + \"'\") os.system('scp ' + f_name + ' liutao@tao93.top:' + dest_path) print('copy finished') # remove local image file os.remove(f_name) else: print('clipboard content is not a image!')elif len(sys.argv) == 2: if os.path.isfile(sys.argv[1]): # file name in server f_name = str(int(datetime.datetime.now().timestamp())) dot_loc = sys.argv[1].rfind('.') if dot_loc &gt;= 0: f_name += sys.argv[1][dot_loc:] # append the file extension url = 'https://tao93.top/images/' + date_path + '/' + f_name os.system(\"echo '%s' | pbcopy\" % url) print('url has been copied') print('copying...') dest_path = '/home/liutao/hexo_blog/public/images/' + date_path os.system(\"ssh liutao@tao93.top 'mkdir -p \" + dest_path + \"'\") os.system('scp ' + sys.argv[1] + ' liutao@tao93.top:' + dest_path + '/' + f_name) print('copy finished') else: print(sys.argv[1] + ' is not a file!')else: print('too much arguments') 为了简化步骤，我写了一个 deploy.sh 脚本放在本地 hexo blog 根目录中，这样只需要在 source 目录中编辑 markdown 文件，然后 commit，再调用 deploy.sh 脚本即可。此脚本把其他要做的事情都做了。 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash# into source cd source# make sure it's commited in source directorystatus=$(git status -s)if [ -z \"$status\" ]; then # git push in source git pushelse echo 'not commited in source directory!' exit 1fi# back into parent directorycd ..# generate static web fileshexo g# git push in local public directorycd publicgit add .git commit -m 'update web files'git pushcd ..# git pull in server's public directoryssh liutao@tao93.top 'cd /home/liutao/hexo_blog/public; git pull'# git commit in server's images directoryssh liutao@tao93.top 'cd /home/liutao/hexo_blog/public/images; git add .; git commit -m \"add images\"'# git pull in local's images directorycd imagesgit pullcd ..echo '========='echo 'Finished!'echo '=========' 这样上面的脚本就把生成 web 文件，拷贝 public 中的 web 文件拷贝到 server，把 server 中的 image 目录中的信息更新到 local 的 images 目录这样几个事情。 附： 如果要本地 git repo 没有 commit，remote repo 有 commit，现在需要本地的 master 分支 track remote 的 master 分支： 12345678# 先添加 origin，设置好 urlgit remote add origin liutao@tao93.top:/home/liutao/hexo_blog/public/images/.git# 然后 fetch 一下 远程的状态git fetch# 此时如果 git pull --set-upstream-to 是不行的，会说本地 master 分支不存在，而需要下面这样才行git checkout master","categories":[],"tags":[{"name":"Other","slug":"Other","permalink":"https://tao93.top/tags/Other/"}]},{"title":"修车小能手上线","slug":"修车小能手上线","date":"2018-09-26T07:47:46.673Z","updated":"2019-07-05T13:41:40.167Z","comments":true,"path":"2018/09/26/修车小能手上线/","link":"","permalink":"https://tao93.top/2018/09/26/修车小能手上线/","excerpt":"","text":"修车技术也是技术，所以关于修车的博客也是技术博客啦 😝 事情要从两个月前说起，当时在京东买了一辆粉色的比德文电动车给女朋友上下班用。这辆电动车比较便宜，当时我们也不怎么注意预防电动车被雨淋，因为潜意识觉得经常看到别人的电动车被雨淋，所以应该没事。事情坏就坏在这辆电动车防水性真不好，所以几场大雨之后，还没到一个月，电动车就坏了，拧车把上的旋钮车子没反应，也就是电机不转了。 本着应该有专业人员 (后面事实证明修车的真不是个好东西) 修理的态度，大热天我费尽力气把电动车推到了修车铺。等了半天修车的才姗姗来迟的过来了。然后修车的打开电动车后盖瞧了瞧，说是控制器坏了，需要更换，他店里的控制器 80 块钱一个。这时候我和女朋友就和厂家联系，厂家称要么给我们50块钱，要么我们把旧控制器寄回去然后他们寄一个新的回来。我们心想，快递寄控制器一来一回要好多天，这些天我们的车子就要这么晾在离家几公里的地方，这怎么能忍！所以我们和厂家撕逼，最终厂家答应给我们 80 块，于是我们就在店里换了个控制器。坑爹的修车的，帮我们换控制器时慢慢腾腾，中途还停下来帮两个女的配钥匙！当时真的是很气愤，换个控制器换了接近两小时，期间修车的还不停用一种傲慢的态度数落我们不应该再网上图便宜买了个质量差的电动车，他店里卖的车怎么怎么好怎么怎么地。而当女朋友对修车的说：”你的意思是这个电动车各方面质量很差吗？” 修车的又开始含糊其辞。 换完之后，本来想这事就算结束了，该去找厂家要 80 块钱了。谁知道，事情才刚刚开始。当天，女朋友就说车子有问题，她把车子从地下车库推出来时，上一个很陡的坡时，车子动力不足上不去，上到一般就猛地往回退！最后还是一个男生好心把她推上来了。然后隔了两天，女朋友又去修车铺那里，询问为什么动力不行了。修车的骑着电动车走了一圈，给了这么句话「电机坏了」。本来我对修车的就没好印象，所以听到这里我是不信的，控制器坏了我信，电机也同时坏这也太扯淡了。所以我推断是控制器的适配性 (或者说和电动车的兼容性) 比较差，所以才会动力不足。不就我还发现别的问题，当拧着车把旋钮再捏刹车闸时，电机居然还在发力，这个最基本的安全机制都没了。此外，智能控制器在启动时噪音比较大。 抱着对控制器适配性的质疑，我找到了杭州一家比德文车店，从车店那里我算搞清楚了缘由。原来，修车的给我换的是所谓智能控制器，也就是基本啥电动车都能用，但是并不能对每种电动车都有最好的适配性，自然也远不如原装控制器。而原装控制器只能厂家寄过来，这个比德文车店也没有。另外，从厂家拿到原装控制器后，来这个店里安装的话，他们需要收 三四十块钱。 之后我就像厂家联系，表示不要 80 块钱了，我把坏了的原装控制器寄回去，厂家给我寄一个新的控制器。不得不吐槽，厂家动作非常慢，总共两三个星期我才拿到新的原装控制器。我才不像跑到比德文车店出几十块钱让他们帮我安装，所以接下来，我直接自己动手安装，其实安装很简单，就是把那些借口对应插上就好了。安装好后，我试着骑了骑，没了噪音，启动更快，后面两天女朋友也表示上坡时不会动力不足了。 到此好像已经结束了。不过如果就这样结束了，我还能称作修车小能手么！ 才两三天，就出现拧旋钮后车轮 (电机) 不转的问题，但是又会忽然好了。又一次女朋友去上班骑到半路，忽然车轮不转了，把她吓一跳，后面的日子她就再也不敢骑了，她说还是要去修车店修一下才行。这样过了一个多星期，到了今天这个周六。我终于有时间去处理一下这件事了。 我有两个选择，一个是弄到修车店去，另一个是自己动手，我选择了后者，原因是间歇性的出问题，说明无法稳定复现，冉义弄到修车店，修车的搞半天说没毛病，那不就尴尬了嘛。今天我还特意骑着电动车绕小区一圈，问题依然没复现，这就很麻烦了。不过，我早就怀疑，这种间歇性的电机不转应该是接触不良的问题。所以今天我打算试试用排除法来看能否验证我的猜测。我打开后盖： 如上图所示，银白色铁盒子就是新的原装控制器，箭头所指的就是它连接到电动车的一些接口。都是那种带倒钩、直接插上就可以的接口。 修车也要讲安全，毕竟电池的电压有几十伏，可能会触电，所以我是这样来判断接口是否有问题的：断开电池和电动车的连接，拔开一个接口，连接上电池，最后转动旋钮看电机是否旋转，是的话说明这个接口压根不影响电机是否转动，否的话说明这个接口关键接口之一，会影响电机的旋转。 用上面的方法挨个接口尝试，我找到3个关键接口。如果问题真的是接触不良的话，很可能就是这 3 个接口之一接触不良，所以接下来我把这 3 个接口进行下一轮测试。测试方法是，把接口往外拔一点 (但是依然在倒钩锁定范围内)，这样就可以模拟现实中接口松动的情况了。如下图所示，左边是接口插很紧，图中箭头指的就是倒钩；右边是接口往外拔一点点，可以看到倒钩和一个凸起物之间已经没有间隙了。 通过模拟接口松动的情况，然后测试是否会导致电机不转，很快我就找到了一个接口，这个接口往外拔一点点，电机就无法转，往里插紧一点，电机就能转动了。 发现了问题所在，接下来就很好办了，用东西把这个接口固定紧就好了，让它一直保持插紧的状态。最好的材料应该细铁丝，用细铁丝扎紧然后用钳子拧紧就好。可是我明白细铁丝，所以我用绳子把它绑紧来，也就是下面图中这样： 为什么我前面说细铁丝更好呢，因为细铁丝拧紧后不会逆转变松，但是绳子是会的。用绳子帮硬的东西，总是会有那么写松动，无法彻底绑紧。所以在绑完后，我还用一根牙签挑过绳子，然后转两圈，这样绳子就会被绷得很紧了，就是下面这样的： 上图中牙签顺时针旋转越多，绳子就绷得越紧。 OK，大功告成！","categories":[],"tags":[{"name":"Other","slug":"Other","permalink":"https://tao93.top/tags/Other/"}]},{"title":"从阿里云服务器到个人博客","slug":"从阿里云服务器到个人博客","date":"2018-09-26T07:47:46.671Z","updated":"2019-07-05T13:41:28.645Z","comments":true,"path":"2018/09/26/从阿里云服务器到个人博客/","link":"","permalink":"https://tao93.top/2018/09/26/从阿里云服务器到个人博客/","excerpt":"","text":"前言：(友情提示，想看步骤的话，下面的前言可以跳过不看) 为什么我现在要买阿里云的 VPS (Virtual Private Server) 搞博客系统呢？我也说不上为什么，不过可以讲一下事情的经过。 2016年刚开始工作那会儿，从王译锋那里知道了租 VPS、搭建某 socks、nginx 驱动 hexo 博客这样一套东西。当时觉得很新鲜，立马也买了搬瓦工的 VPS，然后一同瞎搞，算是搞成了一个 hexo 静态博客系统了，不过有点尴尬的小插曲，我把 hexo 安装在了 VPS 上面 ，然后把 Markdown 文件推到 VPS 上面，然后再 VPS 再用 hexo 生成静态页面的文件。。。 实际上更合适的是把 hexo 安装在本地，然后本地生成的页面文件推到 nginx 的 web root 目录中去。 后来嘛，搬瓦工，Vultr，Linode 阿里云我都试了个遍，发现除了阿里云意外，虽然都不贵，但是网速稳定性真的很捉急，有时候在终端 ssh 到服务器上面时，输入命令真的是一卡一卡的，这样的网速带来的科学上网体验只能用「能用」两个字来形容。直觉告诉我，可能部署在香港的 VPS 网速会比较快，因为香港离大陆近。我就开始找香港的 VPS 了，一番找呀找，中间也交了些学费，最后找到了一个叫枫叶主机的，速度挺不错，轻松达到 500 KB/S，就是贵了点，我就和某同事一起平摊费用了。这个枫叶主机我一口气买了一年的，不过中间依然因为某些原因而出现网速不稳定的情况。等到枫叶主机过期后，因为穷，我忽然想试试老早就听别人推荐的一个叫云梯的 VPN。这个云梯我曾经使用过，但是的速度确实还不错，哪想到我一口气买了一年的 VPN 后，发现用不了，整个云梯团队都跑路了！！！就留下个网站还在运行，不断的吸钱，真他们坑！吃了大亏的我，开始蹭大学同学的 VPS 的某 socks 服务，挺长时间都没再买过 VPS了，期间，我把静态博客放到了 github.io 页面。然而，自始至终，我其实没写几篇博客，真为自己的懒惰感到惭愧。 直到最近，再次看到珂神和王译锋的博客、掘金搞得风生水起，感叹自己没有能拿的出手的东西，所以就买阿里云 VPS → 注册域名 → 搭博客系统了，期待自己能多写一些有价值的东西，加油！ 正文：租阿里云 VPS在阿里云官网，这个叫做「云服务器 ECS」，这个其实很简单了，花几百块钱就能租一年，我是 290 几块钱租的 1GB 内存、1Mbps 带宽、40GB 非 SSD 的香港 VPS。其实，对我们而言最敏感的性能指标就是内存和带宽了，硬盘一般是不会用光的，CPU 性能也没多大影响。这里解释一下，为什么选阿里云。有鉴于前面试用了一大波 VPS 服务，我发现只有阿里云算是最稳定的，虽然带宽只有 1Mbps (指从我们个人电脑访问 VPS 的网速，而在 VPS 上面安软件时，下载软件包的速度其实是很快的，因为用的是阿里云的镜像，所以相当于内网传输数据)，但是胜在稳，终端输入命令基本不会有任何延迟。 租完 VPS，ssh 连接到它，然后就是搭建某 socks 服务了，网上资料非常多。需要注意的是，阿里云服务器需要配置安全组规则的，不然无法提供服务。假设某 socks 使用 23333 号端口来提供服务，那么需要下图那样配置一条入方向的规则： 入方向表示数据流向 VPS 的，协议类型选 TCP，对绝大部分服务来说，都是 TCP 协议，端口范围就是 VPS 上面提供的服务所使用的端口了。如果没有这个配置，那么我们个人电脑将无法向 23333 号端口发起请求。另外出方向默认全开了，所以不需配置。 注册域名我挑了个很便宜的，36块钱 3 年，域名就是 tao93.top，也算是和我的名字和出生年份有些关联吧。 域名绑定 IP这个还是要提一下的。在阿里云注册的域名，需要实名认证 (上传单面身份证照片) 才行，一开始我不知道，傻乎乎的总等，一边等，一边 ping 和 nslook 我的域名，好在实名认证很快，基本上提交认证后，1小时内就有人处理。我认证时有点搞笑，我传了一张 jpeg 后缀的图片，然后审核者回复说，需要 jpg 或 bmp 后缀的图片。我有点吃鲸，然后把同一张图片后缀改成了 jpg，上传，然后认证就成功了。。。认证结束后，就可以设置解析规则了： 只需要上面红框中的一条规则就可以把 tao93.top 解析了，mail 的那条规则，我现在还用不上。添加规则的时候，如果拿不准，可以在下图中只在记录值填公网 IP 地址即可： 我当时也是有点傻，觉得香港的 VPS 算是境外，就在解析线路选了境外，然后傻等了好久，后面换成默认后，基本几分钟就可以解析了。 搭博客系统先说下为什么我没用 hexo 静态博客，因为静态博客无法评论，我觉得评论还是挺有必要的，虽然可以嵌入第三方评论服务，但是这种需要评论者用社交账号登录，麻烦，另外评论的数据全在别人手里，我觉得不好。所以我就要自己搭一个有后台的博客了。珂神使用的 zblog 是一个，国产的，看起来不那么华丽；WordPress 是另一个。我两个都装了，先装了 zblog，觉得有点点简单粗糙，然后就删的一干二净，装了 WordPress，然后发现 WordPress 复杂的让我有点迷失，我就想简单的写写东西，不想要那么多东西。然后我就在保留 WordPress 的基础上，又装了 zblog。 zblog 有个 php 版本，和 WordPress 的技术组合一模一样，就是 php + 数据库 + nginx 等 web server，其中 zblog 的数据库还可以用 sqlite，虽然我没成功过。我第一次装 zblog 时，手动安装了 MySQL，php，nginx，然后摸索着各种配置，搞了蛮久才搞定的。而 WordPress 的安装就很简单了，网上有 LNMP (Linux Nginx MySQL PHP) 组合包，等于一键就能装好环境，剩下的就是搞个 WordPress，并且替换掉 LNMP 原有的 web root 目录，就好了。 所以，无论 WordPress 还是 zblog，最简单的方式是，先装 LNMP 环境，然后就快了。需要记住一点的是，LNMP 环境会新建一个 www:www 用户(组) 来用于驱动 web 服务。务必需要让此 www 用户对于 web root 有 rwx 权限。比如 LNMP 默认的 web root 是 /home/wwwroot/default，那么一句 sudo chown -R www:www /home/wwwroot/default 即可。 直接安装 z_blog 的过程此过程配置比较麻烦，所以只是记录一下，不建议使用此方式。 装 nginx，设置开机自启，运行起来，然后别急着进浏览器验证，先到阿里云网站增加一下 80 号端口的安全规则，然后验证 nginx 是否可用。 建议更改一下 nginx 配置文件中的 root，即更改 web root 的位置，比如改为自己 home 中的某个目录，这样的话 chown web root 时不会有烦人的警告。 注意，nginx 需要重新加载配置文件，才能让配置文件的修改生效，方法是 sudo nginx -s reload 即可。 安装 Mysql，记得别忘记了 root 密码。 安装 Php，然后就是在 Php.ini 配置文件中，把各种 extension=php_mysql.dll 之类的语句解除注释，意思是 php 需要和 MySQL 数据库连接。但是这样的配置还不够，还需要 sudo apt-get install php7.0-mysql 这时候，可以下载 zblog 的压缩包，解压到 web root 中，然后浏览器打开 https://tao93.top，就可以开始安装 zblog 了，安装好后就是各种 GUI 配置方式了。再次强调一下，需要 nginx 对应的 Linux 用户对于 web root 目录递归的有 rwx 权限。我第一次装 zblog 就是没设置权限，然后在后台首页中，「清空缓存并重新编译模板」一直转圈圈。 配置主题，样式自定义，然后开始写博客。略","categories":[],"tags":[{"name":"VPS","slug":"VPS","permalink":"https://tao93.top/tags/VPS/"}]},{"title":"从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起","slug":"从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起","date":"2018-09-26T07:47:46.669Z","updated":"2019-07-05T13:41:17.181Z","comments":true,"path":"2018/09/26/从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起/","link":"","permalink":"https://tao93.top/2018/09/26/从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起/","excerpt":"","text":"今天温习《Android 开发艺术探索》一书时，看到类似下面这么一句话：「使用 Messenger 将 Message 对象跨进程传输时，obj 属性无法传输自定义的 Parcelable，而只能传输 framework 已有的 Parcelable，比如 Bitmap 等」。然后也翻了源码注释，注释也是这么说的：Froyo 之后，才能用 obj 传输 framework 的 Parcelable，且 obj 不能为 null。下面是注释： 1234567891011/** * An arbitrary object to send to the recipient. When using * &#123;@link Messenger&#125; to send the message across processes this can only * be non-null if it contains a Parcelable of a framework class (not one * implemented by the application). For other data transfer use * &#123;@link #setData&#125;. * * &lt;p&gt;Note that Parcelable objects here are not supported prior to * the &#123;@link android.os.Build.VERSION_CODES#FROYO&#125; release. */public Object obj; 当然，Message 还有 setData(Bundle b) 方法可用，而这个方法中是可以放入自定义的 Parcelable，不过此处需要埋下伏笔。 下面我们继续说 obj 为什么不能传自定义 Parcelable。理论上说，只有能加载到自定义类，那么就应该能反序列化出自定义类的对象。带着这个想法，我浏览了 Message 的 writeToParcel 和 readFromParcel 两个方法。发现了玄机就是下面的 readFromParcel 方法： 123456789101112private void readFromParcel(Parcel source) &#123; what = source.readInt(); arg1 = source.readInt(); arg2 = source.readInt(); if (source.readInt() != 0) &#123; obj = source.readParcelable(getClass().getClassLoader()); &#125; when = source.readLong(); data = source.readBundle(); replyTo = Messenger.readMessengerOrNullFromParcel(source); sendingUid = source.readInt();&#125; 上面代码使用 getClass().getClassLoader 来反序列化 obj 所要引用的对象，如果这个 ClassLoader 无法找到自定义类，那么问题肯定就是出在这里了。 下面我就开始一步一步验证。首先建立一个项目，项目中添加一个自定义的 Parcelable 类： 1234567891011121314public class Book implements Parcelable &#123; private int mId; private String mName; private Book(Parcel in) &#123; mId = in.readInt(); mName = in.readString(); &#125; public Book(int id, String name) &#123; mId = id; mName = name; &#125;&#125; 然后项目中开启两个进程，分别称为 client 进程和 server 进程好了。然后 client 进程的 activity 中绑定 server 进程中的 server，绑定后，client 进程使用 Messenger 向 server 进程发送一个 Message 对象，此 Message 对象的 obj 引用一个 Book 对象： 123456789101112private ServiceConnection mMsgConnection = new ServiceConnection() &#123; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; mMessenger = new Messenger(service); try &#123; Book book = new Book(1, \"name\"); mMessenger.send(Message.obtain(null, 101, book)); &#125; catch (RemoteException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 然后，我在 Message 类的 readFromParcel 方法中打上断点，当代码执行到断点处时，先验证 getClass().getClassLoader() 无法加载到自定义的 Book 类： 然后验证主线程的 Thread.getContextClassLoader 可以加载到 Book 类： 最后验证使用可以加载到 Book 类的 ClassLoader 的话，是可以成功反序列化得到 Book 对象的： 插一句，这个 readFromParcel 不是运行在主线程，而是运行在 server 进程的 Binder 线程池中的。线程池中的线程的 getContextClassLoader() 结果是 null。 OK，上面的测试准确的验证了我的想法，现在回到前面说的 Message 的 setData(Bundle b) 方法的伏笔。显然这里的 Bundle 如果要跨进程传输自定义 Parcelable，我们也需要确定 Bundle 在反序列化时不会重蹈 Message.obj 的覆辙。实际上，Bundle 自己做不到这点，还需要我们帮它一把忙，那就是在 server 进程中，从 Message 拿到 Bundle 后再给 Bundle 设置一个 ClassLoader 即可： 1234567891011private static class MessengerHandler extends Handler &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case 101: Bundle b = msg.getData(); b.setClassLoader(Thread.currentThread().getContextClassLoader()); Book book = b.getParcelable(\"book\"); &#125; &#125;&#125; 注意，上面de handleMessage 方法是在主线程，所以我直接使用 Thread.currentThread().getContextClassLoader() 就可以。 到此，我得出一个结论，那就是我的对于 Java 的 ClassLoader 一无所知，惭愧惭愧，还有很长的路要走。所以，后续我会加强这方面的学习，然后可能会继续加长这篇文章，毕竟这篇的标题是「从 XXX 说起」。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"The Linux Command Line digest","slug":"The Linux Command Line digest","date":"2018-09-26T07:47:46.656Z","updated":"2018-09-26T07:47:46.669Z","comments":true,"path":"2018/09/26/The Linux Command Line digest/","link":"","permalink":"https://tao93.top/2018/09/26/The Linux Command Line digest/","excerpt":"","text":"本文是阅读 The Linux Command Line 后写成的摘要，用于自己需要用到时回忆和参考。 Learning The Shell","categories":[],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://tao93.top/tags/Shell/"},{"name":"Linux","slug":"Linux","permalink":"https://tao93.top/tags/Linux/"}]},{"title":"targetSdkVersion 杂谈","slug":"targetSdkVersion 杂","date":"2018-09-26T07:47:46.655Z","updated":"2019-07-05T13:40:04.584Z","comments":true,"path":"2018/09/26/targetSdkVersion 杂/","link":"","permalink":"https://tao93.top/2018/09/26/targetSdkVersion 杂/","excerpt":"","text":"很久没有写新的博客了，原因是这一个多月以来都没想到什么合适的主题，今天就来杂谈一下 targetSdkVersion 相关的东西吧。 在我工作的第一年里，其实我并不知道 targetSdkVersion 有什么含义，查资料，看到的是类似于「代表应用针对某个 api level 完成适配了」这样的描述，这样的描述其实让我摸不着头脑。后来，我把一个小应用项目的 targetSdkVersion 升高到 api 27，这个过程才让我对 targetSdkVersion 理解比较到位了。而这时候，我发现 targetSdkVersion 的的确确如我先前查到的资料所言，表示针对某个 api level 完成适配了，这个信息是会传递给 android 系统的，android 系统依据这一信息来对应用做区别对待。 首先，需要明确 Android 系统在大版本更新时，总会加入一些新的 feature，而这些新 feature 可能会让老的应用无法完美兼容。典型的例子是 api 23 新增的运行时动态申请权限机制。在 api 23 以上的 android 系统中，系统期待代码先申请权限 (或者检查权限是已有的) 后才运行需要权限的代码 (例如拍照)。但是老应用的代码，则是只需要在 manifest 文件中申请拍照权限，就可以直接执行拍照的代码。所以，targetSdkVersion 的作用就是，如果 targetSdkVersion 大于等于 23，那么代码必须按新机制来 (即先申请权限，然后才能执行需要权限的代码)，否则，android 系统就认为这是个没有针对 api 23 进行适配的老应用 (比如可能是一个 2012 年就停止更新的应用）。对这种老应用，android 系统需要兼容，兼容的方式就是，这种应用一经安装，就自动获得了所有 manifest 中申明的权限，这样它就能在新系统中正常运行。 在新系统 (api 23 及以上) 中，对于上述的老应用，安装时会列出所有权限，告诉用户这个应用一经安装就有了下面的权限 (如同老系统安装所有应用时一样)。这就是系统的兼容机制。新系统中安装的这样的老应用后，我们在应用详情中可以看到它自动有了所有权限，可是新系统是可以手动关闭某个应用的权限的，如果我们关闭这个老应用的某个权限，会怎么样呢？如下图所示： 系统会提示用户，关掉权限的话应用可能无法正常运转。这是对的，因为假设老应用中有直接执行拍照逻辑的代码，拍照权限现在被用户手动关闭，那么执行到这样的代码时就会崩溃 (without permission)！ 问题是，许多应用明明一直在更新，但是为了尽量获取到各种权限，会故意将 targetSdkVersion 停留在 22 及以下，这样用户一经安装，这样的应用就自动有了它想要的任何权限，例如 Android 版手机 QQ 现在的 targetSdkVersion 依然是 17： 对于这样的比较无赖的应用，其实可以放心把不想授予的权限关闭掉，它是不会崩溃的，因为其代码中其实已经做了权限检查，毕竟它一直在更新和维护。另外，对于这种现象，Google 也有措施，今年谷歌声明了对在 Google Play 更新的应用和上架的新应用都在今年必须将 targetSdkVersion 升至 27 (步子有点大)。虽然 Google Play 对国内还有点鞭长莫及，不过这一倡导应该还是会让许多大厂的应用更快的提高 targetSdkVersion。 另外，假如用户本来安装了 targetSdkVersion 为 22 的老应用，且老应用有所有想要的权限，此时如果更新到 targetSdkVersion 为 23 的新版本应用，那么新应用将「继承」所有的权限。反过来，新版本的应用的 targetSdkVersion 是不能比已安装的老版本应用还更低的，因为这不光兼容起来很麻烦，而且于情于理都不应该。 动态申请权限大概算是最典型的一个无法完美兼容的 feature 了，除此之外，还有 api 26 引入的 adaptive icon 这个 feature。adaptive icon 使得应用可以根据 launcher 的偏好，显示圆形、圆角方形、正方形等各种形状的图标。许多老应用是直接自己裁剪一个圆角方形的图标，这显然无法完美满足 adaptive icon，所以是不完美兼容。targetSdkVersion 为 26 及以上的应用，应该且需要将 launcher icon 分为 foreground 和 background 两层，foreground 是图标中心的若干元素，比如黑阈 的 launcher icon 的 foreground 是下面这样一张图片： 这个图片绝大部分都是透明的，只有那 3 条弧线是灰白色的。这样一个 foreground 作为黑阈应用图标的中心元素。而 background 则是 #FF353535 这样一个纯色。事实上，黑阈的在新系统的图标是如下所示的 xml 文件： 123456&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;background android:drawable=\"@color/ic_brevent_background\" /&gt; &lt;foreground android:drawable=\"@mipmap/ic_brevent_foreground\" /&gt;&lt;/adaptive-icon&gt; 这样一个文件声明了 foreground 和 background。当时黑阈也是可能在 api 25 及以下的 android 系统运行的，这样的系统没有 adaptive icon 这个 feature，所以，当应用的 minSdkVersion 不到 26 时，应用中还需要为老系统准备图标资源。其实做法就是上述 xml 文件命名为 ic_launcher.xml 之类的名字，置于 drawable-anydpi-v26 这样的资源目录中，而其他用于老系统的图标资源 ic_launcher.png 文件置于 drawable-xdpi 等资源目录中，即可。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"Python 也能玩跳一跳小游戏","slug":"Python 也能玩跳一跳小游戏","date":"2018-09-26T07:47:46.654Z","updated":"2019-07-05T13:39:49.999Z","comments":true,"path":"2018/09/26/Python 也能玩跳一跳小游戏/","link":"","permalink":"https://tao93.top/2018/09/26/Python 也能玩跳一跳小游戏/","excerpt":"","text":"2017年12月微信发布的跳一跳小游戏，简单却又考验人，借着腾讯一贯的好友排名机制对用户的刺激，几乎是瞬间就火起来了。手残的我，玩这个游戏最多也只有几十分。看着这款小游戏，极其简单的操作 (长按就够了)、极其简单的背景 (几乎是纯色，没有任何背景装饰物)、极其简单的元素 (长方体、圆柱体等)，让我觉得应该可以用一个脚本来自动化玩这个游戏，说干就干。 对于 Android 设备，需要解决的问题其实只有：模拟长按事件、截图并获取图片、分析图片像素，分析得到每一步需要跳动的距离。下面一样一样来看。 模拟长按事件，我首先想到了 adb，查了一下，找到了 adb shell input swipe x y time 这样一条命令，swipe 本来是用来做滑动操作的，但是这里只需要长按，所以只提供了一对坐标，最后一个参数 time 表示长按的时间，OK。 截图并获取图片。获取图片好办，adb pull 一下就好了。截图的话，我也是想到了 adb，查了一下，找到了 adb shell /system/bin/screencap -p /sdcard/screenshot.png 这样的命令，用于截图并放到 sdcard 中的某个位置。 分析图片像素这一步，就仅仅剩下算法的问题啦，毕竟前面已经拿到了截图了。我是用 Python 的 PIL 图片处理库来做的。我们先来看一张跳一跳的截图： 首先可以明确一个问题，其实我们不需要求两个落点之间的距离，而只要求上图中两条红色竖线之间的距离就好了，原因是不管往左上跳，还是往有上跳，这两种跳法左右对称，所以每一次跳动的距离，其实正比于两个底座的中心的 x 坐标的距离，也就是上图两条竖直红线的距离。 假设第一条红色竖线为跳之前位置，第二条竖线为下一个底座中心线。第一条竖线的 x 坐标，可以通过从上到下从左到右扫描图片每一个像素，直到找到了颜色和跳动的棋子颜色相同的颜色 (一种比较深的紫色)。然后就可以找到第一条红线的 x 坐标了。第二条竖线，可以在首次扫描到和背景颜色不一致的颜色时，此时应该就是下一个底座的最靠上的像素，并且由于底座要么是圆柱形要么是长方体，所以这个像素也就是左右方向上是居中的，也就是我们要找的第 2 条竖线的位置。 最后通过测试和调校，可以找到长按的时长和两条红色竖线距离的比值。 到此为止，思路都理清了，接下来就是写代码加细节优化了。代码中最外层是个循环，循环的每一步都是这样几步：截图、分析图片确定长按的时长、模拟长按、等待几秒等跳跃完成以免下一次循环过早开始截取到中间态的图片。 代码如下所示，下面是一个按照 1080P 屏幕写的脚本，还是我去年写的，也不知道是否还适用于现在的跳一跳，我现在也不想玩跳一跳了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106from PIL import Imageimport osimport timeimport randomdef is_ball_color(r, g, b): # 判断是否是棋子顶部小球的颜色 if r &lt; 50 or r &gt; 70: return False if g &lt; 50 or g &gt; 70: return False if b &lt; 50 or b &gt; 70: return False return Truedef is_base_color(r, g, b): # 判断是否是棋子底座的颜色 if r &lt; 50 or r &gt; 70: return False if g &lt; 50 or g &gt; 70: return False if b &lt; 90 or b &gt; 100: return False return Truedef is_similar_color(c1, c2): # 判断是否是相近的颜色 if abs(c1[0] - c2[0]) &gt; 20: return False if abs(c1[1] - c2[1]) &gt; 20: return False if abs(c1[2] - c2[2]) &gt; 20: return False return Truewhile True: os.system('adb shell /system/bin/screencap -p /sdcard/screenshot.png') os.system('adb pull /sdcard/screenshot.png .') img = Image.open('screenshot.png') w = img.size[0] h = img.size[1] if w == 0 or h == 0: print('w, h:', w, h) break # print img.getpixel((310, 933)) # print img.getpixel((311, 933)) # 首先是扫描来找棋子 base_x = base_y = 0 for y in range(400, h): # y 坐标从 400 开始，避免扫描到图片顶部的按钮 x = 0 for x in range(0, w): px = img.getpixel((x, y)) if is_ball_color(px[0], px[1], px[2]): px = img.getpixel((x, y + 192)) if is_base_color(px[0], px[1], px[2]): break if x &lt; w - 1: base_x = x base_y = y break base_y += 192 if base_x == 0: print('base_x == 0') break print('base:', base_x, base_y) bg_px = img.getpixel((0, 400)) # 然后是扫描来找下一个底座的位置 dest_x = dest_y = 0 for y in range(400, h): x = 0 for x in range(0, w): if x % 50 == 0 and x &gt; 0: px = img.getpixel((x - 50, y)) if is_similar_color(bg_px[0 : 3], px[0 : 3]): bg_px = px px = img.getpixel((x, y)) if abs(px[0] - bg_px[0]) &gt; 20 or abs(px[1] - bg_px[1]) &gt; 20 or abs(px[2] - bg_px[2]) &gt; 20: if abs(x - base_x) &gt; 100: y += 10 left = right = x while not is_similar_color(bg_px[0 : 3], img.getpixel((left, y))[0 : 3]): left -= 1 while not is_similar_color(bg_px[0 : 3], img.getpixel((right, y))[0 : 3]): right -= 1 break if x &lt; w - 1: dest_x = (left + right) / 2 dest_y = y break distance = abs(dest_x - base_x) print('dest:', dest_x, dest_y) x = (int)(random.random() * 200 + 600) y = (int)(random.random() * 200 + 600) # t 是长按的时间 t = distance * 600 / 383 loc = ' ' + str(x) + ' ' + str(y) + ' ' os.system('adb shell input swipe ' + loc + loc + str(t)) os.system('rm screenshot.png') time.sleep(3)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://tao93.top/tags/Python/"}]},{"title":"MySQL 数据库支持 emoji 表情字符","slug":"MySQL 数据库支持 emoji 表情字符","date":"2018-09-26T07:47:46.652Z","updated":"2018-09-26T07:47:46.653Z","comments":true,"path":"2018/09/26/MySQL 数据库支持 emoji 表情字符/","link":"","permalink":"https://tao93.top/2018/09/26/MySQL 数据库支持 emoji 表情字符/","excerpt":"","text":"兴冲冲的整个博客，死皮赖脸的叫几个同学来评论，结果评论中输入的 emoji 表情最后会变成问号，试想别人评论「写的真棒 😄」结果变成了「写的真棒 ？」，这是何其的尴尬。 继续回到这个问题本身。我登录到数据库一查，发现数据库中存的评论文本就是个问号，这说明 emoji 表情存到数据库的过程出问题了。赶紧一查，发现网上还是很容易找到了解决方法。问题的原因是 MySQL 存储文本时默认的 UTF-8 仅支持 3 个字节编码，而 emoji 是 4 字节编码的，所以存储过程出问题了。所以需要将 charset 设置为 UTF-8 的超集 UTF-8mb4，虽然我也不知道这个 UTF-8mb4 是何方神圣。 首先，需要在配置文件 my.cnf (在我的机器上这个文件路径是 /etc/my.cnf) 中添加一下内容： 1234567891011[client]default-character-set=utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=’SET NAMES utf8mb4'[mysql]default-character-set=utf8mb4 然后，需要修改已有库、表、字段的 charset。 12345678# 修改库的 ALTER DATABASE &lt;database_name&gt; CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; # 修改表的 ALTER TABLE &lt;table_name&gt; CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; # 修改字段的 ALTER TABLE &lt;table_name&gt; CHANGE &lt;column_name&gt; &lt;column_name&gt; &lt;original_column_type&gt; CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 最后重新启动 MySQL 服务： 1sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql start 另外，mysqldump 时，也需要进行额外指定 char set： 1mysqldump -default-character-set-utf8mb4 -u &lt;db_user_name&gt; -p --databases &lt;db_name&gt; --lock-all-tables &gt; &lt;file_name&gt;","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://tao93.top/tags/MySQL/"}]},{"title":"macOS 系统编译 Android 8.1.0 源码全过程","slug":"macOS 系统编译 Android 8.1.0 源码全过程","date":"2018-09-26T07:47:46.651Z","updated":"2019-07-05T13:39:25.057Z","comments":true,"path":"2018/09/26/macOS 系统编译 Android 8.1.0 源码全过程/","link":"","permalink":"https://tao93.top/2018/09/26/macOS 系统编译 Android 8.1.0 源码全过程/","excerpt":"","text":"这篇文章详细记录我在 macOS 10.13 上使用 AOSP 代码编译最新 Android 8.1.0 的 userdebug 系统，并安装到 Pixel XL 手机上，最后用 AOSP 代码成功调试 userdebug 系统 (从而可以准确将电脑上的源码和设备系统代码行号对应) 的全过程。全文包括 AOSP 的获取、编译 Android 系统、使用 Intellij IDEA 打开部分源码、使用 Intellij IDEA 进行调试这样几部分。 环境：macOS 10.13, 250GB SSD, 16GB RAM, XCode 9.2, JDK 1.8.0_151 一、AOSP 代码的获取因 Android 的编译需要 case-sensitive 的磁盘系统，而 macOS 的磁盘系统不满足此条件，所以我们需要建立一个 case-sensitive 的镜像文件，然后挂载此镜像文件，最后再挂载的目录中获取源码和编译源码。建立镜像文件的操作： 123456789101112# 创建空间上限为 150GB 的稀疏镜像文件，创建后镜像文件其实是 ~/android.dmg.sparseimage # 创建后并未真正占据这么多磁盘空间，而是随着镜像中防止的数据越来越多，该镜像文件才原来越大 hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 150g ~/android.dmg # 然后就可以将镜像文件挂载到 /Volumes 中，比如我挂载到 /Volumes/android hdiutil attach ~/android.dmg.sparseimage -mountpoint /Volumes/android # 解除挂载则是下面这样 hdiutil detach /Volumes/android # 镜像文件的空间上限是可以更改的，比如下面更改为 160GB hdiutil resize -size 160G ~/android.dmg.sparseimage 提示一下，hdiutil 命令的某些操作需要电脑插着电源，否则会报错，不过这个报错在 Google 搜索一下就能找到答案了。 AOSP 项目因为包含太多了子项目，所以每个子项目使用 Git 来管理，而整个 AOSP 则使用 repo 工具来管理，repo 其实就是一个 shell 脚本，内部调用 Git。官文提供的获取 AOSP 代码的方式因为某些原因而比较难做到，所以我从 USTC Mirror 来获取源码。步骤如下： 123456789101112131415# 首先获取一下 repo 工具 mkdir ~/bin export PATH=~/bin:$PATH curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo # 先挂载，然后进入挂载后的目录，创建一个目录，我这是创建了 android-8.1.0_r20 cd /Volumes/android mkdir android-8.1.0_r20 &amp;&amp; cd android-8.1.0_r20 # 然后使用 repo init 来初始化 AOSP 目录，因为 android-8.1.0_r20 是可以安装在 Pixel XL 上面的最新版本，所以我选择它来作为分支 # 参见 https://source.android.google.cn/setup/build-numbers?hl=zh-cn#source-code-tags-and-builds 来查询哪些分支支持哪些设备。 # USTC Mirror 作为同步代码的镜像 repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-8.1.0_r20 # 接下来是需要漫长时间的一步，即从服务器同步所有代码及文件到本地。 repo sync 如果 repo init 失败，可以参考一下 USTC Mirror 的方法 中的初始化仓库那一步。同步过程是可能意外中断的，此时可以直接继续执行 repo sync 来继续同步。不过，这个补刀是可以自动化执行的，那就是下面的 shell 脚本： 123456#!/bin/bash repo sync while [ $? -e 1 ]; do repo sync doneecho success 除了同步的方式，其实还有另一条路可以走，那就是先从 USTC Mirror AOSP Monthly 或者 TUNA Mirror AOSP Monthly 下载 aosp-latest.tar 文件，然后解压到放置源码的目录，然后再 repo init，然后再 repo sync，这样的话，repo sync 就会快很多，可能一个小时就可以了吧。 二、编译 Android 系统成功得到源码后，就可以编译 Android 系统镜像了。在 macOS 上，如果你不是 macOS 或 iOS 开发者的话，八成我们需要先安装 XCode。 Gentle remind：加入你也是 250GB SSD 用户，考虑到编译过程中，源码目录占据的空间会越来越庞大，那么我建议暂时将源码根目录中的 .repo 隐藏目录剪切到移动硬盘。但是光这样还不够，你还需要先解除挂载，然后再执行下面的命令来收缩稀疏镜像文件所占据的空间大小： 123# 因为稀疏镜像文件删除内容时，并不会减小占据的空间大小，所以稀疏镜像文件会越来越大，解决办法就是下面这样收缩一下 # 收缩是把稀疏镜像中没有使用的空间去除掉，从而让它不那么稀疏，就好像把海绵里的水挤掉一样 hdiutil compact android.dmg.sparseimage 下面开始编译的一些步骤： 12# 先进入 AOSP 根目录，然后尝试执行下面的命令，也就是清理上次构建的产物 make clobber 如果上面的命令报错，提示 MacOSX SDK 缺少，那么可以 https://github.com/phracker/MacOSX-SDKs/releases 下载对应版本的压缩包，解压到 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs 这个路径中。如果提示什么 rt.jar 找不到，那么久将 ANDROID_JAVA_HOME 设置为 JDK 的根目录。 直到 make clobber 不报错了，开始下面的步骤： 12345678# 引入一个环境设置的脚本 source build/envsetup.sh # 选择编译目标，我选择的是 aosp_marlin-userdebug，marlin 表示 Pixel XL，userdebug 的含义表示调试版本的 Android 系统 lunch # 然后就是开始编译了，-j 后面表示多少个线程并行编译。根据电脑 CPU 硬件来选，一般 4 核心 8 线程的 CPU 就选 -j8 make -j8 完整编译一遍是需要耗费若干小时时间的，所以耐心等待，我的电脑是 MacBook Pro 15 寸 2016版 2.6GHz CPU，编译大约需要三四个小时。 如果上面编译时出现类似下面的错误： ninja: build stopped: subcommand failed. ninja failed with: exit status 1 那么参考 https://groups.google.com/forum/#!topic/android-building/D1-c5lZ9Oco 给出的方法，需要更改 external/bison 这个项目的代码了。此时如果前面我们把 .repo 隐藏目录剪贴走了，那么现在就需要把它的一部分拷贝回来，即 external/bison 这个项目所需的 Git track 文件，通过查看 external/bison/.git 中的符号链接，我们可以知道哪些文件需要拷贝回来。 红框中就是需要拷贝回来的目录。然后我们执行下面的更改： 1234567891011121314# 先进入这个 bison 项目的目录 cd external/bison # 作出更改 git cherry-pick c0c852bd6fe462b148475476d9124fd740eba160 # 构建一下 bison 项目 mm # 回到 AOSP 根目录，然后将刚刚构建得到的 bison 替代另一个地方的 cd ../.. &amp;&amp; cp out/host/darwin-x86/bin/bison prebuilts/misc/darwin-x86/bison/ # 然后继续再编译 make -j8 建议：如果你也是 250 GB SSD 用户，那么每次编译失败后，可以先 make clobber 清除构建产物，再解除挂载，然后 compat 一下稀疏镜像文件，这样可以尽可能的避免最后编译时空间不够用。 三、烧录到 Pixel XL 设备中先进入开发者模式，然后打开 OEM 锁。连接到电脑，使用 adb reboot bootloader 命令让手机进入到 BootLoader 模式，当然也可以采用按设备的物理按键的方式进入 BootLoader 模式。如果此时屏幕下像下面这样，就不需要解锁，反之需要使用 fastboot flashing unlock 来解开 BootLoader 锁。糟了，今天出门没带手机，无法截图了，反正就是屏幕下部出现 unlocked 字样，然后还有一把解开的小锁的图标，就是已解锁，否则是未解锁。只有解锁后才能刷机。对了，温馨提示一下，解锁后每次开机都会提示「Your device software can’t be checked for corruption. Please lock the bootloader. PRESS POWER TO PAUSE BOOT」，不用理它就好了。 现在我们要去 Driver Binaries 下载适用于 Pixel XL 的驱动文件。这个页面很长，要在其中找到我们需要的驱动文件，需要一个细分版本号，在 代号、标签和版本号这个页面，可以找到我之前使用的 android-8.1.0_r20 分支对应的细分分支是 OPM2.171019.029，使用这个细分分支，就可以在 Driver Binaries 下载到用于 Pixel XL 的准确的驱动文件了，如下图所示，一共是两个文件，下载之后解压，发现是两个 shell 脚本，名字分别是 extract-qcom-marlin.sh 和 extract-google_devices-marlin.sh。 现在，将上一步得到的两个 shell 脚本都复制到 AOSP 源码根目录，然后分别执行以下。接下来，需要以下步骤来编译得到一些额外的文件，其实我也不知道是什么文件。接下来的步骤： 12345source build/envsetup.sh # 下面这一步我依旧是选 marlin-userdebug lunchmake -j8 别担心上面这个 make 很快就会完成，因为之前已经完整编译过了。接下来要开始刷机的最后步骤了： 12345# 因为后面的 flashall 需要下面这样一个环境变量，所以先设置一下 export ANDROID_PRODUCT_OUT=&lt;AOSP_ROOT_DIR&gt;/out/target/product/marlin # 进入上面这个 marlin 目录，手机保持 BootLoader 模式并连接到电脑，然后开始刷机fastboot -w flashall 四、调试 Android 代码user-debug 的系统安装到手机中后，可以发现和发行版还是有些不同的，比如没有 Google 框架，没有 Google Photos，甚至连时钟应用都和发行版的原生 Android 不一样。如果需要调试代码，比如我们调试到 com.android.internal.policy.PhoneWindow 这个类的代码，那么显然，需要使用一个 IDE 来打开我下载的 AOSP 源码，因为这份源码再是安装到手机中的源码，而不能使用 Android SDK 中的 sources/android-27 中的源码来调试。使用 Intellij IDEA (下面用 IDEA 简称) 来打开源码，将会比 Android Studio 好一些，因为前者更容易控制 JDK 的引入。 首先，对于我们的个人电脑来说，直接打开整个 AOSP 项目的源码显得有些考验人，同时也考验机。因为 AOSP 目录太庞大了，IDEA 建立索引将会需要非常之久，一旦文件有了更改，重新索引又要很久，此外，光是索引文件都会很大。所以权宜之计是，只把最常用的一部分 AOSP 代码 (也就是一部分子项目) 使用 IDEA 打开。我选择了 framework 目录下的所有子项目和 libcore、repo 这两个子项目。framework 是因为里面的代码常用到，libcore 是因为里面有 Java 的库代码，而 repo 是因为 repo 被引用了，所以也加进来了。 此外，因为 AOSP 源码放置在 case-sensitive 的镜像文件中，而如果 IDEA 打开位于镜像文件中的源码的话，将需要为 IDEA 配置为 case-sensitive，可是 IDEA 可能还需要打开其他的普通项目，即位于 macOS 的 case-insensitive 文件系统中的项目。这样两者就会冲突，频繁报错。所以我的方法是，把上一段提到的部分子项目拷贝到外面，也就是拷贝到 macOS 文件系统，然后再用 IDEA 打开。 接下来是具体的步骤了， 首先需要生成用于 IDEA 的 android.imp 和 android.ipr 文件: 12# 在 AOSP 根目录执行下面的命令 make idegen &amp;&amp; development/tools/idegen/idegen.sh 然后就是拷贝子项目出来 1234567# 这个 aosp_part 就是用来保存部分子项目的目录了 mkdir aosp_part &amp;&amp; cd aosp_part # 拷贝 framework 目录和 libcore 目录出来 cp -R /Volumes/android/android-8.1.0_r20/framework . cp -R /Volumes/android/android-8.1.0_r20/libcore . cp -R /Volumes/android/android-8.1.0_r20/repo . 为避免不小心改动上面项目中的文件，我们需要 Git 来追踪它们，而所有子项目的 git 文件其实都在 .repo 这个隐藏目录中。所以： 12345678910111213# 接下来需要把上面子项目对应的 .git 目录拷贝过来 # 先建一个 .repo 目录，并建好相关目录 mkdir -p .repo/project-objects/platform &amp;&amp; mkdir -p .repo/projects # 然后开始拷贝 .git 目录 cp -R /Volumes/android/android-8.1.0_r20/.repo/project-objects/platform/frameworks .repo/project-objects/platform cp -R /Volumes/android/android-8.1.0_r20/.repo/project-objects/platform/libcore.git .repo/project-objects/platform cp -R /Volumes/android/android-8.1.0_r20/.repo/project-objects/platform/repo.git .repo/project-objects/platform cp -R /Volumes/android/android-8.1.0_r20/.repo/projects/frameworks .repo/projects/ cp -R /Volumes/android/android-8.1.0_r20/.repo/projects/libcore.git .repo/projects/ cp -R /Volumes/android/android-8.1.0_r20/.repo/projects/repo.git .repo/projects/ # 最后，把前面生成的两个文件拷贝过来 cp /Volumes/android/android-8.1.0_r20/android.iml /Volumes/android/android-8.1.0_r20/android.ipr . 然后，就可以使用 IDEA 以打开项目的形式打开此 aosp_part 目录了。打开后，因为 libcore 中就已经有了 JDK 库代码，所以我们需要让 aosp_part 项目不使用电脑中的 JDK。方法是在 IDEA 打开的 aosp_part 项目，File → Project Structure → SDKs，然后如下图所示： 点击加号，新建一个 JDK 并将新的 JDK 命名为 aosp_jdk_1.8，新建的 JDK 一开始会和已有的那个 JDK 1.8 一模一样，包含了库代码，所以我们需要把 aosp_jdk_1.8 的 ClassPath tab 中的所有 .jar 文件移除，这样 aosp_jdk_1.8 成了一个空的 JDK，将被用于 aosp_part 项目，而其他的 IDEA 项目可以依旧使用 JDK 1.8，互不影响。 在上面的窗口中，在左侧切换到 Modules tab，然后如下图，切换到 dependencies tab： 在上面这个界面会有非常多的 .jar ，把它们全部移除，然后再添加前面那个 aosp_jdk_1.8，现在就已经用 IDEA 打开了部分 android 源码了： 接下来是最后一步了，在 IDEA 中调试代码。 在 IDEA 中，Run → Edit Configuration → + → Remote，然后编辑一下 name，然后把 Settings 下面的 port 编辑为 8700，最后保存。 在 Android SDK 源码目录中的 tools 目录中的 monitor 可执行文件。如果这个程序打不开，别担心，先检查一下 JDK 版本是不是高于或等于 1.8.0_152，如果是，那么只需要回退到 1.8.0_151 即可。贴心的我提供一份 JDK 1.8.0_151 的下载地址，在这里找到 1.8.0_151 版本即可以。 打开 monitor 后，鼠标选中需要调试的进程： 因为今天没带手机，所以上图中是个 vivo 的测试机。 然后在 IDEA 点击调试按钮 (图标是一个绿色的小虫子)，此时如果弹出 Debug tool window 并提示 connected to target VM，则说明可以加断点调试了。 EOF","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"},{"name":"AOSP","slug":"AOSP","permalink":"https://tao93.top/tags/AOSP/"}]},{"title":"macOS 状态栏显示网速小工具","slug":"macOS 状态栏显示网速小工具","date":"2018-09-26T07:47:46.649Z","updated":"2019-07-05T13:39:13.719Z","comments":true,"path":"2018/09/26/macOS 状态栏显示网速小工具/","link":"","permalink":"https://tao93.top/2018/09/26/macOS 状态栏显示网速小工具/","excerpt":"","text":"早先我是用盗版的 iStat Menus 软件中的「状态栏显示网速」功能的，后来不再用盗版软件了，可是偶尔还是有查看网速的需求，所以我就查找 macOS 监测网速的方法，最后找到了 nettop 这个命令。 nettop 命令的参数我就不解释了，反正用它就可以看到当前时刻各个进程 download 和 upload 的字节数，所以定时执行此命令，然后可得时间区间内的上传和下载字节数，然后再除以时间间隔，就得到了网速。我定时执行的命令如下所示： 1nettop -x -t wifi -t wired -k rx_dupe,rx_ooo,re-tx,rtt_avg,rcvsize,tx_win,tc_class,tc_mgt,cc_algo,P,C,R,W -P -l 1 执行上面的命令，就可列出若干进程和他们的上传下载字节数，下面是示例： 1234567891011121314151617time interface state bytes_in bytes_out17:36:43.266151 apsd.100 7413 1624617:36:43.266164 sentineld.109 6666 695417:36:43.266166 biometrickitd.253 113264 1980217:36:43.266169 eoshostd.266 0 017:36:43.266171 SystemUIServer.380 0 334417:36:43.266172 rapportd.405 393 36617:36:43.266174 Mail.419 81706 3618317:36:43.266194 SogouServices.487 329 92117:36:43.266198 mDNSResponder.602 20108134 392598717:36:43.266200 Teams.6104 33061 1997517:36:43.266214 Microsoft Teams.6142 23322 2208517:36:43.266220 QQ.33101 522914 8204017:36:43.266222 WeChat.37612 53670 6449217:36:43.266224 Google Chrome.37878 1633955 4264817:36:43.266226 ss-local.38600 52499 7455517:36:43.266228 netbiosd.40075 1008522 151841 以上就是最基本的东西了。因为我并不懂 swift 编程，所以我先写了一个 python 脚本，来定时执行上面的命令，然后解析命令的输出并计算网速，脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import osimport timeimport subprocessdef get_time_stamp(t): h = int(t[0:2]) m = int(t[3:5]) s = int(t[6:8]) miu_s = int(t[9:]) return ((h * 60 + m) * 60 + s) * 1000000 + miu_slast_result = &#123;&#125;cur_result = &#123;&#125;while True: print('---------') # sample, output speed res = subprocess.run('nettop -x -t wifi -t wired -k rx_dupe,rx_ooo,re-tx,rtt_avg,rcvsize,tx_win,tc_class,tc_mgt,cc_algo,P,C,R,W -P -l 1'.split(), stdout=subprocess.PIPE) # assign sample result to last result output = res.stdout.decode() cur_result = &#123;&#125; for line in output.split('\\n'): if line == '' or line.startswith('time'): continue data = line.split() data_len = len(data) t, p, i, o = data[0], ''.join(data[1: data_len - 2]), int(data[data_len - 2]), int(data[data_len - 1]) idx = p.rfind('.') p = p[:idx] t = get_time_stamp(t) cur_result[p] = (t, i, o) if len(last_result) &gt; 0: speed = &#123;&#125; for last_p, last_d in last_result.items(): for cur_p, cur_d in cur_result.items(): if last_p == cur_p: up_speed = cur_d[2] - last_d[2] down_speed = cur_d[1] - last_d[1] if cur_p in speed: speed[cur_p] = (speed[cur_p][0], speed[cur_p][1] + up_speed, speed[cur_p][2] + down_speed) else: speed[cur_p] = (cur_p, up_speed, down_speed) speed = list(speed.values()) speed.sort(key=lambda x: x[1] + x[2], reverse=True) for i in speed: print(i[0]) last_result = cur_result time.sleep(1) 然后今天终于磕磕绊绊的用 XCode 写了一个比较简陋的「状态栏显示实时网速」的 macOS 小工具，并放在了 github 上面，运行效果如下图所示：","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://tao93.top/tags/macOS/"},{"name":"swift","slug":"swift","permalink":"https://tao93.top/tags/swift/"}]},{"title":"macOS 编译 Android 9 源码","slug":"macOS 下编译 Android 9 源码","date":"2018-09-26T07:47:46.647Z","updated":"2019-07-05T13:39:01.603Z","comments":true,"path":"2018/09/26/macOS 下编译 Android 9 源码/","link":"","permalink":"https://tao93.top/2018/09/26/macOS 下编译 Android 9 源码/","excerpt":"","text":"环境：macOS High Sierra 10.13.6 with 16GB RAM XCode 9.4.1 Oracle JDK 1.8.0_181 大约 1 个月之前，Google 推出了 Android Pie 正式版，我也用 Pixel XL 设备第一时间更新到了 Pie，结果发现和 Oreo 相比变化不大。此外，我也想到 Google 应该早就在 AOSP 创建了 Android Pie 的代码分支，正好我到刚到 Microstrategy 来上班，换了新的 MacBook，是时候再次用 MacBook 编译一次 AOSP 源码了。 首先我查看了手上的 2017 款 MacBook 15寸，发现这居然是 500GB 磁盘的，这令我十分惊喜，这意味着这台机器编译 Android 源码时磁盘空间将会绰绰有余。 获取源代码可从国内镜像先下载到一个压缩包，USTC Mirror 和 Tuna 都可选择，以下以 Tuna 为例。 首先从 这里 下载 aosp-latest.tar 文件和对应的 MD5 文件。这个 tar 文件中是近期的整个 AOSP 项目的压缩包。下载可以使用 wget 加 -c 命令，这样即使下载意外失败，也可以接上中断的地方继续下载。 12# download aosp-latest.tar file, with -c optionwget -c https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar 下载完成后，可以通过以下命令获取 md5 值，检查和下载到的 aosp-latest.tar.md5 文件中的值是否一致： 12# get it's md5 value then check the valuemd5 aosp-latest.tar 另一个令人惊喜的事，最近的 aosp 体积居然减小了，之前几个月 aosp 体积那是一路蹭蹭蹭往上涨，涨到了 40 多 GB： 接下来，按照之前我的 post macOS 系统编译 Android 8.1.0 源码全过程 中的描述，建立 sparse image 并挂载，然后将 aosp-latest.tar 解压到 sparse image 中。我在 sparse image 中建立了一个 aosp 目录，然后把 aosp-latest.tar 解压到了 aosp 目录中，此时 aosp 目录中仅有一个 .repo 目录。接下来我们来把最新的 Android Pie 分支的代码 checkout。 另外，要先知道我们需要哪个分支，在 这里 可以看到所有代码分支与代号。在这个网页如果显示为中文，就拉到最底部在左下角把语言换成英文，因为英文才有最新的 Android Pie 相关信息。如下图所示，根据自己想要用于什么设备来选择分支，比如如果是 Pixel 2 设备那么最新的分支就是 android-9.0.0_r6，而不能使 android-9.0.0_r7 和 android-9.0.0_r8，我当时用的是 android-9.0.0_r2 123456789# prepare repomkdir ~/bincurl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repoexport PATH=$&#123;PATH&#125;:$&#123;HOME&#125;/bincd aosp# init with specific branch android-9.0.0_r2, use other branch as you wantrepo init repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r2 接下来就可以 repo sync 了，可以直接执行此命令，也可以像我之前 post 一样写一个 sync 脚本来执行。 有于我们下载了最新的 aosp-latest.tar，所以 sync 的过程还是比较快的，我当时应该 30 来分钟就 sync 完成了。 编译以往编译 Android 源码时，总是会出现各种各样的错误，但是这次 Android Pie 的源码编译异常顺利，没有任何错误，不知道是不是 Google 做了改进和优化。 首先下载 XCode 安装，然后进入 aosp 根目录，就可以编译了： 1234567891011# clear build generated filesmake clobber# import a build scriptsource build/envsetup.sh# select build target lunch# start buildmake -j8 非常顺利，上次我选择 aosp_marlin-userdebug 用了 3 个半小时就成功编译了，简直令人感动。相比起来，之前的 Android 源码编译会出现各种各样的错误，让人非常抓狂。 因为我手里的 Pixel XL 已经安装了 factory Android system，里面有我很多资料和数据了，另外 userdebug 类型的 Android 是没有 Google 服务的，并且连 Google Photos、Camera、Gmail 等应用全都没有，所以我就没再把编译出来的 userdebug 类型系统安装到手机中。于是，我今天选择 aosp_x86_64-eng 重新编译了一遍，这个 aosp_x86_64-eng 适用于在 x86 电脑上运行模拟器 (没有手机就只好现在电脑上用模拟器试试了)。这一次用了 4 个多小时完成编译，同样非常顺利： 编译完成后，直接运行 emulator 命令即可运行模拟器。需要注意，这个 emulator 命令是运行 lunch 命令而添加的，也就是如果退出了电脑的 terminal，然后再进入 aosp 根目录，需要重新运行 source build/envsetup.sh 和 lunch 然后才能运行 emulator。以下是模拟器运行的截图： 上面 3 张截图中，左边两张截图可以看到系统是很简陋的，Google 的许多应用都没有，连 Google service 也没有。最有一张截图，显示了 Android 版本号是 9，另外最底部的 Build Number 显示了这是 aosp_x86_64-eng 类型的构建，PPR1.180610.010 是 Build 代号，在 这里 可以看到，而 20180907.105244 则是构建时间。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"},{"name":"macOS","slug":"macOS","permalink":"https://tao93.top/tags/macOS/"},{"name":"AOSP","slug":"AOSP","permalink":"https://tao93.top/tags/AOSP/"}]},{"title":"Linux 执行远程脚本","slug":"Linux 执行远程脚本","date":"2018-09-26T07:47:46.636Z","updated":"2018-09-26T07:47:46.646Z","comments":true,"path":"2018/09/26/Linux 执行远程脚本/","link":"","permalink":"https://tao93.top/2018/09/26/Linux 执行远程脚本/","excerpt":"","text":"最近工作上需要写一套跨服务器分隔数据和转移数据的脚本。经过实践，发现单纯执行在本地执行命令来操控远程服务器的数据不现实。所以需要把脚本放在远程服务器，然后本地让服务器自己去执行脚本。此外，需要使用 expect 工具来自动输入远程服务器登录密码。 先提一些 expect 的用法，即可以写成 expect 脚本形式 (即脚本以 #!/usr/bin/expect 开头)，也可以写成 expect -c ‘&lt;several_cmd&gt;’ 的单条命令形式。后者的示例形式： 1expect -c 'spawn scp root@example:~/xx.txt .; expect \"password:\"; send \"abc1234\\\\r\"; interact;' 上面例子中，spawn 后面表示需要执行的命令 (此处是一个 scp 命令，需要输入密码，这就是为什么要 expect 的原因)，expect 后面是表示标准输出出现 “password:” 字样时，就自动输入 send 后面的东西，也就是密码。最后一个 interact 表示接下来允许用户自己交互。 本来直接使用 shell 脚本就可以的。不过我这设计到数据的切割，所以就使用了 Python，然后需要用到 shell 命令时，是由 Python 脚本再调用 shell 命令的。 12345678910111213141516171819202122232425262728293031323334import osdef call_remote_cmd(host, password, cmd): \"\"\" 让远程服务器自己执行命令 :param host: 远程服务器用户名加域名，格式示例：root@example.com :param cmd: 要让远程服务器执行的命令 :return: 一些结果，其中可能有一些提示性文本 \"\"\" # 举个例子，ssh root@example.com ls 可以让远程服务器执行 ls 命令 final_cmd = '/usr/bin/expect -c \\'spawn ssh %s %s; expect \"*Password:\"; send \"%s\\\\r\"; interact;\\'' % (host, cmd, password) res = os.popen(final_cmd).read() print(res) return res # 传给远程服务器上的 Python 脚本作为参数 args = &#123;'a': 1, 'b': [1, 2, 3]&#125;# args 需要经过复杂的替换，才能保证准确传递到远程服务器的 Python 脚本中args = str(args) args = args.replace('\\'', '\\\\\\\"')args = args.replace(' ', '\\\\ ') args = args.replace(',', '\\\\,') args = args.replace('[', '\\\\[') args = args.replace(']', '\\\\]') args = args.replace('&#123;', '\\\\&#123;') args = args.replace('&#125;', '\\\\&#125;') args = args.replace(';', '\\\\;') args = args.replace('\"', '\\\\\"') cmd = '/usr/local/bin/python3 x.py \\\\\"%s\\\\\"' % args call_remote_cmd('root@example.com', 'password', cmd) 上面是我因工作需要而写出来的让远程服务器执行它的 Python 脚本的本地 Python 脚本代码。使用的时候就简单了。服务器上面放一个被调用的 Python 脚本。然后执行上面代码，就可以了。 想必直接写 shell 脚本的话，可能会更简洁些。等啥时候有空了试试看。","categories":[],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://tao93.top/tags/Shell/"},{"name":"Python","slug":"Python","permalink":"https://tao93.top/tags/Python/"}]},{"title":"Homebrew 小结","slug":"Homebrew 小结","date":"2018-09-26T07:47:46.626Z","updated":"2018-09-26T07:47:46.636Z","comments":true,"path":"2018/09/26/Homebrew 小结/","link":"","permalink":"https://tao93.top/2018/09/26/Homebrew 小结/","excerpt":"","text":"说实话，我无法适应暗色背景的界面，比如 jetbrains 系列 IDE 的 Darcula 主题 (暗色的背景)，再比如 Terminal 的一些暗色背景主题，所以我也无法直视 Homebrew 主页的背景色，看得我眼睛难受。但是，Homebrew 应该是一个很不错的工具，毕竟它几乎取代了 MacPorts。 Homebrew 是 macOS 上的一款包管理工具，作用类似于 Ubuntu 上面的 apt-get。不同点是，Homebrew 的操作不需要 root 权限，Homebrew 不是系统级别的工具。Homebrew 维护一些称为 tap 的 git repository，每个 tap 里面是一些 formula，所谓的 formula 就是对应一个软件包（比图 wget 和 git 就是两个 formula）。最重要的 tap 是 homebrew/core，这个 tap 也是自带的，其中是各种命令行工具，它在安装了 Homebrew 的系统中一般位于 /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core，这可以通过 brew –repo homebrew/core 得知： 1234➜ Downloads brew --repo homebrew/core/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core➜ Downloads cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core➜ homebrew-core git:(master) 从上面可知 homebrew/core 这个 tap 在本地是一个 git 项目，实际上里面维护了四千多个 formula，也就是可供用户安装 4000 多个命令行工具，每个 formula 都是用一个 ruby 文件描述的。此外，还有 homebrew/science 和 homebrew/php 等官方 tap。除了官方 tap 外，还有著名的 caskroom/cask 这个用来安装 gui 软件(例如 Sublime Text)的 tap。插一句，在 caskroom 的 tap 中，不是用 formula 表示软件包，而是用 cask 来表示，所以大致可以认为 formula 表示命令行的包，而 cask 表示 gui 软件。对用户来说，Homebrwe 可以做的事就是搜索、安装、升级、查看、卸载各种软件包，此外也可以管理增删 tap。 除了 homebrew/core 外，我只添加了 caskroom/cask 这一个 tap。要添加此 tap 或移除它，只需要执行下面的命令： 12345# 添加 brew tap caskroom/cask # 移除 brew untap caskroom/cask 当长时间没有更新过 tap 对应的本地 git 项目，那么下一次更新时，因为国内的网络环境，更新所需要的时间可能要很久，所以我使用了 USTC Mirror 的 Homebrew 代理。具体方法其实就是，把 homebrew/core 和 caskroom/cask 这两个 tap 对应的本地 git 项目的 remote url 分别设置为 https://mirrors.ustc.edu.cn/homebrew-core.git 和 https://mirrors.ustc.edu.cn/homebrew-cask.git，这样更新就很快了。另外，brew 下载软件是从一个所谓的 bootle 去下载 (这个 bootle 的 URL 是 https://homebrew.bintray.com/，其实就是里面托管了非常多常见的软件的压缩包) 或者从软件的官网去下载。具体在哪里下载，则是根据 formula 的 ruby 描述文件中的描述来定的。 那有没有上面说的这个 bottle 的镜像以便可以快速下来软件呢？当然有，同样是来自于 USTC Mirror 的，做法很简单，设置一个环境变量 HOMEBREW_BOTTLE_DOMAIN，其值为 https://mirrors.ustc.edu.cn/homebrew-bottles 即可。 下面是这一通修改对应的命令： 123456789101112131415# 切到 homebrew/core 对应的 git 项目目录 cd $(brew --repo homebrew/core) # 换 url git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git # same as previous cd $(brew --repo caskroom/cask) # same as previous git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git # 我是使用 zsh，所以追加到 .zshrc 末尾就可以，如果是使用 bash，则不能这样 echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &gt;&gt; ~/.zshrcsource ~/.zshrc 下面开始是 brew 的一些常用命令小结。 brew search \\&lt;formulaName>: 在已安装 tap 中查找包，搜索到的结果类似如果不是 homebrew/core 这个 tap 中的，将会以 tapName/formulaName 的形式列出。例如 brew search git 的结果大致是: 123456bagitbash-git-prompt...git...caskroom/cask/git-it brew install \\&lt;formuaName>: 安装指定 formula 的最新版本，安装路径一般是 /usr/local/Cellar// 中，此外会在 /usr/local/bin 中建立指向可执行文件的符号链接，以便命令行直接运行。 brew uninstall formulaName: 卸载指定 formula，不过不会删除安装包文件。 brew upgrade formulaName: 升级指定的 formula 到最新版。 brew cleanup: 在安装了更新版本软件包后，从 /usr/local/Cellar 删除旧版本的软件包。没错，升级时并不是覆盖式安装，而是在 /usr/local/Cellar/ 中多了一个更高版本号的目录，然后符号链接指向更高版本目录中的可执行文件。所以，如果不想要这种冗余，就可以用 brew cleanup 来清除旧版本的目录。 brew outdated: 查看哪些 formula 可以升级。 brew info formulaName: 查看 formula 的信息，例如 brew info git, brew info caskroom/cask/git-it 等。 brew update: 更新所有 tap 中的包信息，其实也就是把每个 tap 对应的本地 git 项目更新到服务器最新提交，以便可以搜索到最新添加的包以及已有包的最新发布信息。 brew list: 列出已安装的所有包。 tap 的管理：brew tap tapName: 新增一个 tap。 brew untap tapName: 移除一个 tap。 brew tap-info tapName: 列出一个 tap 的详细信息。 更多操作，可以参考官方文档，内容很全面。","categories":[],"tags":[{"name":"Homebrew","slug":"Homebrew","permalink":"https://tao93.top/tags/Homebrew/"},{"name":"macOS","slug":"macOS","permalink":"https://tao93.top/tags/macOS/"}]},{"title":"HomeBrew Cask 加快下载的脚本","slug":"HomeBrew Cask 加快下载的脚本","date":"2018-09-26T07:47:46.616Z","updated":"2018-09-26T07:47:46.624Z","comments":true,"path":"2018/09/26/HomeBrew Cask 加快下载的脚本/","link":"","permalink":"https://tao93.top/2018/09/26/HomeBrew Cask 加快下载的脚本/","excerpt":"","text":"Homebrew 是个好工具，除了用它安装命令行软件外，我也会用它来安装 GUI 软件。这么做的好处是 Homebrew 会直接帮我接连链接到 GUI 软件的可执行文件的符号链接，这样，我在终端使用符号链接，就可以打 GUI 软件了。例如，Sublime Text 的符号链接是 subl，那么在终端任何目录中，一行 subl “new text.txt” 就可以用 Sublime Text 打开new text.txt了。 问题是，brew cask install xxx 的下载速度经常会非常慢，而我把下载软件包的 URL 直接复制到 Chrome 中去下载，则非常快，这就很尴尬了。经过稍微检查，我发现brew cask install xxx 过程中，会在 Cache/Cask 目录(其实就是 brew –cache命令的结果)中生成一个类似于xxx–v1.2.3.zip.incomplete这样的文件。于是我把自己用 Chrome 下载的文件，复制到 Cache/Cask 中来，然后更名为 xxx–v1.2.3.zip，也就是把 .incomplete 去掉。然后再 brew cask install xxx一下，发现 Homebrew 提示软件包已经下载好了，于是立刻开始安装了。 上面这样的方式确实避免了下载慢的问题，不过这样手动操作，总是不那么高(yǒu)效(bī)率(gé)，所以我就想要写个小脚本来自动化这个过程。我选择了使用 shell 脚本。此处要吐槽一下 shell 脚本的语法，难记，真的是很难记(比如字符串操作)！比起来，几乎任何一门编程语言的语法都要好记得多。 废话说了很多了，下面是脚本内容： 1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/bash if [ \"$#\" -eq \"1\" ]; then # 找到本地描述需要安装的软件包的 ruby 文件 tap_path=`brew --repo caskroom/cask` file_path=\"$&#123;tap_path&#125;/Casks/$&#123;1&#125;.rb\" if [ -f \"$file_path\" ]; then # 从里面读取版本信息，下载的 URL while read key value; do if [[ $key == \"version\" ]]; then len=$(($&#123;#value&#125;-2)) version=$&#123;value:1:$&#123;len&#125;&#125; elif [[ $key == \"url\" ]]; then len=$(($&#123;#value&#125;-2)) url=$&#123;value:1:$&#123;len&#125;&#125; url=$&#123;url/\\#\\&#123;version\\&#125;/$version&#125; # 使用 Chrome 来下载 /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome $url fi done &lt; $file_path else echo \"Cask '$1' is unavailable: No Cask with this name exists.\" fi cache_dir=`brew --cache` downloaded_name=$&#123;url##*/&#125; target_name=$1--$&#123;version&#125;.$&#123;downloaded_name##*.&#125; # 每个三秒钟检查一下下载好了没，好了就把下载好的文件移动到 # Cache/Cask 中，并且改名为 Homebrew 想要的方式。 while true; do if [ -e ~/Downloads/$downloaded_name ]; then mv ~/Downloads/$downloaded_name $cache_dir/Cask/$target_name # 安装 brew cask install $1 break else sleep 3 fi doneelse echo \"usage: cask-install Cask-Name\" fi","categories":[],"tags":[{"name":"Homebrew","slug":"Homebrew","permalink":"https://tao93.top/tags/Homebrew/"},{"name":"Shell","slug":"Shell","permalink":"https://tao93.top/tags/Shell/"},{"name":"macOS","slug":"macOS","permalink":"https://tao93.top/tags/macOS/"}]},{"title":"Android Touch 事件的传递与处理","slug":"Android Touch 事件的传递与处理","date":"2018-09-26T07:47:46.614Z","updated":"2019-07-05T13:36:43.861Z","comments":true,"path":"2018/09/26/Android Touch 事件的传递与处理/","link":"","permalink":"https://tao93.top/2018/09/26/Android Touch 事件的传递与处理/","excerpt":"","text":"一、MotionEvent MotionEvent 是 Android 系统中报告动作输入（如触摸屏幕，滚动球，鼠标）等事件的类。其中有整形数的 Action 和描述事件的各种浮点型坐标。MotionEvent 的 action 的最低一个字节，其取值我们常见的 ACTION_DOWN, MOVE, POINTER_DOWN, POINTER_UP, UP, CANCEL (后面可能简称为 DOWN 等等) 这些了。虽然我们可能会粗暴的使用下面这样的方式： 123456switch (event.getAction()) &#123; case MotionEvent.ActionDown: ... break; ... &#125; 但是其实上面这样仅适用于单点触控场景，原因是 getAction() 方法返回的结果中，最低的1个字节才对应上面说的 ACTION_DOWN，而次最低一个字节则表示 PointerIndex (这个概念后面会提到)，对于单点触控场景，PointerIndex 始终为0，所以上面的代码才能跑通。更好的方式，其实是使用 getActionMasked() 方法，此处查看源码即可非常清晰。 对于一串触摸事件（指手接触到屏幕到手完全离开屏幕），用户第一个手指接触到屏幕时，触发 DOWN, 手指在屏幕上移动时，持续触发出很多 MOVE，第二个以上的手指触摸到屏幕是，触发 POINTER_DOWN，非最后一个离开屏幕的手指离开屏幕时触发 POINTER_UP, 最后一个手指离开屏幕时，触发 UP。 在一串触摸事件过程中，视图从 window detach 的话，或者 View 的 PFLAG_CANCEL_NEXT_UP_EVENT 标记位设置了时，或者 View 本来处理了一个 Down 事件但是接下来的 MOVE 等事件被 ViewGroup 拦截了，将会触发 CANCEL。当然，应该还有别的触发 CANCEL 事件的场景。下图是一串 Touch 事件的例子： Down → Move →...→ Move → PointerDown → Move →...→ PointerUp → Move →...→ Move → Up MotionEvent 中有个 Pointer 的概念，Pointer 大致表示触摸到屏幕的各个手指。getPointerCount() 即为多点触控的点数。每个 pointer 都有一个 index (取值是0到getPointerCount()-1)和 id（最大是31，意味着一串触摸事件中，最多允许手指接触屏幕32次），前者在一串 Touch 事件中可能会变化，而后者保持不变，例如多点触控时，大拇指对应的 index 本来是0，后面可能变成了1了. getPointerId(int pointerIndex)和findPointerIndex(int pointerId)这两个方法是 index 和 id 间的一一映射。 那为什么要有 index 和 id 两个东西呢？ index 和 id 的区别。举个例子就清楚了。假设起始时，右手的食指，中指，无名指依次先后落在屏幕上，那么三个指头的 index 和 id 分别都是 0, 1, 2。此时抬起中指，那么食指的 index 和 id 不变，而无名指的 index 变成1，id 依然是2。即 index 总是 0, 1, 2,…, getPointerCount() - 1. 而 id 则可能大于 getPointerCount(), 另一面则是，pointer 的 id 在整个一串触摸事件中保持不变。 MotionEvent 的 getX() 与 getX(int pointerIndex), 前者等价于后者的 getX(0), getY 类似. getPointerIdBits() 返回一个类似于标志数的东西，其二进制从右向左数，第 i 位为1表示存在 id 是 i 的 pointer，此处应看源码。可以想见此结果的二进制形式中1的个数即为多点触控的点数。 二、Touch 事件的生成 Touch 事件的根源是从硬件而来，而 ViewRootImpl$ViewPostImeInputStage#processPointerEvent 方法是一个比较合适的开始追踪 Touch 事件的起点，此处应看源码。事件如果没有被消费，最终可能将在 ViewRootImpl #finishInputEvent 中回收掉(这不是本文的重点)。Touch 事件的传递堆栈 (按调用的顺序排列)： 1234567ViewRootImpl$ViewPostImeInputStage#processPointerEventView#dispatchPointerEventDecorView#dispatchTouchEventActivity#dispatchTouchEventPhoneWindow#superDispatchTouchEventDecorView#superDispatchTouchEventViewGroup#dispatchTouchEvent Touch 事件传递到了 ViewGroup 的 dispatchTouchEvent 方法后，就开始是本文要关注的焦点了，即一串 Touch 事件在 View 树上是如何传递和消费的。 三、传递和处理 Touch 事件 下面是事件传递和处理中最重要的 4 个方法： 1234567View#dispatchTouchEvent，非 ViewGroup 的 View 接受 Touch 事件的方法，我们一般不重载它。View#onTouchEvent，View(含 ViewGroup)自己尝试去消费 Touch 事件，经常会被重载。ViewGroup#dispatchTouchEvent，重载了 View 的同名方法，作为 ViewGroup 接受 Touch 事件，此方法中包含「传递 Touch 事件给 child」和「尝试自己消费 Touch 事件」这样两个分支逻辑，一般不重载它。ViewGroup#onInterceptTouchEvent，ViewGroup 判断自己要不要拦截 Touch 事件的方法，拦截意味着自己尝试消费此事件，有时候被重载。 传递: 在 View 树中，Touch 事件是由 parent view 传递给 child View (child view 也可能是 ViewGroup)的。在一串 touch 事件中打头的总是 DOWN 事件，parent view 通过调用 child view 的 dispatchTouchEvent方法把 DOWN 事件传递给 child view，这就给了 child 一个消费此事件的机会。child 的 dispatchTouchEvent 方法返回 true 的话，就表示 child 消费了 DOWN 事件，返回 false 就表示不消费。如果 child 消费了 Down 事件，那么最简单的情况就是后续的 move 等事件都会通过调用 child 的 dispatchTouchEvent 方法直接交给此 child，不管它的 dispatchTouchEvent 方法返回什么；如果 child 没有消费 DOWN 事件，那么单点触控情形下，后续的 move 等事件与此 child 再也无缘了。 消费： View(包括 ViewGroup) 消费 Touch 事件，在代码上等价于调用当前类的 onTouchEvent 方法。然后 ouTouchEvent 的返回结果作为是否消费了此事件的依据。 拦截： 拦截是指 ViewGroup 有机会在把 touch 事件 dispatch 给 child 前，通过调用自己的 onInterceptTouchEvent 来判断要不要把 touch 事件截下来给自己尝试消费。对于 DOWN 事件，onInterceptTouchEvent 总是会被调用；对于其他事件，child 有机会在 parent 的onInterceptTouchEvent 被调用之前，请求 parent 不要拦截，这个请求就是通过 child 调用 parent 的 requestDisallowInterceptTouchEvent 方法来实现的。 DOWN 事件： DOWN 事件是一串 touch 事件的第一个事件，在 ViewGroup 的 dispatchTouchEvent 方法中，接到此事件时，首先会做一些清除工作，然后检查自己要不要拦截此事件和是不是要转为 CANCEL 事件。如果不拦截且不转为 CANCEL，那么挨个检查 child，在恰当的时候调用 child 的 dispatchTouchEvent 来看有没有 child 会消费此事件。 上面 4 段话，用伪代码来表示，大概就是下面这样的： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class ViewGroup extends View &#123; public boolean dispatchTouchEvent(MotionEvent event) &#123; final boolean intercepted; // 拦截即不把事件传给 child boolean handled = false; // View group 是否消费了事件 if (is DOWN || child ever comsumed previous event) &#123; if (! disallowIntercept) &#123; // PS: 对于 DOWN 其实 disallowIntercept 一定是 false intercepted = onInterceptTouchEvent(event); &#125; else &#123; intercepted = false; &#125; &#125; else &#123; intercepted = true; &#125; if (! canceled &amp;&amp; !intercepted) &#123; for (View child : all children) &#123; if (! child able to consume event) &#123; continue; &#125; if (dispatchTransformedTouchEvent(event, child)) &#123; // 做一些记录工作，然后 break break; &#125; &#125; &#125; // previous event 指这一串 touch 事件中在 event 前面的那些 if (no child ever consumed previous event) &#123; handled = super.dispatchTransformedTouchEvent(event); // 尝试自行消费 event &#125; else &#123; // 其实非 down 事件才能走到这个 else 分支 for (child : children who has consumed previous event) &#123; if (child.dispatchTouchEvent(event) handled = true; &#125; &#125; return handled; &#125;&#125; class View &#123; public boolean dispatchTouchEvent(MotionEvent event) &#123; boolean result = false; if (mOnTouchListener != null &amp;&amp; isEnabled &amp;&amp; mOnTouchListener.onTouch(this, event)) &#123; result = true; &#125; // onTouch 优于 onTouchEvent 来代表 View 尝试消费 event if (! result &amp;&amp; onTouchEvent(event)) &#123; result = true; &#125; return result; &#125; public boolean onTouchEvent(MotionEvent event) &#123; if (!isEnabled()) &#123; return isClickable() || isLongClickable(); &#125; if (isClickable || isLongClickable) &#123; ... retrun true; &#125; retrun false; &#125;&#125; 各个类和方法的角色描述如下： ViewGroup#dispatchTouchEvent，代表 ViewGroup 接受事件，处理拦截逻辑，尝试分发事件给 child，调用 View#dispatchTouchEvent来尝试自行消费 Touch 事件。返回值表示自己这颗子树有没有消费事件。 View#dispatchTouchEvent 代表非 ViewGroup 的 View 接受事件，调用真正尝试消费事件的代码（onTouchEvent 或者 onTouch 之类的方法）。返回值表示自己有没有消费事件。 ViewGroup#onInterceptTouchEvent，返回值表示 ViewGroup 要不要拦截事件。 ViewGroup#requestDisallowIntercept，被 child 来调用，表示请求 parent 不要拦截，这个请求仅在非 DOWN 事件有效，且会递归向上调用所有 parent 的同名方法。 TouchTarget 类，此类包含消费过 Touch 事件的 child 和它消费过哪些 pointer 的事件这些信息，TouchTarget 如下图所示。在 ViewGroup 中，存有一个 TouchTarget 链表，遍历此链表，即可知道一个 pointer 是否已有事件被某个 child 处理过。 以上的介绍，其实是省略了不少信息，真正的事件分发过程，要更复杂不少，下面是我尝试画的一张流程图 (把图和源码对照着理解可能会有些帮助)： 对于上图，有一些需要解释的地方： TouchTarget 持有一个 child View，和此 child View 曾消费过 Down 或者 pointerDown 事件的那些 Pointer 的 id，这些 pointer id 是以 id bits 的形式存储为一个整数的。 TouchTarget 链表的头结点是由 mFirstTouchTarget 引用的。在一串事件结束(处理完 UP)后，正常情况链表应该清空，在一串 Touch 事件到来前(处理 Down 前)也会清空，算是补刀。 链表的意义是，存储 child 曾经消费过某些 pointer 的 Down 或者 PointerDown 事件这种信息。当一个 Pointer 结束了（手指头离开屏幕），那么所有消费过它的 Down 或者 PointerDown 事件的 TouchTarget 都需要移除掉它的 id，事实上，这一串 touch 事件中再也不会有这个 id 了；如果一个 TouchTarget 的 pointer id移除光了，那么意味着此 TouchTarget 持有的 child 没有消费过任意(现存)的 pointer 的 Down 或者 PointerDown，于是可以把此 TouchTarget 从链表移除了。 每次一个 Down 或者 PointerDown 事件 ev 到来时，对于 ViewGroup 的每个 child x，若 ev 的坐标落在 x 的范围内(否则就 continue，考虑下一个 child)，进一步「如果 x 在链表中(说明 x 消费过 Down 或者 pointerDown 事件)，那么 x 就是要被分发的 child；否则如果 x.dispatchTouchEvent(ev) 返回 true 了，那么 x 同样是要被分发的 child，虽然此时分发已经结束了」。 每个 move 事件 ev 到来时，链表为空的话，显然没有 child 消费过 down 或者 pointerDown，那么直接让 viewGroup 处理 ev 就好了。链表不为空的话，对于链表的每个 TouchTarget t 持有的 child x：如果转成了 cancel 事件，那么向 x 分发一个 cancel 事件，另外把 t 从链表移除(移除的原因是，例如 x 正在 detaching，所以才引发 cancel，那么当然需要把持有 x 的 t 移除)，然后 over，即 move 事件丢失了；没转成 cancel，那就检查 t 的 idBits 中有没有 ev 的任意一个 pointer 的 id，有则把 ev 交给 x，没有则 continue。 四、源码分析 下面粘贴一大段加上了我的理解作为注释的源码，代码真的很长很长，这还仅仅是 ViewGroup#dispatchTouchEvent 这一个方法的代码。关于多点触控的处理逻辑，我也没有彻底明白，sigh。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) &#123; boolean handled = false; // 若当前类上面覆盖了其他window, 且 ev 的flag已标记过滤「覆盖」情况下的事件，则直接跳过 if (onFilterTouchEventForSecurity(ev)) &#123; final int action = ev.getAction(); final int actionMasked = action &amp; MotionEvent.ACTION_MASK; // Handle an initial down. if (actionMasked == MotionEvent.ACTION_DOWN) &#123; // Throw away all previous state when starting a new touch gesture. // The framework may have dropped the up or cancel event for the previous gesture // due to an app switch, ANR, or some other state change. cancelAndClearTouchTargets(ev); //如链表非空, 向其中所有 touchTarget 持有的 child 发 cancel 事件, 并清空链表 resetTouchState(); // reset 此 ViewGroup 的 CANCEL_NEXT_UP 和 DISALLOW_INTERCEPT &#125; // Check for interception. final boolean intercepted; // down 事件, 或者链表不空(意思是曾有 down 事件被某个 child 消费过)时, 考虑拦截 if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) &#123; // 前面的 resetTouchState() 使得 disallowIntercept 必定是 false final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0; if (!disallowIntercept) &#123; intercepted = onInterceptTouchEvent(ev); ev.setAction(action); // restore action in case it was changed &#125; else &#123; intercepted = false; &#125; &#125; else &#123; // 其他情况, 不用把事件交给任何 child, 所以直接赋值 intercepted = true // There are no touch targets and this action is not an initial down // so this view group continues to intercept touches. intercepted = true; &#125; // Check for cancelation. // 此 ViewGroup 有 cancel_next_up 标志, 那么就转成 cancel 事件 final boolean canceled = resetCancelNextUpFlag(this) || actionMasked == MotionEvent.ACTION_CANCEL; // Update list of touch targets for pointer down, if needed. // API 11 以上, split 必为 true final boolean split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != 0; TouchTarget newTouchTarget = null; // 标记 down/pointerDown 被某个 child 消费 boolean alreadyDispatchedToNewTouchTarget = false; if (!canceled &amp;&amp; !intercepted) &#123; // down/pointerDown 才寻求 child 来接盘, 其余类型的事件都是谁消费了 down/pointerDown 就交给谁 if (actionMasked == MotionEvent.ACTION_DOWN || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN) || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123; // 得到 ev 当前 action 所所属的 pointer 的 index final int actionIndex = ev.getActionIndex(); // always 0 for down // idBitsToAssign 包含一个 id, 即 ev 所属 pointer 的 id final int idBitsToAssign = split ? 1 &lt;&lt; ev.getPointerId(actionIndex) : TouchTarget.ALL_POINTER_IDS; // Clean up earlier touch targets for this pointer id in case they // have become out of sync. // down/pointerDown 意味着新的 pointer, 清除一下链表中和新 pointer 的 id 之间的瓜葛 removePointersFromTouchTargets(idBitsToAssign); final int childrenCount = mChildrenCount; if (newTouchTarget == null &amp;&amp; childrenCount != 0) &#123; final float x = ev.getX(actionIndex); final float y = ev.getY(actionIndex); // Find a child that can receive the event. // Scan children from front to back. final ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList(); final boolean customOrder = preorderedList == null &amp;&amp; isChildrenDrawingOrderEnabled(); final View[] children = mChildren; for (int i = childrenCount - 1; i &gt;= 0; i--) &#123; final int childIndex = getAndVerifyPreorderedIndex( childrenCount, i, customOrder); final View child = getAndVerifyPreorderedView( preorderedList, children, childIndex); // 不能接受或者是 ev 坐标不在 child 内部则 continue if (!canViewReceivePointerEvents(child) || !isTransformedTouchPointInView(x, y, child, null)) &#123; ev.setTargetAccessibilityFocus(false); continue; &#125; newTouchTarget = getTouchTarget(child); if (newTouchTarget != null) &#123; // 说明 ev 落在 child 内部且 child 以前响应过 down/pointerDown, 那么由 child 来接盘, 故 break // 如果 ev 是 Down 事件, 列表尚空, 则走不到这里来 // Child is already receiving touch within its bounds. // Give it the new pointer in addition to the ones it is handling. // child 所属 TouchTarget 可能增加一个 pointer id newTouchTarget.pointerIdBits |= idBitsToAssign; break; &#125; resetCancelNextUpFlag(child); // 尝试让 child 消费 ev if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123; // Child wants to receive touch within its bounds. mLastTouchDownTime = ev.getDownTime(); if (preorderedList != null) &#123; // childIndex points into presorted list, find original index for (int j = 0; j &lt; childrenCount; j++) &#123; if (children[childIndex] == mChildren[j]) &#123; mLastTouchDownIndex = j; break; &#125; &#125; &#125; else &#123; mLastTouchDownIndex = childIndex; &#125; mLastTouchDownX = ev.getX(); mLastTouchDownY = ev.getY(); // 消费成功的话, 用 child 新建 TouchTarget, 插到链表头部, newTouchTarget = addTouchTarget(child, idBitsToAssign); alreadyDispatchedToNewTouchTarget = true; break; &#125; // The accessibility focus didn't handle the event, so clear // the flag and do a normal dispatch to all children. ev.setTargetAccessibilityFocus(false); &#125; if (preorderedList != null) preorderedList.clear(); &#125; if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null) &#123; // 没找到接盘的, 且链表不空(意思是有 Down/pointerDown 被 child View 消费过) // Did not find a child to receive the event. // Assign the pointer to the least recently added target. // 强行让链表末尾节点持有的 child 来接盘 newTouchTarget = mFirstTouchTarget; while (newTouchTarget.next != null) &#123; newTouchTarget = newTouchTarget.next; &#125; newTouchTarget.pointerIdBits |= idBitsToAssign; &#125; &#125; &#125; // Dispatch to touch targets. if (mFirstTouchTarget == null) &#123; // child view 压根没有消费过事件 // No touch targets so treat this as an ordinary view. // view group 尝试自行消费 handled = dispatchTransformedTouchEvent(ev, canceled, null, TouchTarget.ALL_POINTER_IDS); &#125; else &#123; // Dispatch to touch targets, excluding the new touch target if we already // dispatched to it. Cancel touch targets if necessary. TouchTarget predecessor = null; TouchTarget target = mFirstTouchTarget; // 遍历链表 while (target != null) &#123; final TouchTarget next = target.next; if (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123; // ev 是 Down 或者 pointer Down 且它被 target 持有的 child 消费了 handled = true; &#125; else &#123; // 对于其他的 Touch target final boolean cancelChild = resetCancelNextUpFlag(target.child) || intercepted; // 发送 cancel 或者 ev 给 child, 或者啥也不做(target 的 idBits 没有 ev 中任意的 pointer 的 id) if (dispatchTransformedTouchEvent(ev, cancelChild, target.child, target.pointerIdBits)) &#123; handled = true; &#125; if (cancelChild) &#123; // 收到 cancel 后,child 就不该再收到事件了, 对应的 TouchTarget 也要移除 if (predecessor == null) &#123; mFirstTouchTarget = next; &#125; else &#123; predecessor.next = next; &#125; target.recycle(); target = next; continue; &#125; &#125; predecessor = target; target = next; &#125; &#125; // Update list of touch targets for pointer up or cancel, if needed. if (canceled || actionMasked == MotionEvent.ACTION_UP || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123; resetTouchState(); // up 事件后,这一串 Touch 事件就结束了, 清理链表等 &#125; else if (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123; // 某个 pointer 没了, 那么清空链表中和这个 pointer 的瓜葛 final int actionIndex = ev.getActionIndex(); final int idBitsToRemove = 1 &lt;&lt; ev.getPointerId(actionIndex); removePointersFromTouchTargets(idBitsToRemove); &#125; &#125; if (!handled &amp;&amp; mInputEventConsistencyVerifier != null) &#123; mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1); &#125; return handled;&#125; 五、滑动冲突分析示例 在《安卓开发艺术探索》一书中讲 touch 事件的最后，讲了滑动冲突的解决方法。所谓滑动冲突最简单的情形就是一个水平滑动的 ScrollView 里面放一个竖直滑动的 listView，两者滑动方向不同，即为滑动冲突。对于这个情形，解决滑动冲突，其实就是在手指上下滑时吧 move 事件给 child（listView）处理，而手指左右滑动时给 parent 处理（ScrollView）即可。下面是书中的一种解决方式，使用上面讲的知识，我们可以透彻的分析这种解决方式。 下面是《安卓开发艺术探索》中提供的其中一种解决方法，我加入了比较详细的注释作为解释，在前面的基础上，这种解决方法的逻辑就很明确了。 1234567891011121314151617181920212223242526272829303132333435class ChildView extends android.view.View &#123; @Override public boolean dispatchTouchEvent(MotionEvent event) &#123; ViewParent parent = getParent(); if (parent != null) &#123; switch (event.getActionMasked()) &#123; case MotionEvent.ACTION_DOWN: // 此次请求其实在 Down 事件后的首个 Move 传至 parent 中时生效 // 若不请求，则将会发生拦截，后续事件都和 child 无缘，所以必须请求别拦截 parent.requestDisallowInterceptTouchEvent(true); break; case MotionEvent.ACTION_MOVE: // 如果期望 parent 来处理，那么解除请求，则下一次 Move 事件时必定拦截，后续事件就全部交给 parent 了。 // 否则，什么也不做，即事件会继续源源不断的交给 child if (parent should handle event)&#123; parent.requestDisallowInterceptTouchEvent(false); &#125; break; default: break; &#125; &#125; return super.dispatchTouchEvent(event); &#125;&#125;public class ParentView extends ViewGroup &#123; @Override public boolean onInterceptTouchEvent(MotionEvent ev) &#123; // Down 时，必然调此方法，此时不应拦截，否则 child 永远无法处理 move 事件 // 其他事件时，若 child 请求不拦截，那么后面的事件都交给 child 了；否则，就会 // 调用此方法，此方法这时返回 True 即表示拦截，那么会发一个 cancel 给 child，后续的事件就和 child 无缘了 return ev.getActionMasked() != MotionEvent.ACTION_DOWN; &#125;&#125; 到此，这篇长长的、并不完美的分析也就结束了。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]},{"title":"Android ImageView ScaleType","slug":"Android ImageView ScaleType","date":"2018-09-26T07:47:46.598Z","updated":"2018-09-26T07:47:46.598Z","comments":true,"path":"2018/09/26/Android ImageView ScaleType/","link":"","permalink":"https://tao93.top/2018/09/26/Android ImageView ScaleType/","excerpt":"","text":"我经常记不住 Android 中 ImageView 的各种 ScaleType 的含义，看文档一时也确定不了，所以干脆把所有 ScaleType 挨个尝试了一遍，然后清楚的记录下来，以备今后查阅。 CEMTER 图片大小不做任何缩放，仅仅把图片中心和视图中心重合。可能图片小于视图框，也可能反过来。 CENTER_CROP 将图片放大或者缩小，直到视图框被布满，且图片的两个边缘或者所有边缘和视图框的对应边缘重合。 CENTER_INSIDE 可能将图片缩小，但是不会放大，目标是把图片放置在视图框之内，不能有露在外面的，图片中心和视图框中心重合。 FIT_CENTER 图片可能放大也可能缩小，目标是让图片在是图框内部，且图片占据最大的可用空间，图片中心和视图框中心重合。 FIT_START 类似于 fit_center 只不过图片中心可能和视图框中心不重合，而是图片处在视图框的上侧或者左侧。 FIT_END 类似于 fit_center 只不过图片中心可能和视图框中心不重合，而是图片处在视图框的下侧或者右侧。 FIT_XY 图片可能会被拉伸，效果是图片的四个边缘和视图框的四个边缘无条件重合。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://tao93.top/tags/Android/"}]}]}