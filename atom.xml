<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu Tao</title>
  
  <subtitle>A little older, a little wiser, but happy to see you.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tao93.top/"/>
  <updated>2019-04-07T12:52:01.273Z</updated>
  <id>http://tao93.top/</id>
  
  <author>
    <name>Liu Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 自定义简易 PickerView</title>
    <link href="http://tao93.top/2019/04/07/Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E6%98%93%20PickerView/"/>
    <id>http://tao93.top/2019/04/07/Android 自定义简易 PickerView/</id>
    <published>2019-04-07T12:28:04.685Z</published>
    <updated>2019-04-07T12:52:01.273Z</updated>
    
    <content type="html"><![CDATA[<p>最近的做的一项 feature 中，需要使用类似于 iOS 的 UIPickerView 的控件，功能是通过滚动 item 来选择其中一个，也就是下图这样的：</p><p><img src="http://tao93.top/images/2019/04/07/1554640301.png" alt=""></p><p>Android SDK 倒是有一个 NumberPicker 和这个非常类似，不过 NumberPicker 设计有点问题，滚动很慢，即使是手指快速滑动，也只能滚动五六个 items，而 Github 上确实有不少优秀的实现，可以和 iOS 的 UIPickerView 非常相似，不过其代码有些复杂，以至于想要速读代码然后自己写一份也比较费时间。所以，我就想到自己基于 Android 的 ListView 写一个简单的自定义 PickerView。</p><p>既然使用 ListView，那么首先需要解决问题有如下几个：</p><ol><li>如何让所有 item 都能通过滑动而滚动到视图中间，从而表示该 item 被选中？</li><li>如果让 ListView 的 idle 状态变为离散的，而非本来的任意滚动状态都可以为 idle？</li><li>怎么获取当前选中的 item 的序号？</li></ol><p>第一个问题比较好办，在 list 的首尾各填充一些空白的 item，这样就能让用户可见的所有 item 都能滑动到正中间。第二个问题，我的做法是，如果手指离开时，ListView 缓慢滑动，那么就在速度低于某个阈值时，让它滑动到恰好将一些 item 显示出来而不要有某个 item 只显示一部分；而如果手指离开时 ListView 快速滑动，那么就在 ListView 刚刚变为 idle 状态时，让它就近滑动到「恰好将一些 item 显示出来」的状态。第三个问题好办，计算一下当前显示的所有 item 的 position 就能知道最中间显示的 item 的 position。</p><p>另外还有一些细节问题：</p><ol><li>需要在中间绘制上两条灰色水平线；</li><li>需要在 canvas 的最上层绘制不是正中间区域绘制半透明矩形，从而让非选中的 item 看起来是灰色的；</li><li>点击非选中的 item 时，需要滚动 ListView 让该 item 滑动到正中间。</li></ol><p>实现的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Adapter interface for &#123;<span class="doctag">@link</span> PickerView&#125; which is like UIPickerView on iOS. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PickerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** get resource id of layout for each item of the picker view. */</span></span><br><span class="line">    <span class="meta">@LayoutRes</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemLayoutResource</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** count of items in the picker view. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** text string for the item at the specified position. */</span></span><br><span class="line">    <span class="function">String <span class="title">getItemAt</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A view to let users to choose one item from a list, like UIPickerView on iOS.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PickerView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** the listView which is used to implement this PickerView */</span></span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line">    <span class="comment">/** the count of visible items, must be odd numbers, the middle item would be the the selected one. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> visibleCount = <span class="number">5</span>; <span class="comment">// 5 items visible by default</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> itemHeight;</span><br><span class="line"></span><br><span class="line">    Paint dividerLinePaint;</span><br><span class="line">    Paint greyLayerPaint;</span><br><span class="line">    <span class="comment">/** adapter for this pickerView */</span></span><br><span class="line">    PickerAdapter adapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerThickness;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerMarginLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerMarginRight;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> velocityThreshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VelocityTracker velocityTracker = VelocityTracker.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, <span class="keyword">final</span> <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        setWillNotDraw(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        itemHeight = getResources().getDimension(R.dimen.picker_view_item_height);</span><br><span class="line">        velocityThreshold = getResources().getDisplayMetrics().density * <span class="number">260</span>;</span><br><span class="line">        </span><br><span class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PickerView);</span><br><span class="line">        dividerThickness = ta.getDimension(R.styleable.PickerView_divider_thickness, getResources().getDisplayMetrics().density);</span><br><span class="line">        dividerMarginLeft = ta.getDimension(R.styleable.PickerView_divider_margin_left, <span class="number">0</span>);</span><br><span class="line">        dividerMarginRight = ta.getDimension(R.styleable.PickerView_divider_margin_right, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> dividerColor = ta.getColor(R.styleable.PickerView_divider_color, Color.LTGRAY);</span><br><span class="line">        ta.recycle();</span><br><span class="line"></span><br><span class="line">        dividerLinePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        dividerLinePaint.setColor(dividerColor);</span><br><span class="line">        dividerLinePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        dividerLinePaint.setStrokeWidth(dividerThickness);</span><br><span class="line">        greyLayerPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        greyLayerPaint.setColor(<span class="number">0xb0ffffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter)</span> </span>&#123;</span><br><span class="line">        setAdapter(adapter, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter, <span class="keyword">int</span> initPos)</span> </span>&#123;</span><br><span class="line">        setAdapter(adapter, <span class="number">0</span>, initPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set adapter and other two parameters.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visibleCount count of visible items in the picker, must be odd numbers. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initPos position of the initially selected item, 0 means the first item would be selected.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter, <span class="keyword">int</span> visibleCount, <span class="keyword">int</span> initPos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.getItemCount() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visibleCount &gt; <span class="number">0</span> &amp;&amp; visibleCount % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.visibleCount = visibleCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line"></span><br><span class="line">        listView = <span class="keyword">new</span> ListView(getContext());</span><br><span class="line">        addView(listView, <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (<span class="keyword">int</span>) (itemHeight * <span class="keyword">this</span>.visibleCount)));</span><br><span class="line">        listView.setOverScrollMode(View.OVER_SCROLL_NEVER);  <span class="comment">// remove over scroll effects.</span></span><br><span class="line">        listView.setVerticalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">        listView.setDivider(<span class="keyword">null</span>);  <span class="comment">// remove listView's dividers</span></span><br><span class="line"></span><br><span class="line">        listView.setOnScrollListener(<span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">                    <span class="comment">// scroll to nearest place that fit the selection properly.</span></span><br><span class="line">                    scrollToNearest();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> InnerAdapter());</span><br><span class="line">        <span class="keyword">if</span> (initPos &gt; <span class="number">0</span> &amp;&amp; initPos &lt; adapter.getItemCount()) &#123;</span><br><span class="line">            listView.setSelection(initPos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the position of the currently selected item, starting from 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSelectedPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listView.getFirstVisiblePosition();</span><br><span class="line">        View firstChild = listView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(firstChild.getTop()) &lt; firstChild.getHeight() / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> listView.getFirstVisiblePosition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> listView.getFirstVisiblePosition() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> superResult = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        </span><br><span class="line">        velocityTracker.addMovement(ev);</span><br><span class="line">        <span class="keyword">if</span> (ev.getActionMasked() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">float</span> yVelocity = velocityTracker.getYVelocity();</span><br><span class="line">            <span class="comment">// scroll to nearest proper place directly if the fling is very slow</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(yVelocity) &lt; velocityThreshold) &#123;</span><br><span class="line">                scrollToNearest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> superResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** scroll the listView to fit the nearest proper position */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToNearest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        View firstChild = listView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(firstChild.getTop()) &gt; Math.abs(firstChild.getBottom())) &#123;</span><br><span class="line">            listView.smoothScrollToPosition(listView.getLastVisiblePosition());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            listView.smoothScrollToPosition(listView.getFirstVisiblePosition());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        velocityTracker.recycle();</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw(canvas);</span><br><span class="line">        <span class="comment">//canvas.drawRect(0, itemHeight * 2, getWidth(), itemHeight * 3, dividerLinePaint);</span></span><br><span class="line">        canvas.drawLine(dividerMarginLeft, itemHeight * <span class="number">2</span> - dividerThickness, </span><br><span class="line">                getWidth() - dividerMarginRight, itemHeight * <span class="number">2</span> - dividerThickness, dividerLinePaint);</span><br><span class="line">        canvas.drawLine(dividerMarginLeft, itemHeight * <span class="number">3</span> + dividerThickness, </span><br><span class="line">                getWidth() - dividerMarginRight, itemHeight * <span class="number">3</span> + dividerThickness, dividerLinePaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw two transparent rectangles to make not selected items looks grey</span></span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), itemHeight * <span class="number">2</span> - dividerThickness, greyLayerPaint);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, getHeight() - <span class="number">2</span> * itemHeight + dividerThickness, getWidth(), getBottom(), greyLayerPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the adapter for the listView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// we would add visibleCount - 1 empty strings to the list View, so the count should plus visibleCount - 1.</span></span><br><span class="line">            <span class="keyword">return</span> adapter.getItemCount() + visibleCount - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// there're visibleCount - 1 items with empty text, they would be equally put at the starting and ending.</span></span><br><span class="line">            <span class="keyword">if</span> (position &lt; visibleCount / <span class="number">2</span> || position &gt;= getCount() - visibleCount / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> adapter.getItemAt(position - visibleCount / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> position;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                convertView = View.inflate(getContext(), adapter.getItemLayoutResource(), <span class="keyword">null</span>);</span><br><span class="line">                convertView.setBackgroundColor(Color.WHITE); <span class="comment">// to avoid the default touch effect of listView item</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// select a item when it's clicked by users</span></span><br><span class="line">            convertView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> cur = getSelectedPosition() + visibleCount / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span> (position &gt; cur) &#123;</span><br><span class="line">                        listView.smoothScrollToPosition(position + visibleCount / <span class="number">2</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt; cur) &#123;</span><br><span class="line">                        listView.smoothScrollToPosition(position - visibleCount / <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            TextView textView = convertView.findViewById(R.id.picker_text_view);</span><br><span class="line">            textView.setText((String) getItem(position));</span><br><span class="line">            <span class="keyword">return</span> convertView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些小细节。比如 ListView 的高度需要正好是 itemView 的奇数倍，这样才能恰好只显示一些 item，并且最中间显示其中一个 item。再比如为了避免 ListView 自带的点击 item 时的视觉效果，需要给 itemView 设置纯白色背景。</p><p>至此，一个简易的 PickerView 就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的做的一项 feature 中，需要使用类似于 iOS 的 UIPickerView 的控件，功能是通过滚动 item 来选择其中一个，也就是下图这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2019/04/07/15546
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一个不一样的 ANR</title>
    <link href="http://tao93.top/2019/01/18/%E4%B8%80%E4%B8%AA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%20ANR/"/>
    <id>http://tao93.top/2019/01/18/一个不一样的 ANR/</id>
    <published>2019-01-18T13:04:23.787Z</published>
    <updated>2019-01-18T13:04:23.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个 ANR 问题，拿到 traces 文件后，显示主线程的堆栈是下面这样的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.MessageQueue</span><span class="selector-class">.nativePollOnce</span>(Native method)</span><br><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.MessageQueue</span><span class="selector-class">.next</span>(MessageQueue<span class="selector-class">.java</span>:<span class="number">323</span>)</span><br><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.Looper</span><span class="selector-class">.loop</span>(Looper<span class="selector-class">.java</span>:<span class="number">135</span>)</span><br><span class="line">at android<span class="selector-class">.app</span><span class="selector-class">.ActivityThread</span><span class="selector-class">.main</span>(ActivityThread<span class="selector-class">.java</span>:<span class="number">5417</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>!(Native method)</span><br><span class="line">at com<span class="selector-class">.android</span><span class="selector-class">.internal</span><span class="selector-class">.os</span><span class="selector-class">.ZygoteInit</span><span class="variable">$MethodAndArgsCaller</span>.run(ZygoteInit<span class="selector-class">.java</span>:<span class="number">726</span>)</span><br><span class="line">at com<span class="selector-class">.android</span><span class="selector-class">.internal</span><span class="selector-class">.os</span><span class="selector-class">.ZygoteInit</span><span class="selector-class">.main</span>(ZygoteInit<span class="selector-class">.java</span>:<span class="number">616</span>)</span><br></pre></td></tr></table></figure><p>这样一段堆栈，在很多情况下表明主线程是正常的，即处在等待区下一条主线程消息的过程中，而不是陷在某个耗时特别长的消息中。</p><p>经过反复测试，最后确认这个 ANR 和设置了 Default UncaughtExceptionHandler 有关，问题代码可以简化成下面的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(<span class="keyword">final</span> Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, Thread.currentThread().toString());</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hello world"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="comment">//throw new RuntimeException("hello world!!");</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码的表现是，如果只让第 26 行抛出异常，那么一切看起来都正常，但是如果让第 29 行抛出异常，那么应用直接就无响应了。</p><p>经过一番查找与验证，我发现原因大致是，当一个 Java 线程抛出了未捕获的异常时，JVM 先会调用到 UncaughtExceptionHandler，然后再会把此线程停止掉。所以这段代码中，如果主线程抛出异常，那么第 6 行的方法结束后，主线程就会被 JVM 给停止掉，既然主线程都停止掉了，那自然就无响应了，也就会发生 ANR 了。</p><p>事实上，一般我们设置自定义 UncaughtExceptionHandler 时，都会在自定义的 uncaughtException 方法最后再调用一遍被我们顶替掉的系统默认的 UncaughtExceptionHandler，以便把应用 kill 掉，而这个例子，充分的显示了，当未捕获异常发生后，就算赖着不 kill 掉应用也是不行的，因为可能主线程都已经被停掉了。</p><p>关于 JVM 先调用 UncaughtExceptionHandler 然后把发生未捕获异常的线程停止掉的说法，见于 <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-11.html#jls-11.3" target="_blank" rel="noopener">Java Language Specification 11.3</a>，如下所示的片段：</p><p><img src="http://tao93.top/images/2019/01/18/1547816082.png" alt=""></p><p>那么主线程被停止掉，是个什么样的状态呢，我用下面的代码，把主线程的状态给输出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(<span class="keyword">final</span> Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, Thread.currentThread().toString());</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> Thread mainThread = Thread.currentThread();</span><br><span class="line">                Log.i(<span class="string">"&lt;&lt;&lt;"</span>, mainThread.getState().toString());</span><br><span class="line">                <span class="keyword">if</span> (thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                Log.i(<span class="string">"&lt;&lt;&lt;"</span>, mainThread.getState().toString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    thread.start();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hello world!!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 24 行和第 35 行一共会 4 此输出主线程的状态，结果如下面所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:24.308</span> 14533 14533 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">RUNNABLE</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:25.309</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:26.310</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:27.311</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br></pre></td></tr></table></figure><p>从上面代码可知，主线程从 RUNNABLE 状态变成了 NEW 状态，为什么是 NEW 状态，我也不清楚，也许将来对 JVM 了解更多了，会清除吧。</p><p>回到这个 ANR 来，这个例子说明，我们如果使用自定义的 UncaughtExceptionHandler，记得要把应用 kill 掉，还有 default 的 UncaughtExceptionHandler 是全局公用的，很容易会出现被顶替 (覆盖)，所以切记别随意调用，免得出现意料之外的问题。</p><p>修复这样的 ANR，分成两部分，第一部分是先移除或者修改不恰当的设置 UncaughtExceptionHandler 的代码，先消除 ANR，然后还需要把引发 ANR 的另一个原因，也就是未捕获的异常给修复掉，不然应用不会 ANR 了但是会 Crash。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近碰到一个 ANR 问题，拿到 traces 文件后，显示主线程的堆栈是下面这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 绘制圆形图片</title>
    <link href="http://tao93.top/2019/01/12/Android%20%E7%BB%98%E5%88%B6%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/"/>
    <id>http://tao93.top/2019/01/12/Android 绘制圆形图片/</id>
    <published>2019-01-12T10:38:32.256Z</published>
    <updated>2019-01-12T10:38:33.385Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，以免忘记，以备使用。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    Shader shader;</span><br><span class="line">    Matrix mat = <span class="keyword">new</span> Matrix();</span><br><span class="line">    Bitmap bitmap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a bitmap from the image resource what we want to draw</span></span><br><span class="line">        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon);</span><br><span class="line">        <span class="comment">// a bitmap shader, would be set into paint, here we use repeat tile mode, but since we'll</span></span><br><span class="line">        <span class="comment">// scale to make the bitmap fill the canvas just right, so there would be no repeat.</span></span><br><span class="line">        shader = <span class="keyword">new</span> BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);</span><br><span class="line">        <span class="comment">// after this, the paint would contains this bitmap.</span></span><br><span class="line">        paint.setShader(shader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        <span class="comment">// scale to make bitmap fill the canvas</span></span><br><span class="line">        mat.setScale((<span class="keyword">float</span>)getWidth() / bitmap.getWidth(), (<span class="keyword">float</span>)getHeight() / bitmap.getHeight());</span><br><span class="line">        shader.setLocalMatrix(mat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// draw a circle with the paint.</span></span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView2</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line">    <span class="keyword">private</span> Drawable mDrawable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line">        mDrawable = getResources().getDrawable(R.drawable.dossier_icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        <span class="comment">// make the path to be a circle whose diameter is width of the view.</span></span><br><span class="line">        mPath.reset();</span><br><span class="line">        mPath.addCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        <span class="comment">// drawable must setBounds before draw</span></span><br><span class="line">        mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// save current (default) clip</span></span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="comment">// make the clip to be the circle </span></span><br><span class="line">        canvas.clipPath(mPath);</span><br><span class="line">        <span class="comment">// draw the bitmapDrawable</span></span><br><span class="line">        mDrawable.draw(canvas);</span><br><span class="line">        <span class="comment">// restore default clip</span></span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView3</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    Paint mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    Paint whitePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap;</span><br><span class="line">    <span class="keyword">private</span> Matrix mat = <span class="keyword">new</span> Matrix();</span><br><span class="line">    <span class="keyword">private</span> Xfermode mXfermode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        mXfermode = <span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</span><br><span class="line">        whitePaint.setColor(Color.RED);</span><br><span class="line">        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        mat.setScale((<span class="keyword">float</span>)getWidth() / bitmap.getWidth(), (<span class="keyword">float</span>)getHeight() / bitmap.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// save current layer and create a new layer</span></span><br><span class="line">        <span class="keyword">int</span> count = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight(), mPaint);</span><br><span class="line">        <span class="comment">// draw a white circle in the new layer</span></span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, whitePaint);</span><br><span class="line">        <span class="comment">// this xfer mode is src_in type, which could make image to be drawn in only previous white circle area.</span></span><br><span class="line">        mPaint.setXfermode(mXfermode);</span><br><span class="line">        <span class="comment">// draw bitmap in new layer</span></span><br><span class="line">        canvas.drawBitmap(bitmap, mat, mPaint);</span><br><span class="line">        <span class="comment">// this is necessary, or the influence would last</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// back to previous layer.</span></span><br><span class="line">        canvas.restoreToCount(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个方法中，方法二最简便易用，方法三最不推荐，因为新增一个 canvas layer 是开销很大的，这一点 saveLayerAlpha 方法的注释有说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，以免忘记，以备使用。&lt;/p&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>给三星 tablet SM-T830 刷机[续]</title>
    <link href="http://tao93.top/2019/01/01/%E7%BB%99%E4%B8%89%E6%98%9F%20tablet%20SM-T830%20%E5%88%B7%E6%9C%BA%5B%E7%BB%AD%5D/"/>
    <id>http://tao93.top/2019/01/01/给三星 tablet SM-T830 刷机[续]/</id>
    <published>2019-01-01T13:20:54.004Z</published>
    <updated>2019-01-01T14:42:54.038Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是，从 xda 上面<a href="https://forum.xda-developers.com/galaxy-tab-s4/help/lineage-development-t3852509" target="_blank" rel="noopener">这个帖子</a> 看到，有人在三星 Tab S4 平板上面刷了个类原生 Android 的系统，他表示用起来挺好，只不过 4 个扬声器只有底部两个可以发声。看到这个我心里就痒痒，因为三星的官方 rom 我并不喜欢，里面有三星的 app store，还有三星的一套账户系统，调试到系统代码的时候，行号也完全对不上(Pixel是可以对上行号的)，所以我也想给手里的 Tab S4 平板刷一个类原生系统。</p><p>然后我就在 xda 上面查了查，发现我应该需要先刷入一个 TWRP recovery，然后再使用 TWRP 刷入类原生系统。另外我也注意到，之所以能刷并没有适配 Tab S4 的 ROM，得归功于 Project Trable。谷歌提出 Project Trable 是为了让 Android 系统的开发和底层驱动的开发分离开，两者只要满足协议，就可以组合在一起，这样就可减小 Android 系统升级时厂商开发驱动的工作，从而让设备更快升级 Android 系统。Project Trable 也使得那些符合要求的设备，可以刷大量满足 Project Trable 要求的 General System Image (GSI)。Tab S4 就是符合 Project Trable 要求的，所以我就是要给它刷 GSI。</p><p>回到前面说的 TWRP 的事情，TWRP 官方并没有适配 Tab S4 的版本，不过我在<a href="https://forum.xda-developers.com/galaxy-tab-s4/development/recovery-twrp-3-2-3-1-galaxy-tab-s4-t3843211" target="_blank" rel="noopener">这个帖子</a>里面发现了用于 Tab S4 的非官方 TWRP，并写出了步骤：</p><ol><li>确认 OEM 已解锁；</li><li>设备进入 download 模式；</li><li>使用 odin 的 AP slot 来刷入 TWRP 压缩包，记得要取消勾选「Auto Reboot」;</li><li>关机，然后再进入 TWRP；</li><li>进入 TWRP，然后刷入 Forced encryption disabler patch，format DATA 一下；</li><li>进入 TWRP，刷入 Magisk 压缩包，于是设备就 root 了。</li></ol><p>步骤其实很简单，不过我在这里折腾了 3 天。我先按照上面的步骤来，结果发现进 TWRP 后就无法访问 internal storage，自然就刷不了 Forced encryption disabler patch。我试了非常多想法，比如重刷三星官方固件，刷更旧的官方固件(原因是这个帖子里面工具发出来时，官方固件还更旧一些，而我看到这帖子时已经更新到比较新了)，刷国行的官方固件，都不行，其中刷更低版本的固件还有限制即 BootLoader 不能降级，所以其实官方固件降不了多少级。我还看到了<a href="https://www.thecustomdroid.com/install-twrp-samsung-galaxy-tab-s4-root-guide/" target="_blank" rel="noopener">这种帖子</a>，里面告诉我说，需要先刷一个 DM-Verity patched boot，我也试了，发现刷完这个 DM-Verity patched boot 后直接无法进入系统，报 Verification Failed 错误，必须重置设备才行。翻遍 xda 那个 40 几页的帖子后，我发现其实这个帖子就是抄 xda 那个帖子，只不过抄的时候，xda 帖子上面的步骤确实第一步是刷 DM-Verity patched boot，不过后来 xda 帖子步骤更新了，成了现在这样的。</p><p>不是无法访问 internal storage 嘛，后来我买了个 micro SD 卡，插进设备，在 TWRP 中这个 micro SD 是可以访问的，所以我就可以继续刷入 Forced encryption disabler patch 并 format DATA，然后我就 boot loop 了，真气人。即使我再刷入 GSI，依然是 boot loop。</p><p>后来那个 xda 帖子的作者回复我说「全程没看到我刷 Magisk 的描述，但 Magisk 是必要的，否则会 boot loop」。我确实没刷 Magisk，因为我并没有像 root，我只想搞个 TWRP 然后刷 GSI 而已。于是我就刷了 Magisk，发现不在 boot loop 了，然后再<a href="https://github.com/phhusson/treble_experimentations/releases/tag/v108" target="_blank" rel="noopener">这里</a> 下载了 system-arm64-aonly-gapps-su.img.xz 这个 GSI 并刷入，这次终于成功了，进入了一个类似 AOSP user-debug 类型的 aosp 系统，很简陋，连 Contact，Settings，等这些应用都是 aosp 版本的，和正常的很不一样，相机应用则直接打开就 crash。顺便记录一下 TWRP 刷 GSI 的方法，很简单：</p><ol><li>进入 TWRP，wipe 一下；</li><li>进入 install，切换到 install image 模式，找到 GSI，flash；</li><li>重启</li></ol><p>关键是，这个 aosp 系统有些 bug，最受不了的 bug 是，锁屏、旋转时屏幕都会变形一下，截屏得到的图片也是会变形一下。这和我最初看到的 xda 帖子里面那人说的只是扬声器没有全部发声差远了。所以我就想找更好些的 GSI。问了那个人，结果没回复我。</p><p>最后找到了 <a href="https://forum.xda-developers.com/project-treble/trebleenabled-device-development/9-0-pixelexperience-p-t3833294" target="_blank" rel="noopener">Pixel Experience</a> ，虽然依然有一些 bug，不过感觉还可以。</p><p>放几张截图：</p><p><img src="http://tao93.top/images/2019/01/01/1546351524.png" alt=""></p><p>最后还有一点，这次我是用 Virtual Box 中的 Win 10 虚拟机刷的，让 VirtualBox 中的 Win 10 虚拟机连接上 Android 设备，需要给 VirtualBox 安装 extension pack，在 Win 10 虚拟机中安装 guest additions，然后还需要在此 win 10 虚拟机的设置中添加对应的 USB filter (需要设备连接上后才能添加)，并按照 USB 类型勾选 USB 2.0 还是 3.0，如下图所示：</p><p><img src="http://tao93.top/images/2019/01/01/1546352547.png" alt=""></p><p>最后，在设备连接上电脑后，把 win 10 的窗口放在最前面，然后再 macOS 的菜单栏勾选对应的 USB device，勾选的话，就是 win 10 虚拟机连接词 USB 设备，否则驾驶 macOS 连接此 USB device，如下图：</p><p><img src="http://tao93.top/images/2019/01/01/1546353760.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事情的起因是，从 xda 上面&lt;a href=&quot;https://forum.xda-developers.com/galaxy-tab-s4/help/lineage-development-t3852509&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="GSI" scheme="http://tao93.top/tags/GSI/"/>
    
      <category term="Project Treble" scheme="http://tao93.top/tags/Project-Treble/"/>
    
  </entry>
  
  <entry>
    <title>Android Toast 两个 Crash</title>
    <link href="http://tao93.top/2018/12/22/Android%20Toast%20%E4%B8%A4%E4%B8%AA%20Crash/"/>
    <id>http://tao93.top/2018/12/22/Android Toast 两个 Crash/</id>
    <published>2018-12-22T15:05:48.751Z</published>
    <updated>2019-01-11T14:50:00.540Z</updated>
    
    <content type="html"><![CDATA[<p>Toast 是 Android 系统一种非常简单的提示性小工具，最近我尝试修复 Toast 相关的两种 Crash，所以把相关的原委和过程记录了下来。先来看一下第一种 Crash 的 log:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy<span class="meta">@e</span>2815e is not valid; is your activity running?</span><br><span class="line">        at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">679</span>)</span><br><span class="line">        at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:<span class="number">342</span>)</span><br><span class="line">        at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">93</span>)</span><br><span class="line">        at android.widget.Toast$TN.handleShow(Toast.java:<span class="number">459</span>)</span><br><span class="line">        at android.widget.Toast$TN$<span class="number">2</span>.handleMessage(Toast.java:<span class="number">342</span>)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:<span class="number">154</span>)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6119</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br></pre></td></tr></table></figure><p>上面的 stack trace 中的代码全部是关于 UI 线程中处理一个消息的，这个消息需要做的是把 Toast 需要显示的 view 添加到 WindowManager 中，从而可以显示出来。这样的 crash 是没有任何 app 代码牵涉其中的，所以无法确定是 app 何处的代码导致的这个 crash。我们先来看看 Toast 显示的大致过程。</p><p>首先是通过 <code>Toast#makeText</code> 方法或者 <code>Toast</code> 构造函数创建 Toast 对象，然后就可以调用它的 show 方法了。不过此方法是异步的，它仅仅是将该 toast 添加到一个队列中，等待显示，即此方法不等 toast 真正显示就已经返回了，而 toast 的显示需要用一个新的 UI 线程消息中的代码来显示出来。</p><p><code>Toast#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show the view for the specified duration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mNextView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"setView must have been called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    INotificationManager service = getService();</span><br><span class="line">    String pkg = mContext.getOpPackageName();</span><br><span class="line">    TN tn = mTN;</span><br><span class="line">    tn.mNextView = mNextView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        service.enqueueToast(pkg, tn, mDuration);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// Empty</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 15 行是一个跨进程调用了 NotificationServiceManager 的方法，而作为参数的 TN 对象是实现了 <a href="https://developer.android.com/reference/android/os/IInterface" target="_blank" rel="noopener">IInterface</a> 的，所以可以通过 Binder 传给其他进程。Toast 真正的显示，需要等 NotificationServiceManager 回调回来，这个回调也就是调用 Toast 内部类 TN 的 show 方法。而从 api 25 开始，此方法还会将 NotificationServiceManager 产生的一个 window token 传递过来。</p><p>api 25 中的 <code>TN#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * schedule handleShow into the right thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    mHandler.obtainMessage(<span class="number">0</span>, windowToken).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api 24 中的 <code>TN#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * schedule handleShow into the right thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    mHandler.post(mShow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此 <code>TN#show</code> 方法是被远程调用的，所以实际会运行在 app 的 Binder 线程池的线程中，所以此方法向主线程发了一个消息，这个消息才是真正让 toast 显示的地方。不同的是 api 25 的代码还会把 window token 也传递到消息中。处理这个消息的代码，会调用 <code>TN#handleShow</code> 方法，这个 <code>handleShow</code> 是下面这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"HANDLE SHOW: "</span> + <span class="keyword">this</span> + <span class="string">" mView="</span> + mView</span><br><span class="line">            + <span class="string">" mNextView="</span> + mNextView);</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        <span class="comment">// remove the old view if necessary</span></span><br><span class="line">        handleHide();</span><br><span class="line">        mView = mNextView;</span><br><span class="line">        Context context = mView.getContext().getApplicationContext();</span><br><span class="line">        String packageName = mView.getContext().getOpPackageName();</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">            context = mView.getContext();</span><br><span class="line">        &#125;</span><br><span class="line">        mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        <span class="comment">// We can resolve the Gravity here by using the Locale for getting</span></span><br><span class="line">        <span class="comment">// the layout direction</span></span><br><span class="line">        <span class="keyword">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</span><br><span class="line">        mParams.gravity = gravity;</span><br><span class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</span><br><span class="line">            mParams.horizontalWeight = <span class="number">1.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</span><br><span class="line">            mParams.verticalWeight = <span class="number">1.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mParams.x = mX;</span><br><span class="line">        mParams.y = mY;</span><br><span class="line">        mParams.verticalMargin = mVerticalMargin;</span><br><span class="line">        mParams.horizontalMargin = mHorizontalMargin;</span><br><span class="line">        mParams.packageName = packageName;</span><br><span class="line">        mParams.removeTimeoutMilliseconds = mDuration ==</span><br><span class="line">            Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</span><br><span class="line">        <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mWM.removeView(mView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        mWM.addView(mView, mParams);</span><br><span class="line">        trySendAccessibilityEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 37 行，才是真正把 toast 的 view 添加到 WindowManager，也就是让 toast 显示出来，至此理了一遍 toast 显示的流程。而最前面的 crash log 表明，crash 是发生在 <code>ViewRootImpl#setView</code> 方法中的，并且提示 window token invalid。这其实就是提示 从 NotificationManagerService 传过来给 TN 的 token 对象失效了。而失效的原因，其实得从 NotificationManagerService 中找。</p><p><code>NotificationManagerService#showNextToastLocked</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNextToastLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Show pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            record.callback.show(record.token);</span><br><span class="line">            scheduleTimeoutLocked(record);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Object died trying to show notification "</span> + record.callback</span><br><span class="line">                    + <span class="string">" in package "</span> + record.pkg);</span><br><span class="line">            <span class="comment">// remove it from the list and let the process die</span></span><br><span class="line">            <span class="keyword">int</span> index = mToastQueue.indexOf(record);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mToastQueue.remove(index);</span><br><span class="line">            &#125;</span><br><span class="line">            keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">            <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                record = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法就是 NotificationManagerService 发起显示下一个 toast 的代码，注意到第 6 行调用的 show 方法，其实就是远程调用 TN 对象的 show 方法，而第 6 行的 callback 其实就是 TN 对象所对应的远程代理对象。紧接着第 7 行调用的 scheduleTimeoutLocked 方法，其实设定了一个失效限制，使得第 6 行传递的 token 会在几秒内失效。</p><p><code>scheduleTimeoutLocked</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleTimeoutLocked</span><span class="params">(ToastRecord r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mHandler.removeCallbacksAndMessages(r);</span><br><span class="line">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</span><br><span class="line">    <span class="keyword">long</span> delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</span><br><span class="line">    mHandler.sendMessageDelayed(m, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码发送一个 delayed 消息(截止 api 27，此 delay 时长是 2 秒或 3.5 秒），处理上面方法发送的消息的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> MESSAGE_TIMEOUT:</span><br><span class="line">            handleTimeout((ToastRecord)msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面被调用的 <code>handleTimeOut</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTimeout</span><span class="params">(ToastRecord record)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Timeout pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</span><br><span class="line">    <span class="keyword">synchronized</span> (mToastQueue) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = indexOfToastLocked(record.pkg, record.callback);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cancelToastLocked(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面第 7 行被调用的 <code>cancelToastLocked</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelToastLocked</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(index);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        record.callback.hide();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Object died trying to hide notification "</span> + record.callback</span><br><span class="line">                + <span class="string">" in package "</span> + record.pkg);</span><br><span class="line">        <span class="comment">// don't worry about this, we're about to remove it from</span></span><br><span class="line">        <span class="comment">// the list anyway</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ToastRecord lastToast = mToastQueue.remove(index);</span><br><span class="line">    mWindowManagerInternal.removeWindowToken(lastToast.token, <span class="keyword">true</span>, DEFAULT_DISPLAY);</span><br><span class="line"></span><br><span class="line">    keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">    <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Show the next one. If the callback fails, this will remove</span></span><br><span class="line">        <span class="comment">// it from the list, so don't assume that the list hasn't changed</span></span><br><span class="line">        <span class="comment">// after this point.</span></span><br><span class="line">        showNextToastLocked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面第 13 行就是使 window token 失效的代码。至此可知，NotificationServiceManager 远程调用 <code>TN#show</code> 方法后几秒内，此 token 就会失效，在这几秒内如果 toast 没有真正添加到 WindowManager，那么等添加的时候，就会出现 BadTokenException，应用就会 crash。而阻碍 toast 的 view 被添加到 WindowManager，只有 UI 线程的忙碌，也就是如果 UI 线程已经在执行或者马上要执行的其他消息比较耗时，那么 toast 的 view 就无法及时添加。</p><p>不过，Google 也意识到这种 UI 线程 block 不到 ANR 时长就 crash 的现象了，所以在 api 26 中，此 BadTokenException 直接被捕获了，也就是下面的第 42 行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Since the notification manager service cancels the token right</span></span><br><span class="line">        <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></span><br><span class="line">        <span class="comment">// race and we may attempt to add a window after the token has been</span></span><br><span class="line">        <span class="comment">// invalidated. Let us hedge against that.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mWM.addView(mView, mParams);</span><br><span class="line">            trySendAccessibilityEvent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以此 crash，仅仅发生在 api 25 的系统中，要修复这个问题，可以参考 github 上的 <a href="https://github.com/drakeet/ToastCompat" target="_blank" rel="noopener">ToastCompat</a> 中的方法。</p><p>再来看一下另一种 Crash log：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: View android.widget.LinearLayout&#123;41a97eb8 V.E..... ......ID 0,0-540,105 #7f0b020d app:id/toast_layout_root&#125; has already been added to the window manager.</span><br><span class="line">   at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:<span class="number">223</span>)</span><br><span class="line">   at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">69</span>)</span><br><span class="line">   at android.widget.Toast$TN.handleShow(Toast.java:<span class="number">402</span>)</span><br><span class="line">   at android.widget.Toast$TN$<span class="number">1</span>.run(Toast.java:<span class="number">310</span>)</span><br><span class="line">   at android.os.Handler.handleCallback(Handler.java:<span class="number">730</span>)</span><br><span class="line">   at android.os.Handler.dispatchMessage(Handler.java:<span class="number">92</span>)</span><br><span class="line">   at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</span><br><span class="line">   at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5136</span>)</span><br><span class="line">   at java.lang.reflect.Method.invokeNative(Method.java)</span><br><span class="line">   at java.lang.reflect.Method.invoke(Method.java:<span class="number">525</span>)</span><br><span class="line">   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">737</span>)</span><br><span class="line">   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">553</span>)</span><br><span class="line">   at dalvik.system.NativeStart.main(NativeStart.java)</span><br></pre></td></tr></table></figure><p>这个 crash 原因是同一个 view 被重复添加到 WindowManager 导致的。抛出异常的地方是 <code>WindowManagerGlobal#addView</code> 方法，也就是下面的代码第 15 行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">            Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (display == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"display must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDyingViews.contains(view)) &#123;</span><br><span class="line">                    <span class="comment">// Don't wait for MSG_DIE to make it's way through root's queue.</span></span><br><span class="line">                    mRoots.get(index).doDie();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view</span><br><span class="line">                            + <span class="string">" has already been added to the window manager."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// The previous removeView() had not completed executing. Now it has.</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>从上面代码可知，第 10 行 index 非负，且 mDyingViews 包含需添加的 view，则会抛出此异常。第 10 行 index 非负的原因，是 mViews 包含此 view，如下面代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findViewLocked</span><span class="params">(View view, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = mViews.indexOf(view);</span><br><span class="line">    <span class="keyword">if</span> (required &amp;&amp; index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"View="</span> + view + <span class="string">" not attached to window manager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，也就是当需要添加一个 view 时，如果此 view 在 mViews 中却不在 mDyingViews 中，那就会抛出异常。现在我们看一下 <code>Toast#TN#handleShow</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mWM.removeView(mView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Since the notification manager service cancels the token right</span></span><br><span class="line">        <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></span><br><span class="line">        <span class="comment">// race and we may attempt to add a window after the token has been</span></span><br><span class="line">        <span class="comment">// invalidated. Let us hedge against that.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mWM.addView(mView, mParams);</span><br><span class="line">            trySendAccessibilityEvent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码显示，实际上，Toast 被现实时，其实会先把 view 从 WindowManager 移除（注意一下移除的前提是 view 的 parent 不空），然后再尝试添加。我们看看 WindowManagerGlobal#removeView 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">true</span>);</span><br><span class="line">        View curView = mRoots.get(index).getView();</span><br><span class="line">        removeViewLocked(index, immediate);</span><br><span class="line">        <span class="keyword">if</span> (curView == view) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Calling with view "</span> + view</span><br><span class="line">                + <span class="string">" but the ViewAncestor is attached to "</span> + curView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意上面方法有个 immediate 参数，不过从 <code>Toast#TN#handleShow</code> 调用过来时，这个参数会是 false。现在假设 view 包含在 mViews 中，那么上面第 7 行 index 将非负，上面第 9 行调用了 removeViewLocked 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeViewLocked</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">    ViewRootImpl root = mRoots.get(index);</span><br><span class="line">    View view = root.getView();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        InputMethodManager imm = InputMethodManager.getInstance();</span><br><span class="line">        <span class="keyword">if</span> (imm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            imm.windowDismissed(mViews.get(index).getWindowToken());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> deferred = root.die(immediate);</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.assignParent(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">            mDyingViews.add(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码 第 11 行因为 immediate 为 false，所以返回的 deferred 是 true，那么第 15 行就会把 view 添加到 mDyingViews。</p><p>至此总结一下，只要 view 的 parent 不空，那么它就会尝试被移除，如果 mView是中有次 view，则尝试移除的结果就是 mDyingViews 也会包含此 view，则 crash 不会发生。</p><p>经过分析系统代码，我发现给 view 设置 parent 是在 ViewRootImpl 中的 setView 方法调用 <code>view.assignParent(this)</code> 做到的，而 ViewRootImpl #setView 是在 WindowManagerGlobal#addView 调用的。置空 parent 则是在 WindowManagerGlobal#removeViewLocked 做的，而从 mViews 移除 view 是在 WindowManagerGlobal#doRemoveView 做的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doRemoveView</span><span class="params">(ViewRootImpl root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = mRoots.indexOf(root);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mRoots.remove(index);</span><br><span class="line">            mParams.remove(index);</span><br><span class="line">            <span class="keyword">final</span> View view = mViews.remove(index);</span><br><span class="line">            mDyingViews.remove(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ThreadedRenderer.sTrimForeground &amp;&amp; ThreadedRenderer.isAvailable()) &#123;</span><br><span class="line">        doTrimForeground();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这些方法都是在主线程调用的，所以可以肯定，在 addView 时，mView 包含 view 时，则此 view 的 parent不空。而 mView 不包含 view 时，它的 parent 为空。看起来似乎无懈可击，系统代码确保了 toast 的显示不会出现重复添加 view 导致的 IllegalStateException。但是明明 crash 就是发生了，分析堆栈也可知就是出现了 view 在 mViews 中但却不在 mDyingViews 中的情况。</p><p>经过分析，我可能找到了一种原因。先来看 WindowManagerGlobal#addView 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">            Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        ViewRootImpl root;</span><br><span class="line">        View panelParentView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDyingViews.contains(view)) &#123;</span><br><span class="line">                    <span class="comment">// Don't wait for MSG_DIE to make it's way through root's queue.</span></span><br><span class="line">                    mRoots.get(index).doDie();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view</span><br><span class="line">                            + <span class="string">" has already been added to the window manager."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// The previous removeView() had not completed executing. Now it has.</span></span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</span><br><span class="line"></span><br><span class="line">            view.setLayoutParams(wparams);</span><br><span class="line"></span><br><span class="line">            mViews.add(view);</span><br><span class="line">            mRoots.add(root);</span><br><span class="line">            mParams.add(wparams);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// do this last because it fires off messages to start doing things</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                root.setView(view, wparams, panelParentView);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                <span class="comment">// BadTokenException or InvalidDisplayException, clean up.</span></span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    removeViewLocked(index, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先上面代码可能存在一处漏洞。假设 view 之前从未添加过，那么低 9 行返回 -1，第 25 至 27 行把 view 添加到了 mViews 中，然后假设此 view 添加过程中失败了，即第 31 行抛出了异常，可是此时 index 是 -1，所以第 15 行企图移除此 view 是做不到的，于是此 view 就留在了 mViews 中，这可能是系统的移除漏洞。另一种情况，假设第 9 行返回非负值，那么此 view 在第 13 行会立即移除，第 25 行重新添加到 mView 中时，此 view 新的 index 已经不是第 9 行的值了，然后如果第 31 行添加失败，那么第 35 行将会被执行，可是 index 是错误的，这将会导致错误的 view 被移除！</p><p>上面可能的漏洞要发生，需要第 35 行抛出异常，而查看 <code>ViewRootImpl#setView</code> 方法可知，如果异常抛出，那么 view 的 parent 将尚未设置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (res &lt; WindowManagerGlobal.ADD_OKAY) &#123;</span><br><span class="line">                mAttachInfo.mRootView = <span class="keyword">null</span>;</span><br><span class="line">                mAdded = <span class="keyword">false</span>;</span><br><span class="line">                mFallbackEventHandler.setView(<span class="keyword">null</span>);</span><br><span class="line">                unscheduleTraversals();</span><br><span class="line">                setAccessibilityFocus(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN:</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is not valid; is your activity running?"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_NOT_APP_TOKEN:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is not for an application"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_APP_EXITING:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- app for token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is exiting"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_DUPLICATE_ADD:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- window "</span> + mWindow</span><br><span class="line">                                + <span class="string">" has already been added"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_STARTING_NOT_NEEDED:</span><br><span class="line">                        <span class="comment">// Silently ignore -- we would have just removed it</span></span><br><span class="line">                        <span class="comment">// right away, anyway.</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_MULTIPLE_SINGLETON:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- another window of type "</span></span><br><span class="line">                                + mWindowAttributes.type + <span class="string">" already exists"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_PERMISSION_DENIED:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- permission denied for window type "</span></span><br><span class="line">                                + mWindowAttributes.type);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_INVALID_DISPLAY:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.InvalidDisplayException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- the specified display can not be found"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_INVALID_TYPE:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.InvalidDisplayException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- the specified window type "</span></span><br><span class="line">                                + mWindowAttributes.type + <span class="string">" is not valid"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Unable to add window -- unknown error code "</span> + res);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            view.assignParent(<span class="keyword">this</span>);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可知，如果抛出异常，<code>view.assignParent(this)</code> 将未被调用。</p><p>至此，可将我的猜测总结为：当使用同一个 view 多次显示 toast 时，可能某一次添加失败，导致 view 留在 mViews 中，可是 view 的 parent 又因为添加失败而为空，所以 Toast#TN#handleShow 方法没有调用从 WindowManager 移除此 view 的代码，所以 WindowManagerGlobal#addView 被调用时，view 不在 mDyingViews 中，所以 crash 发生了。</p><p>可是这只是猜测，无法验证猜测是否正确。</p><p>----- 以下是 2019 年 1 月 11 日的更新 ------</p><p>现已发现复现第二种 crash (IllegalStateException: view has already been added to the window manager) 的方法，也就是如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> View toastLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        toastLayout = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.connection_toast, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast toast = <span class="keyword">new</span> Toast(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">                toast.setView(toastLayout);</span><br><span class="line">                toast.show();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1980</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，点击几次按钮来执行 onClick 方法，就可以复现 crash。复现思路是，先让前一个 toast 把 view 添加到 WindowManager，但要让它添加失败，然后第二次另一个 toast 再添加此 view，此次发生 crash，这个思路也是按照前面的猜想来的。首先，上面的代码是将同一个 view 添加到不同的 toast 对象去 show，当添加到第一个 toast 调用 show 方法后，主线程 sleep 1980 毫秒，这个时间是很微妙的，接近 2000 毫秒但是却略少。这个时间可以使得主线程醒来时，toast 的 token 即将失效。不能用更长的 sleep 时间是因为那样的话，主线程还在 sleep 中 token 已失效，token 的失效是在 NotificationManagerService 中产生的，失效后，NotificationManagerService 会处理 MESSAGE_DURATION_REACHED 消息，最终会跨进程调用到 Toast#TN#hide 方法，而这个方法会让我们 app 的主线程消息队列增加一个 HIDE 消息：</p><p><img src="http://tao93.top/images/2019/01/11/1547217156.png" alt=""></p><p>如此一来，当主线程 sleep 结束执行 Toast#TN#handleShow 方法时，就会因消息队列已有 HIDE 消息而提前返回:</p><p><img src="http://tao93.top/images/2019/01/11/1547217419.png" alt=""></p><p>既然都提前返回了，view 也就不会被第一个 toast 添加到 WindowManager，那么也就不符合我们的思路中「让第一个 toast 把 view 添加到 WindowManager 是发生异常」的想法。</p><p>所以，需要 1980 毫秒这样一个时间，这个时间使得主线程醒来执行到第一个 toast 的 Toast#TN#handleShow 时，token 还没失效，所以 handleShow 方法不会提前返回，所以 view 会继续往 WindowManager 添加，但是 20 毫秒不足以让这个添加顺利完成，相反，很可能添加时 token 失效了， 于是添加失败，发生第一种 crash 的 BadTokenException (Anddroid 8 以上此异常会被捕获，前文已描述)，这样就符合我们的思路了。下面截图证明了确实发生了 BadTokenException：</p><p><img src="http://tao93.top/images/2019/01/11/1547217762.png" alt=""></p><p>至此，按照前面的思路，此 view 将会无 parent，但是却留在了 WindowManagerGlobal 的 mViews 中，却又不在 mDyingViews 中，于是，当再次按下按钮，执行另一个 toast 添加此 view 的代码时，WindowManagerGlobal#addView 中将发生 IllegalStateException，crash 也就复现了，截图为证：</p><p><img src="http://tao93.top/images/2019/01/11/1547217909.png" alt=""></p><p>至此，toast crash 的分析算是有了一个比较完满的结尾。对于本文中 2019 年 1 月 11 日更新的部分，在此感谢刘成同学提供的帮助，他本来用来复现问题的方式是「先调一个 toast 的 show，sleep 三四秒，然后再用同一个 view 调另一个 toast 的 show」，这个方式因为前面讲的原因而无法复现 crash，但却给了我灵感，让我想到了 1980 毫秒这个时间，最终成功复现了 crash。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Toast 是 Android 系统一种非常简单的提示性小工具，最近我尝试修复 Toast 相关的两种 Crash，所以把相关的原委和过程记录了下来。先来看一下第一种 Crash 的 log:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java Comparable Contracts</title>
    <link href="http://tao93.top/2018/12/22/Java%20Comparable%20Contracts/"/>
    <id>http://tao93.top/2018/12/22/Java Comparable Contracts/</id>
    <published>2018-12-22T13:10:08.148Z</published>
    <updated>2018-12-22T13:10:08.148Z</updated>
    
    <content type="html"><![CDATA[<p>实现 Java 中的 Comparable 接口的对象，可以用在 Collections#sort 等方法中进行排序等。通常来说，Comparable 接口的 compareTo 方法都是写起来比较简单的。不过，偶尔还是可能翻车的。比如下面的 crash log，就是翻车的现场：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.IllegalArgumentException</span>: Comparison method violates its general contract! </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeHi</span>(TimSort<span class="selector-class">.java</span>:<span class="number">868</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeAt</span>(TimSort<span class="selector-class">.java</span>:<span class="number">485</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeCollapse</span>(TimSort<span class="selector-class">.java</span>:<span class="number">408</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.sort</span>(TimSort<span class="selector-class">.java</span>:<span class="number">214</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.sort</span>(TimSort<span class="selector-class">.java</span>:<span class="number">173</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.Arrays</span><span class="selector-class">.sort</span>(Arrays<span class="selector-class">.java</span>:<span class="number">659</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.Collections</span><span class="selector-class">.sort</span>(Collections<span class="selector-class">.java</span>:<span class="number">217</span>)</span><br></pre></td></tr></table></figure><p>异常显示违反了 general contract，这些 contract 其实在 Comparable#compareTo 方法的注释中就讲到了，主要就是相反性、传递性、等价性三条 contract。这些 contract 可以写成下面这样的形式：</p><ol><li><p>$sgn(x.compareTo(y)) = -sgn(y.compareTo(x)) $</p></li><li><p>$sgn(x.compareTo(y)) &gt; 0$ and $sgn(y.compareTo(z)) &gt; 0$ implies $sgn(x.compareTo(z)) &gt; 0$</p></li><li><p>$sgn(x.compareTo(y)) = 0$ implies sgn(x.compareTo(z)) = sgn(y.compareTo(z))$</p></li></ol><p>上面的 $sgn$ 函数就是下面这样的：</p><p><img src="http://tao93.top/images/2018/12/22/1545477555.png" alt=""></p><p>所以第一条的意思是 x 与 y 的比较结果和 y 与 x 的比较结果必须相反；第二条的意思是，比较结果是具有传递性的，第 3 条是如果 x 和 y 的比较结果是相等的，那么它们与任何 z 的比较结果相同。</p><p>简单实现的 compareTo 方法通常不会违背上面的协议，不过，稍微复杂点的，就不一定了。比如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o2)</span> </span>&#123;</span><br><span class="line">    Data d2 = (Data) o2</span><br><span class="line">    <span class="keyword">if</span> (isSortByName()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getName().compareTo(d2.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSortByAge()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getAge() - d2.getAge();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面代码来实现 Comparable 接口的对象，然后进行排序，是可能存在的问题的。在一次完整的排序过程中，上面的 compareTo 方法需要调用多次，但是上面的 isSortByName 和 isSortByAge 方法的返回是可能变化的，比如多线程情况下其他线程可能修改了 isSortByName 方法所使用的变量的值。当 isSortByName 的结果变化时，意味着排序的比较标准也变了，自然非常容易违反前面说到的 contract。</p><p>而下面的代码片段，同样是有问题的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o2)</span> </span>&#123;</span><br><span class="line">    Data d2 = (Data) o2</span><br><span class="line">    <span class="keyword">boolean</span> date1Empty = TextUtils.isEmpty(getDateStr());</span><br><span class="line">    <span class="keyword">boolean</span> date2Empty = TextUtils.isEmpty(d2.getDateStr());</span><br><span class="line">    <span class="keyword">if</span> (date1Empty &amp;&amp; date2Empty) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! date1Empty &amp;&amp; ! date2Empty) &#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"...."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date1 = format.format(getDateStr());</span><br><span class="line">            Date date2 = format.format(d2.getDateStr());</span><br><span class="line">            <span class="keyword">return</span> date1.compareTo(date2);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的问题在于，ParseException 被捕获并且直接返回 0 了。这意味着两个 date string 只要有一个是无法解析的，那么比较结果就是0，也就是相等。加入 a, b, c 三个 date string，只有 b 是无法解析的，那么 a 和 b 比较结果为 0，b 和 c 比较结果也是 0，则根据第 3 条 contract，a 和 c 的比较结果也应该是 0，可是 a 和 c 都是可以正常解析的，它们的比较结果不一定是 0。所以第 3 条 contract 会被违反。</p><p>要改正上面的代码片段，可以直接把异常抛出，以期提前将不可解析的 date string 避免掉。另一种方式更啰嗦点，就是两个不可解析的 date string 认为是相等的，然后可解析和不可解析的字符串的比较约定好大小关系，并确保符合相反性 contract。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现 Java 中的 Comparable 接口的对象，可以用在 Collections#sort 等方法中进行排序等。通常来说，Comparable 接口的 compareTo 方法都是写起来比较简单的。不过，偶尔还是可能翻车的。比如下面的 crash log，就是翻车的
      
    
    </summary>
    
    
      <category term="Java" scheme="http://tao93.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>给三星 tablet SM-T830 刷机</title>
    <link href="http://tao93.top/2018/12/08/Flash%20stock%20firmware%20in%20SM-T830/"/>
    <id>http://tao93.top/2018/12/08/Flash stock firmware in SM-T830/</id>
    <published>2018-12-08T09:54:33.676Z</published>
    <updated>2019-01-01T14:10:33.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>前天公司发给我一部三星 tablet 作为测试机，是 Tab S4 wifi 版，具体型号是 SM-T830，虽然不是我期待的 Pixel 3 XL，但是配置也还不错，加上屏幕也比较大。但是坑就坑在，这是一部国行的机器，没有 Google Mobile Service (GMS) 不说，还充斥了不少国内生态的杂物，比如系统设置中的 device storage 界面，居然写着「powered by 360」，还有一些预装的国内应用。</p><p>这时摆在我前面的有三种方法：第一，刷机刷入一个原生 Android 系统，这当然是最完美的；第二，找一个三星官方的但是是国外版的系统刷入，这种系统会有 GMS；第三，自己把确实的 Google 服务安装上去，凑活着用。</p><p>以上第一种方法，我在网上查了查，几乎不可能，因为这个 机型比较小众，网上根本没有给它刷原生系统的方法，就连 <a href="https://lineageos.org/" target="_blank" rel="noopener">LineageOS</a> 也没有支持这个机型。第二种方法，是比较可行的，这款 tablet 即使小众，也是在全球销售的，国外绝大部分地区销售的都是带有 GMS 的，此外这是个 WiFi 版机型，也不用担心运营商和网络制式的问题，所以刷成功的话，虽不是原生 Android，但也有完整可靠的 GMS 全件套。第三种方法，改动最小，但是也可能有后遗症，因为这样自行补充安装 Google service 的方式有可能是不完备可靠的，指不定啥时候就出点 bug。</p><p>所以我就开始实施第二种方法：刷入三星官方固件的国外版本，最后这件事折腾了我一天多。</p><h4 id="下载-错误的-固件包"><a href="#下载-错误的-固件包" class="headerlink" title="下载 (错误的) 固件包"></a>下载 (错误的) 固件包</h4><p>首先是获取固件包，在网上找了一通，找到了 xda 上的<a href="https://forum.xda-developers.com/galaxy-tab-s4/how-to/sm-t830-t830xxu1arh1-t3831918" target="_blank" rel="noopener">这个帖子</a>，里面贴出了存放在 Google drive 的适用于 SM-T830 的两个官方固件的链接，一个是法国版，另一个是阿拉伯联合酋长国版。帖子的作者还说，他对刷机可能出现的后果不负任何责任，提供这两个包只是让大家免收一些网站要收费才能下载固件包或者是付费才能提速下载的恶心。话说，SM-T830 的小众，从我搜遍 xda 也没找到几个和它相关的帖子即可略见一斑。</p><p>固件包大小约是 3.6 GB，起先我从浏览器直接下载 Google drive 上的固件包，网速很慢只有 100KB/S 的样子，下了挺久最后都失败了。后面我发现，先把固件添加到我自己的 Google drive 空间，然后在手机上的 Google drive 应用中下载，配合公司的网络环境，速度可以很快，差不多半个小时就下载好了。</p><h4 id="企图用虚拟机，失败"><a href="#企图用虚拟机，失败" class="headerlink" title="企图用虚拟机，失败"></a>企图用虚拟机，失败</h4><p>三星的内部刷机工具 odin，只能用 Windows 运行，我手里只有 Mac，所以我一开始希望用 virtual box 中的 win10 虚拟机来操作。我从硬盘里面把很久前备份的 win10 的 virtual disk image (也就是一个 .vdi 文件) 拷贝到电脑，然后以此新建一个虚拟机，成功的运行，但是鼓捣了半天，也无法让这个虚拟机连接 USB 设备，别说这台 tablet 不行，连 U 盘都不行。VirtualBox VM Extension Pack 安装了，在 win10 里面也安装了 Guest Additions，USB device filters 也配置了，就是不行，只能放弃，找同事借用 Windows 台式机。</p><p><strong>2019年1月1日更新</strong>：我后面 VirtualBox 装 Windows 虚拟机是可以连接到 Android 设备的，并且可以刷机，见<a href="http://tao93.top/2019/01/01/%E7%BB%99%E4%B8%89%E6%98%9F%20tablet%20SM-T830%20%E5%88%B7%E6%9C%BA[%E7%BB%AD]/">给三星 tablet SM-T830 刷机[续]</a> 的最后一部分</p><h4 id="失败的刷机"><a href="#失败的刷机" class="headerlink" title="失败的刷机"></a>失败的刷机</h4><p>在同事的台式机上操作之前，我在网上已经看了一段讲解刷机过程的视频，感觉挺简单的，就几个步骤而已。等到开始在 Windows 上面开始弄，我把固件包解压，然后用 odin 开始，这才发现那个视频其实过时了，视频中固件包解压后只有一个文件，但是我解压后其实有 4 个文件。其实这一点 Odin 中都已经提示了，new model 需要 4 个文件：</p><p><img src="http://tao93.top/images/2018/12/08/1544280785.png" alt=""></p><p>所以我的固件包是比较新的，所以有多个文件，但是仔细对比发现有点问题，odin 需要的是 BL, AP, CP, HOME_CSC 4 部分，但是我的固件包解压后 4 个文件的文件名是如下所示 (文件我已经删掉了，所以没法贴出完整文件名)：</p><blockquote><p>BL…<br>AP…<br>CSC…<br>HOME_CSC…</p></blockquote><p>相当于没有 CP 开头的，反而似乎有两个 CSC 的，这时我也没夺多管，依次点击 odin 中的 BL, AP, CP, CSC 四个安装，然后把 4 个文件都添加进去，然后就点 start 了，然后就失败了。于是我把 CP 和 CSC 需要的文件调换了一下，还是失败。</p><p>这时候我就查了一下为啥少了 CP 开头的文件，这才发现，原来 WiFi 版就是没有 CP 文件，这是和基带相关的，只有可插卡上网的版本才有。顺便也发现了我的 CSC… 和 HOME_CSC… 两个文件的区别，据说前者是彻底清空数据，后者会保留用户数据，所以这两个文件其实作用是类似的，其实我也注意到它们大小也非常相近，都是 180MB 左右。</p><p>于是我就空出 CP 那里不添加文件，其余 3 个添加上，然后 start，结果左边文本框停留在 ‘setupconnection..’，我一查，发现很多说卡在这一步的，纷纷在求 help。没办法我就只能继续查，有说要先运行 odin 后连接 USB 数据线的(试了不行)。查了一阵，终于查到一个看起来比较靠谱的<a href="https://forum.xda-developers.com/sprint-galaxy-s6/help/odin-stuck-setupconnection-t3574320" target="_blank" rel="noopener">方法</a>，依然是 xda 论坛上的：</p><p><img src="http://tao93.top/images/2018/12/08/1544281510.png" alt=""></p><p>我按照上面说的一步一步走，依然失败，但是没再卡在 setupconnection 了。我总结发现，odin 应该确实有 bug，明明设备连接正常，它就是卡在这一步，这时候可以这么做：1. 重新启动设备，1. 断开 USB 连接，3. 进入 downloading mode，4. 连接 USB 然后再在 odin 中 start，就不会卡在那一步了。</p><p>回到刚刚说的，虽然没卡在 setupconnection 了，但是依然失败，提示大概是：</p><blockquote><p><id:0 004=""> abl.elf</id:0></p><p><id:0 004=""> FAIL! (Auth)</id:0></p><id:0 004=""><p><id:0 004=""> Complete(Write) operation failed.</id:0></p><p><osm> All threads completed. (succeed 0 / failed 1)</osm></p></id:0></blockquote><p>以 abl.elf 为关键字又是一番在网上搜索，最后发现<a href="http://bbs.gfan.com/android-9245022-1-1.html" target="_blank" rel="noopener">这个帖子有</a>人遇到这个问题最后解决了：</p><p><img src="http://tao93.top/images/2018/12/08/1544281993.png" alt=""></p><p>起初我对「固件版本落后于现有版本」这句话不以为然，因为我觉得这不就意味着只能升级不能降级嘛，不科学。但后面我忽然想到，这句话意思可能是刷机不能刷那些版本比设备出厂时系统版本还更旧的固件，就上这个人确实解决了问题，并且我前面下的固件包都是 2018 年 8 月份的，确实有点旧，所以我开始想怎么下最新的用于 SM-T830 的固件。</p><h4 id="下载最新的固件包"><a href="#下载最新的固件包" class="headerlink" title="下载最新的固件包"></a>下载最新的固件包</h4><p>这时，就又回到开始找固件包的步骤了，网上满是假链接，或者是要注册，要交费的，找得人心累。不过，最后竟然找到一个叫 SamFirm tool 的神器，这个神器可以直接高速下载想要的最新固件，简直不能更棒。如下图所示，输入系统型号，然后选择 auto 模式来查找，就能找到最新的固件，并且下载速度还很快！<a href="https://forum.xda-developers.com/galaxy-tab-s/general/tool-samfirm-samsung-firmware-t2988647" target="_blank" rel="noopener">这个帖子</a>可以下载到这个神器。</p><p><img src="http://tao93.top/images/2018/12/08/1544283275.png" alt=""></p><p>如上图所示，准确地填入型号，填入要下载的固件的国家或地区代号（这里我要填的就是某个外国或国外地区，这样固件包才会有 GMS）。这个国家或地区代号可以从<a href="https://www.sammobile.com/firmwares/galaxy-tab-s4/SM-T830/" target="_blank" rel="noopener">这里</a>找到，我在上一张图中填入的是 XEF，其实就是代表法国。填好后勾选 Auto，然后点击 Check Update，即可检查到最新固件包的信息，我在今天（2018年12月8日）检查到的 SM-T830 的法国版最新固件包如上图箭头所示，是 2018年10月24日更新的。然后就可以在 SamFirm 右边点下载了。建议勾选 Decrypt automatically，否则 下载好固件包后还需要重新解密，费时间。</p><p>国家或地区代号截图：</p><p><img src="http://tao93.top/images/2018/12/08/1544283882.png" alt=""></p><h4 id="成功刷机"><a href="#成功刷机" class="headerlink" title="成功刷机"></a>成功刷机</h4><p>下载到最新固件后，解压，然后用 odin 依次填入 BL AP CSC 三个地方的文件，点 start，继续卡在 setupconnection，按照我之前的总结跳过这个 setupconnection，然后真正开始刷机，大概 10 分钟不到就刷好了。</p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>刷个机遇到的坑还真是挺多，把这些记录下来，说不定以后公司的国行设备需要刷机，这些记录就能派上用场了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;前天公司发给我一部三星 tablet 作为测试机，是 Tab S4 wifi 版，具体型号是 SM-T830，虽然不是我期待的 Pixel 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
      <category term="Firmware" scheme="http://tao93.top/tags/Firmware/"/>
    
      <category term="Samsung" scheme="http://tao93.top/tags/Samsung/"/>
    
  </entry>
  
  <entry>
    <title>矩阵运算在 Android 中的简单场景</title>
    <link href="http://tao93.top/2018/12/04/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E5%9C%A8%20Android%20%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%9C%BA%E6%99%AF/"/>
    <id>http://tao93.top/2018/12/04/矩阵运算在 Android 中的简单场景/</id>
    <published>2018-12-04T14:52:16.196Z</published>
    <updated>2018-12-06T10:07:30.053Z</updated>
    
    <content type="html"><![CDATA[<p>让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) 这样一个方法。这个方法中有个矩阵参数，通过传入此矩阵参数，可以将 source Bitmap 经过一定的转换再创建目标 Bitmap。那么这个矩阵是怎么起作用的呢？先看一段示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">matrix.postRotate(<span class="number">90</span>);</span><br><span class="line">Bitmap bitmap2 = Bitmap.createBitmap(bitmap1, <span class="number">0</span>, <span class="number">0</span>, bitmap1.width(), bitmap1.getHeight(), matrix, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>上述代码做的事情是将 bitmap1 顺时针旋转 90° 得到 bitmap2，起关键作用的就是这个 matrix。第一行代码会得到一个 3×3 的单位矩阵，而第二行代码之后，矩阵将会变成下面这样：</p><script type="math/tex; mode=display">  \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix} ·  \begin{bmatrix}   1 & 0 & 0 \\   0 & 1 & 0 \\   0 & 0 & 1  \end{bmatrix} =  \begin{bmatrix}  0 & -1 & 0 \\  1 & 0 & 0 \\  0 & 0 & 1  \end{bmatrix}</script><p>注意在 xy 平面内顺时针 rotate 90° 的操作对应的矩阵是 </p><script type="math/tex; mode=display">\begin{bmatrix}cos 90° & -sin 90° & 0 \\sin 90° & cos90° & 0 \\0 & 0 & 1\end{bmatrix} = \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>记上面的矩阵为 R90，记上面代码中的 matrix 为 M，记单位矩阵为 I，那么第 2 行的操作则是等同于下面的表达式：</p><script type="math/tex; mode=display">M = R90·M</script><p>也就是:</p><script type="math/tex; mode=display">M = R90·I</script><p>注意上面的点乘顺序是 R90 在前，I 在后（虽然这里 R90·I 和 I·R90 结果是一样，但别的场景未必如此）。原因是 代码中是 <code>postRotate</code> 方法，这里 <code>post</code> 表示是把 rotate 放在变换的最后一步。而变换矩阵作用 R90·M 作用在目标向量 V 时，将会是表达式：</p><script type="math/tex; mode=display">R90·M·V</script><p>这样就可以理解为是先 M·V 然后这个结果再被 R90 乘，所以是先做 M 本来的变换，然后再做 R90 的变换，也就是 rotate 90° 在最后一步。这也就是第 2 行代码的 postRotate 90° 等价于 M = R90·M 也就是 M = R90·I 的原因。</p><p>所以第 3 行代码传入的 matrix 就是：</p><script type="math/tex; mode=display">\begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>现在我们进入前面说的 createBitmap 这个方法中去看看源码是怎么实现这个变换的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Matrix m, <span class="keyword">boolean</span> filter)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Rect srcR = <span class="keyword">new</span> Rect(x, y, x + width, y + height);</span><br><span class="line">    RectF dstR = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    RectF deviceR = <span class="keyword">new</span> RectF();</span><br><span class="line">    m.mapRect(deviceR, dstR);</span><br><span class="line">    neww = Math.round(deviceR.width());</span><br><span class="line">    newh = Math.round(deviceR.height());</span><br><span class="line">    bitmap = createBitmap(neww, newh, transformedConfig, transformed || source.hasAlpha());</span><br><span class="line">    </span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">    canvas.translate(-deviceR.left, -deviceR.top);</span><br><span class="line">    canvas.concat(m);</span><br><span class="line">    canvas.drawBitmap(source, srcR, dstR, paint);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码第 3 行 srcR 将是 source Bitmap 中要被转换的部分。而 dstR 是同样宽高但是左上角在 (0, 0) 的矩形。第 6 行则是将 dstR 变换后得到 deviceR，根据前面所知 的 m 的值，可知deviceR 将会是 left, top, right, bottom 分别是 -height, 0, 0, width:</p><p><img src="http://tao93.top/images/2018/12/04/1543937277.png" alt=""></p><p>即 deviceR 是 dstR 绕原点顺时针旋转 90° 得到的。紧接着代码 7、8 行得到转换后的 Bitmap 的宽高。然后第 9 行以此宽高创建了新的 Bitmap。第 11 行基于此 Bitmap 创建了 canvas。</p><p>重点来了，第 12 行对此 canvas 进行平移变换，平移的目的是让 deviceR 的左上角移动到原点。从而让它位于 x 非负且 y 非负的象限。而第 13 行则将 m 矩阵的变换作用在此 canvas 是。需要注意的是，第 12、13 行的变换，都是 pre 的变换而不是 post 的。所以可以看成 13 行的变换其实是比第 12 行的平移先执行的，也就是整个变换过程可理解为先绕原点顺时针旋转 90°，然后再将左上角平移到原点，这样就成功的完成了将原 Bitmap 旋转 90° 并创建新 Bitmap 的操作，虽然这里除了 rotate，其实还利用了 translation 操作。</p><p>用 3×3 矩阵在 xy 平面内变换，可以分为 translate, rotate, scale, skew 一共 4 种，表示这四种操作的矩阵分别记作：</p><script type="math/tex; mode=display">T(a, b),\ R(\theta),\ S(u, v),\ SKx(\theta), SKy(\theta)</script><p>那么它们分别是：</p><script type="math/tex; mode=display">\begin{bmatrix}   1 & 0 & a \\   0 & 1 & b \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   cos(\theta) & -sin(\theta) & 0 \\   sin(\theta) & cos(\theta) & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   u & 0 & 0 \\   0 & v & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & tan(\theta) & 0 \\   0 & 1 & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & 0 & 0 \\   tan(\theta) & 1 & 0 \\   0 & 0 & 1\end{bmatrix}</script><p>分别表示的含义是：</p><ol><li>向 +x 方向平移 a 且向 +y 方向平移 b；</li><li>以原点为中心在 xy 平面旋转 theta 角度；</li><li>以原点为 pivot，x 方向和 y 方向分别伸缩值为 u 和 v 的比例；</li><li>每个点的 $x$ 坐标变为 $x + y·tan(\theta)$，而 $y$ 坐标不变，视觉表现为图形向 +y 方向倾斜，倾斜角度为 $\theta$;</li><li>每个点的 $y$ 坐标变为 $x·tan(\theta) + y$，而 $x$ 坐标不变，视觉表现为图形向 +x 方向倾斜，倾斜角度为 $\theta$.</li></ol><p>注意, $T(a, 0)$ 和 $T(0, b)$ 组合起来的变换，等价于 $T(a, b)$，且和组合顺序无关，这从矩阵乘法也可以看出来：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & a \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}</script><p>同样的，$S(u, 0)$ 和 $S(0, v)$ 组合起来等价于 $S(u, v)$ 且和组合顺序无关。而 Skew 无此性质。事实上：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & tan(\alpha) & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1+tan(\alpha)tan(\beta) & tan(\alpha) & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}</script><p>而：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & tan(\alpha) & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & tan(\alpha) & 0 \\tan(\beta) & 1+tan(\alpha)tan(\beta) & 0 \\0 & 0 & 1\end{bmatrix}</script><p>接下来说说 Android 中和 3×3 矩阵相关的一些类，也就是 <a href="https://developer.android.com/reference/android/graphics/Matrix" target="_blank" rel="noopener">Matrix</a>, <a href="https://developer.android.com/reference/android/graphics/Canvas" target="_blank" rel="noopener">Canvas</a>, <a href="https://developer.android.com/reference/android/graphics/Camera" target="_blank" rel="noopener">Camera</a> 这 3 个类，注意最后这个  Camera 类是 android.graphics 包中的，而不是 android.hardware 中的。</p><p>Matrix 对象表示一个 3×3 矩阵，常用于指示 x y 平面内的变换，构造函数创建的都是单位矩阵。Matrix 有一系列 set 方法，用于设置矩阵的值，这些方法对应于一些常见的变换操作，比如 setScale(int sx, int sy) 方法，其实就是把矩阵(不管原来是什么值)变成下面的值：</p><script type="math/tex; mode=display">\begin{bmatrix}sx & 0 & 0 \\0 & sy & 0 \\0 & 0 & 1\end{bmatrix}</script><p>上面的缩放是以原点为 pivot 缩放的，此外，还有 setScale(float sx, float sy, float px, float py) 这样以 (px, py) 为 pivot 进行缩放的操作，等价于把矩阵变为下面这样：</p><script type="math/tex; mode=display">\begin{bmatrix}sx & 0 & px(1-sx) \\0 & sy & py(1-sy) \\0 & 0 & 1\end{bmatrix}</script><p>注意以上矩阵是可以分解的，分解为两个矩阵，且这两个矩阵交换位置后的积也是上面的矩阵。其他的 set 方法与此类似，就不多说了。</p><p>Matrix 还有一系列 post 方法和 pre 方法，比如 postRotate(int degrees) 和 preSkew(int kx, int ky) 方法，前者相当于 $M=R(degrees)·M$，后者相当于 $M=M·SK(kx,\ ky)$. 注意这里矩阵相乘的顺序取决于是 post 还是 pre.</p><p>其实 Matrix 也可以在 3 维空间中变换，比如使用它的 setPolyToPoly 方法，可以得到满足指定的映射关系的矩阵。而这种映射关系可能需要 3 为空间的变换才能满足。</p><p>Canvas 类包含一个变换矩阵，这个矩阵可以 get 也可以 set，也可以用 concact(Matrix mat) 来改变 Canvas 的变换矩阵的值，这个过程等价于 $M=M·mat$. 另外，Canvas 的 drawBitmap 方法也可以传入 Matrix 对象来控制 bitmap 被 draw 时需要的施加的变换。Canvas 的 translate 和 rotate 等方法，都是 pre 类型的，并且这种变化，可以理解为是对 canvas 的坐标系进行变化。无变换时，坐标系原点在可见区域的左上角，而 +x 向右，+y 向下。translate(10, 0) 后，canvas 原点向右移动 10，此后绘制在 (0, 0) 位置的东西，其实是位于可见区域的左上角右侧距离为 10 的地方。</p><p>以上说的可见区域，其实是 Canvas 中的 clip 概念，这是一个描述可见区域的矩形。一般 Canvas 的初始 clip 的 ltrb f分别为 0, 0, view width, view height. 当 Canvas 变换时，可理解为其坐标系变换了，那么自然 clip 也会跟着变化，比如 translate(10, 0) 后，clip 的 ltrb 就变为 -10, 0, view width - 10, view height.</p><p>Canvas 出于灵活性考虑，有 save 和 restore 两个方法用于保存和恢复变换的状态，常用做法是，在无变换时 save 一下，然后变换并做绘制，最后restore，以避免影响其它绘制工作。出了translate、rotate、Skew、Scale 这些 2 维变换，Canvas 还有一系列 clip 方法，这些方法将 Canvas 进一步剪裁，并根据剪裁后可见区域是否为空返回布尔值。剪裁操作也是可以 save 和 restore 的，但是注意剪裁操作并不变换坐标系。</p><p>Camera 对象专门用于计算变换，且包含 3 维空间中的变换(相反 Matrix 对象其实只是 xy 平面内的变换)，它的变换计算结果是一个矩阵，可通过 getMatrix 方法得到，一般会将此矩阵用作它用，可以将 Camera 理解为一个变换计算器。出于灵活性的考虑，Camera 对象中有 save 和 restore 操作，这就像是 git 中的 stash 和 pop stash 操作一样，可以把当前的变换保存，并在后面某个时候恢复出来，恢复之前的值将会丢失。不同的是，git stash 后 working tree 将是 clean 的，即已修改的内容都清空了，而 Camera 对象 save 后，它的矩阵还是 save 之前的，并不会变成单位矩阵。</p><p>需要注意的是，Camera 的坐标系，+x 是向右的，+y 是向上的，而 +z 是向屏幕里面的。所以比如 Camera 的 rotateZ(int degrees) 方法和 Matrix 的 [pre|post]Rotate(int degree) 的旋转方向是反过来的。前者等价于逆时针方向转，后者则是顺时针方向转。下面的例子可以说明这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Matrix mat1 = <span class="keyword">new</span> Matrix();</span><br><span class="line">Camera camera = <span class="keyword">new</span> Camera();</span><br><span class="line"></span><br><span class="line">camera.rotateZ(-<span class="number">90</span>);</span><br><span class="line">camera.getMatrix(mat1);</span><br><span class="line"></span><br><span class="line">Matrix mat2 = <span class="keyword">new</span> Matrix();</span><br><span class="line">mat2.preRotate(<span class="number">90</span>);</span><br></pre></td></tr></table></figure><p>上面代码执行后 mat1 和 mat2 都是：</p><script type="math/tex; mode=display">\begin{bmatrix}0 & -1 & 0 \\1 & 0 & 0 \\0 & 0 & 1\end{bmatrix}</script><p>对于 Camera 对象， 调用它的 translate 等方法，会使得它的 matrix 变为 Camera 的坐标系中对应此变换的值，而这样的矩阵，在应用在 Canvas 上进行绘制时，又是作用在 +y 向下的坐标系中。所以比如 Camera translate(10, -20, 0) 后得到的矩阵是：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & 10 \\0 & 1 & 20 \\0 & 0 & 1\end{bmatrix}</script><p>需要注意的是，当 Camera 在 z 方向进行 translate 操作时，变换对象在屏幕上的投影大小发生变化，所以，实际变换效果是一个缩放变换，所以 Camera getMatrix 的结果，也是一个二维缩放变换的矩阵。Camera 的 location 也就是 3D 投影中的 camera 位置（观察者位置），此位置默认是 (0, 0, -8)，注意这个 -8 实际相当于 -576 个像素。当 z 方向 translate 距离为正时，相当于远离观察者，最终就是缩小的变换，反正是放大的变换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean fil
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>微信 Android 版是如何计步的</title>
    <link href="http://tao93.top/2018/11/24/%E5%BE%AE%E4%BF%A1%20Android%20%E7%89%88%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E6%AD%A5%E7%9A%84/"/>
    <id>http://tao93.top/2018/11/24/微信 Android 版是如何计步的/</id>
    <published>2018-11-24T04:54:22.998Z</published>
    <updated>2018-11-24T04:54:22.998Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能比 iOS 系统中的数据更受用户重视，所以就可以把 iOS 系统中的数据替换为手环产生的数据，所以需要允许写入。不过目前而言，Android 系统中，第三方应用似乎无法写入系统的运动数据，而只能读取。</p><p>回到正题，众所周知，微信有个微信运动功能。Android 版微信是怎么计步的呢？我最先是在微信的权限页发现微信声明了 Body Sensors 权限，如下所示：</p><p><img src="http://tao93.top/images/2018/11/23/1542956043.png" alt=""></p><p>这个权限很有迷惑性，让人以为有这个就可以读 Android 系统产生的计步数据了。事实上，把这个权限关了，然后晃动手机 20 次，再进入微信运动，步数很准确的增加了 20 次左右，所以这个权限并不影响读取计步数据。</p><p>那这个权限可以干嘛呢？Body Sensors 权限被列为 dangerous permission，所属的 permission group 仅有这一个权限。不过很遗憾，我在网上查了挺久，没有查到获得这个权限后可以用来写什么代码做什么事情。倘若想要了解此权限的根底，估计需要在 AOSP 中找答案了。可惜我电脑上次升级失败后，目前我电脑中没有完整的 AOSP。</p><p>就目前我在网上了解到的信息而言，此权限似乎没什么用，很多帖子都在询问 Google Play Services 为何要使用此权限以及是否可以关闭该权限。我手中的 Pixel XL 也仅有 Google Play Services 和微信声明了此权限：</p><p><img src="http://tao93.top/images/2018/11/24/1543033517.png" alt=""></p><p>根据网上的帖子，在 Android 7 时代的某个时候，Gmail 有个 bug，即关闭 Google Play Services 的 Body Sensors 权限后，Gmail 疯狂弹框显示「This app won’t work properly unless you allow Google Play Services’ request to access the foloowing: <strong>Body Sensors</strong>」，尽管 Gmail 仍能正常工作。因为此弹框太过怪异，随后谷歌修复了此问题，这说明即使是 Google 自己的应用，也没有严格审查自己是否声明了不必要的权限。</p><p>当然把 Google Play Services 的 Body Sensors 权限关闭后，打开 Google Fit 应用时，弹出和上面类似的消息，并且 Google Fit 不再显示我的步数，乍一看，这似乎说得通。但是，此时微信仍然可以正常计步。这说明但就计步这一功能看，Body Sensors 并非必要的。</p><p>事实上我的计步 Demo 应用如上述微信一样，也还可以计步。计步 Demo 中的代码非常简单，Google 自己也有个展示此功能的简单项目 <a href="https://github.com/googlesamples/android-BatchStepSensor" target="_blank" rel="noopener">android-BatchStepSensor</a>。值得一提的是，Google 的简单项目中 manifest 声明了两项 use-feature，但其实这也不是必要的。第三方应用无需声明任何权限，无需声明任何 use-feature，只需注册一个 android.hardware.SensorEventListener 接口，即可在此接口的 onSensorChanged 方法中源源不断的收到步数更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.sensor.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_DETECTOR:</span><br><span class="line">            stepDetector ++;</span><br><span class="line">            tvDetector.setText(stepDetector + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_COUNTER:</span><br><span class="line">            <span class="comment">// event.values[0] is step count since last reboot of Android device</span></span><br><span class="line">            stepCounter = (<span class="keyword">int</span>) event.values[<span class="number">0</span>];</span><br><span class="line">            tvCounter.setText(stepCounter + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样第三方应用就可以计步了，即使第三方应用进程终止，也可以在应用再次运行时，在 onSensorChanged 方法中得知新的步数。</p><p>值得注意的是，系统返回的步数始终是上次重启设备后的总步数。那么第三方应用使用这种方式计步时，会存在一个问题，即应用进程被杀后，如果用户先运动，然后重启设备，然后才打开第三方应用，那么第三方应用会丢失从应用被杀到设备重启之间的步数，而只知道设备重启后新增了多少步数。</p><p>经过验证，我的 demo、微信还有 Google Fit 均存在此问题。这说明微信和 Google Fit (或者它依赖的 Google Play Services) 都是通过注册 SensorEventListener 接口来获知步数的。这也说明了微信声明 Body Sensors 权限是冗余的。</p><p>那么 Body Sensors 权限到底可以用来做什么？这是一个待填的坑。</p><p>对了，网上还有种方式，通过监听手机加速度感应器的事件来自己计步，至于准确性，那就受自己的算法的科学性和复杂性的限制了。方法也是注册 SensorEventListener，不过注册的 type 是 android.hardware.Sensor.TYPE_ACCELEROMETER 而非前面的 TYPE_STEP_COUNTER。更多细节见<a href="http://www.gadgetsaint.com/android/create-pedometer-step-counter-android/#.W_jYq5MzYkp" target="_blank" rel="noopener">此帖子</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>不一样的 RelativeLayout measure 过程</title>
    <link href="http://tao93.top/2018/11/02/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%20RelativeLayout%20measure%20%E8%BF%87%E7%A8%8B/"/>
    <id>http://tao93.top/2018/11/02/不一样的 RelativeLayout measure 过程/</id>
    <published>2018-11-02T02:59:59.975Z</published>
    <updated>2018-11-02T03:58:13.425Z</updated>
    
    <content type="html"><![CDATA[<p>直接用一个简单的例子展示 RelativeLayout 的不一样之处：</p><p><img src="http://tao93.top/images/2018/11/01/1541079447.png" alt=""></p><p>图中，左边是一个简单的 Android layout 例子，例子中在外侧是一个最大的 horizontal 的 LinearLayout，它有 3 个 child，分别是左部、分割线和右部。左部和右部非常相似，都是外面一个 ViewGroup 内嵌一个 TextView，且 ViewGroup 的高度都是 wrapContent 而内嵌的 TextView 的高度都是 matchParent.</p><p>因为 TextView 背景都是红色，所以从 preview 可以清晰看到，左部的 TextView 等效于 wrapContent，而右部的 TextView 则等效于 matchParent，这就是 RelativeLayout 的不一样。简而言之就是，RelativeLayout 中内嵌的 child tree 的根节点 size 如果是 matchParent，那么此 child tree 测量得到的 size 将会是最大化的，可达到 RelativeLayout size 的上限，而其余常见 ViewGroup 没有此特点，比如 LinearLayout, FrameLayout, ConstraintLayout 等。</p><p>究其原因，可以从 RelativeLayout 中的 onMeasure 方法找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = views[i];</span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">            applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class="line">            measureChild(child, params, myWidth, myHeight);</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 RelativeLayout#onMeasure 的片段，可知对所有 child 调用了 measureChild 方法，而这是个 RelativeLayout 的 private 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Measure a child. The child should have left, top, right and bottom information</span></span><br><span class="line"><span class="comment"> * stored in its LayoutParams. If any of these values is VALUE_NOT_SET it means</span></span><br><span class="line"><span class="comment"> * that the view can extend up to the corresponding edge.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child Child to measure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params LayoutParams associated with child</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myWidth Width of the the RelativeLayout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myHeight Height of the RelativeLayout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, LayoutParams params, <span class="keyword">int</span> myWidth, <span class="keyword">int</span> myHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft,</span><br><span class="line">            params.mRight, params.width,</span><br><span class="line">            params.leftMargin, params.rightMargin,</span><br><span class="line">            mPaddingLeft, mPaddingRight,</span><br><span class="line">            myWidth);</span><br><span class="line">    <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(params.mTop,</span><br><span class="line">            params.mBottom, params.height,</span><br><span class="line">            params.topMargin, params.bottomMargin,</span><br><span class="line">            mPaddingTop, mPaddingBottom,</span><br><span class="line">            myHeight);</span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述方法看，先获取到 child measureSpec，然后依次为参数来 measure 每个 child。再进入到 RelativeLayout#getChildMeasureSpec 这个方法中看看下面的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class="line">    <span class="comment">// Constraints fixed both edges, so child must be an exact size.</span></span><br><span class="line">    childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">    childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (childSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Child wanted an exact size. Give as much as possible.</span></span><br><span class="line">        childSpecMode = MeasureSpec.EXACTLY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecSize = Math.min(maxAvailable, childSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension.</span></span><br><span class="line">            childSpecSize = childSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">        <span class="comment">// Child wanted to be as big as possible. Give all available</span></span><br><span class="line">        <span class="comment">// space.</span></span><br><span class="line">        childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">        childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">        <span class="comment">// Child wants to wrap content. Use AT_MOST to communicate</span></span><br><span class="line">        <span class="comment">// available space if we know our max size.</span></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecMode = MeasureSpec.AT_MOST;</span><br><span class="line">            childSpecSize = maxAvailable;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension. Child can be as big as it</span></span><br><span class="line">            <span class="comment">// wants.</span></span><br><span class="line">            childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            childSpecSize = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，chileSpecMode 赋值为 MeasureSpec.AT_MOST 的地方只有 27 行一个地方，也就是只要 child 声明为 match_parent，那么 child 的 specMode 不出意外就会是 EXACTLY。而 EXACTLY 意味着此 child 为根节点的 view tree 的测量结果将会是此 child 的 specSize，而这个 specSize 显然就是 RelativeLayout 能达到的最大 size (可能需要减去 padding，RelativeLayout 其它 child 占据的空间等)。</p><p>顺便再看看 LinearLayout 等等为啥不是这样的，事实上 LinearLayout 等使用的是 ViewGroup 这个抽象基类中的 getChildMeasureSpec 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可以看到，如果 child 声明为 matchParent 但是 RelativeLayout 的 specMode 是 AT_MOST 的话，那么 child 的 specMode 如第 35 行所示将会是 AT_MOST，这就是和 RelativeLayout 的不同之处。</p><p>总结一下，即使 RelativeLayout 的 specMode 是 AT_MOST，只要它的 child 声明 matchParent，那么 child 的 SpecMode 一般会是 EXACTLY，此 child 为根节点的 viewTree 的测量结果就是最大化的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接用一个简单的例子展示 RelativeLayout 的不一样之处：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/11/01/1541079447.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中，左边是一个简单的 Androi
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一键设置 Android http proxy 的尝试</title>
    <link href="http://tao93.top/2018/11/01/%E4%B8%80%E9%94%AE%E8%AE%BE%E7%BD%AE%20Android%20http%20proxy%20%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://tao93.top/2018/11/01/一键设置 Android http proxy 的尝试/</id>
    <published>2018-11-01T03:04:32.507Z</published>
    <updated>2018-11-01T03:04:32.507Z</updated>
    
    <content type="html"><![CDATA[<p>自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&gt; 点击当前 WiFi -&gt; 点击编辑 -&gt; 点击 Advanced options -&gt; proxy 选择 None 或者 Manual -&gt; 上一步如果选了 Manual, 则需要输入 IP 地址和端口号 -&gt; 保存。</p><p>这样一个六七步的步骤，真的很让人烦，而如果电脑的局域网 IP 地址不固定的话，就更加让人不爽了，意味着每次电脑重新联网后，手机都需要重新设置代理的 IP。就算电脑 IP 固定，当手机需要使用 Charles 代理或者关闭代理，都比较麻烦。所以很久前我就想有没有方法可以一键设置代理。</p><p>我的构想是，如果电脑 IP 地址不固定，那么一键设置需要在电脑上操作，不然无法获知电脑的 IP，当然也可以电脑运行个 socket server，然后手机连接，然后电脑把 IP 发给手机。如果电脑 IP 地址固定，最理想的则是手机上一键设置，这样就不需要 adb 连接了。</p><p>经过一番 google 和惨痛的尝试，我得知了两种并不完美的方法。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置代理信息 exclList是添加不用代理的网址用的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHttpProxySetting</span><span class="params">(Context context, String host, <span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">        WifiManager wifiManager =(WifiManager)context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration config = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(host,port);</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">            Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">            Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">            method.invoke(config,mInfo);</span><br><span class="line">            Object mIpConfiguration = getDeclaredFieldObject(config,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line"></span><br><span class="line">            setEnumField(mIpConfiguration, <span class="string">"STATIC"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">            setDeclardFildObject(config,<span class="string">"mIpConfiguration"</span>, mIpConfiguration);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// save the settings</span></span><br><span class="line">            wifiManager.updateNetwork(config);</span><br><span class="line">            wifiManager.disconnect();</span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消代理设置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSetHttpProxy</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration configuration = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (configuration != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                configuration.setHttpProxy(mInfo);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">                Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">                Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">                method.invoke(configuration,mInfo);</span><br><span class="line">                Object mIpConfiguration = getDeclaredFieldObject(configuration,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line">                setEnumField(mIpConfiguration, <span class="string">"NONE"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">                setDeclardFildObject(configuration,<span class="string">"mIpConfiguration"</span>,mIpConfiguration);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            wifiManager.updateNetwork(configuration);</span><br><span class="line">            wifiManager.disconnect(); </span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的方法直接获取到当前连接的 WiFi configuration，然后把它的 http proxy 类型 (枚举变量，主要是 NONE 和 STATIC 两个值)，和值 (即 IP 和 port) 用反射的方法设置进去，然后更新 WiFi configuration，并断开 WiFi 并重新连接 WiFi。以上设置代理和关闭代理的动作，全部由上面的代码一键完成，直接在手机上运行即可，并且代码运行结果和手机 Settings 中的 UI 结果是一致的，感觉相当完美。</p><p>然而方法一不支持 API 23 以上的 Android 系统，而所用 API 21 测试是可以完美运行的，在如今 API 28 都发布了的时候，不支持 API 23 以上可以说让实用性大打折扣。不过这是可以理解的，毕竟处于安全考虑，不能让用户的手机随便被第三方 app 默默修改了代理，这太危险了。</p><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>执行以上命令后，Settings 中的 UI 并未更改，但是代理已经生效。这一方法实际是新增了 Settings Provider 中的 key value，有两种方式可以查看到这一新增 key value:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get global http_proxy</span><br><span class="line">adb shell settings get global global_http_proxy_host</span><br><span class="line">adb shell settings get global global_http_proxy_port</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String httpProxy = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.HTTP_PROXY);</span><br><span class="line">String httpProxyHost = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST);</span><br><span class="line">String httpProxyPort = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT);</span><br></pre></td></tr></table></figure><p>Android 不运行第三方应用新增这样的属性值，而只有 read 的权限，所以需要 adb 来新增这些属性值，除了这个缺点，还有更致命的缺陷。方法二的 reset proxy 的方法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是的，目前我已知的方法，只有重启才能让上述 delete 生效，当然手动重启都可以。</span></span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p>要 reset proxy，删除 key value 和重启 (目前我只知道重启可以) 缺一不可，否则设备只能通过 proxy 使用 http。也就是连别的 wifi 或者使用数据流量都不能使用 http！要想不重启，除非在将 key value 设置为另一个有效的 proxy 配置，这个缺陷可以说非常致命了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&amp;gt; 点击当前 WiFi -&amp;gt; 点击编辑 -&amp;gt; 点击 Advanced options -&amp;gt; prox
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ShadowSocks for Gradle &amp; Shell</title>
    <link href="http://tao93.top/2018/10/18/%E6%B3%A8%E6%84%8F%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%201086/"/>
    <id>http://tao93.top/2018/10/18/注意下面的端口号不一定是 1086/</id>
    <published>2018-10-18T07:11:58.403Z</published>
    <updated>2018-10-18T07:11:58.403Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://shadowsocks.org/" target="_blank" rel="noopener">ShadowSocks</a> 是个很好的工具，它自带 PAC 模式和全局模式。</p><p>不过这个全局模式并不能完全让整台电脑的所有网络访问全部通过代理进行，比如终端命令就不可以。我打开全局代理后，然后在终端执行 curl ip.cn 命令，结果显示检查到的 IP 地址依然是本机真实的公网 IP:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="selector-tag">curl</span> <span class="selector-tag">ip</span><span class="selector-class">.cn</span></span><br><span class="line">当前 <span class="selector-tag">IP</span>：122<span class="selector-class">.225</span><span class="selector-class">.224</span><span class="selector-class">.218</span> 来自：浙江省杭州市 电信</span><br></pre></td></tr></table></figure><p>要让 shell 也使用代理，可以执行一下命令来设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意下面的端口号不一定是 1086</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><p>上面我使用的端口号是 1086，这是因为我的 ShadowSocks 客户端的偏好设置中如下所示的设置项是 1086:</p><p><img src="http://tao93.top/images/2018/10/18/1539842647.png" alt=""></p><p>但是每次都执行上面的 export 命令很麻烦，那么可以在 shell 的配置文件中设置 alias：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable proxy</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">"export ALL_PROXY=socks5://127.0.0.1:1086"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable proxy</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">"unset ALL_PROXY"</span></span><br></pre></td></tr></table></figure><p>前两天我发现在家的时候，Android Studio 无法访问 Google 的 maven 仓库，即使我开全局代理也不行，即使我在 terminal 中按前面方法设置 proxy 并且使用 gradle 命令来构建也不行。</p><p>为此，我找到了向 gradle 设置 proxy 的方法，那就是在项目的 local.properties 文件（之所以选这个文件是因为这个文件一般是不纳入 git 管理的，所以我可以随便自定义地修改）加入下面的设置，即可让 gradle 使用代理：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.<span class="attribute">jvmargs</span>=-Xmx4536m <span class="attribute">-DsocksProxyHost</span>=127.0.0.1 <span class="attribute">-DsocksProxyPort</span>=1086</span><br></pre></td></tr></table></figure><p>上面的端口号和前面的方法中是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://shadowsocks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowSocks&lt;/a&gt; 是个很好的工具，它自带 PAC 模式和全局模式。&lt;/p&gt;
&lt;p&gt;不过这个全局模式并不能完全让整台电脑的所有网络
      
    
    </summary>
    
    
      <category term="ShadowSocks" scheme="http://tao93.top/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t let Your App Drain your Users&#39; Battery</title>
    <link href="http://tao93.top/2018/10/10/Don&#39;t%20let%20Your%20App%20Drain%20your%20Users&#39;%20Battery/"/>
    <id>http://tao93.top/2018/10/10/Don&#39;t let Your App Drain your Users&#39; Battery/</id>
    <published>2018-10-10T08:52:40.506Z</published>
    <updated>2018-10-10T10:12:02.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-drives-battery-Life"><a href="#What-drives-battery-Life" class="headerlink" title="What drives battery Life?"></a>What drives battery Life?</h3><ol><li>Hardware (Screen etc.)</li><li>Operating System</li><li>Apps &amp; Services</li><li>User Interaction</li></ol><h3 id="Efforts-to-improve-battery"><a href="#Efforts-to-improve-battery" class="headerlink" title="Efforts to improve battery"></a>Efforts to improve battery</h3><ol><li><a href="https://developer.android.google.cn/reference/android/app/job/JobScheduler" target="_blank" rel="noopener">Job Scheduler</a> (Since API 21)</li><li>Doze &amp; App Standby(Since API 23)</li><li>Doze on-the-go (Since API 24)</li><li>Background Limits (Since API 26)</li><li>Adaptive Battery, Background Restrictions etc. (Since API 28)</li></ol><p>Among the above <strong>only Job Scheduler</strong> could be directly leveraged by app developers in the code.</p><h4 id="Job-Scheduler-Since-API-21"><a href="#Job-Scheduler-Since-API-21" class="headerlink" title="Job Scheduler (Since API 21)"></a>Job Scheduler (Since API 21)</h4><p>Job Scheduler is suitable when we want to do something in a specified circumstance, such as:</p><blockquote><p>Batterry is not Low</p><p>With specified Netwoek Status</p><p>Is Charging</p><p>Storage is not Low</p><p>Device is Idle</p></blockquote><p>Without Job Scheduler, we may need to keep a service running to monitor specified system broadcast and then do what we want, which is not optimized for battery comparing to Job Scheduler. </p><p>Here is a simple example of Job Scheduler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(<span class="keyword">final</span> JobParameters params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// stuffs that consumes a lot of time like making a backup to the cloud</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// tell scheduler our job is done</span></span><br><span class="line">                jobFinished(params, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return true to tell scheduler our job is not finished.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sJobId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> JobScheduler mJobScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mJobScheduler = (JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.schedule_btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                scheduleAJob();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleAJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (JobInfo info : mJobScheduler.getAllPendingJobs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info.getId() == sJobId) &#123;</span><br><span class="line">                <span class="comment">// the last scheduled job is not finished yet</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build the jobInfo that requires charging, idle and network that won't charge.</span></span><br><span class="line">        JobInfo jobInfo = <span class="keyword">new</span> JobInfo.Builder(++ sJobId, <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MyJobService.class))</span><br><span class="line">                .setRequiresCharging(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiresDeviceIdle(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        mJobScheduler.schedule(jobInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Doze-Since-API-23"><a href="#Doze-Since-API-23" class="headerlink" title="Doze (Since API 23)"></a>Doze (Since API 23)</h4><p>Unplugged and stationary for a period of time, a device would be in doze mode, which restricts all apps regardless whether they targets api 23. However, the OS periodically exits Doze for a brief time to let apps complete their deferred jobs. The bried time slot is called Maintenance window. Below is a figure showing the mode changing:</p><p><img src="http://tao93.top/images/2018/10/10/1539151703.png" alt=""></p><p>In doze mode, the following are restricted:</p><ol><li>Network access is suspended</li><li>WakeLock is ignored</li><li>Standard AlarmManager alarms (setExact() and setWindow()) are deferred to the next maintenance window</li><li>No Wi-Fi scaning</li><li>No <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html" target="_blank" rel="noopener">Sync Adapters</a></li><li>No JobScheduler jobs</li></ol><p>Stuffs not restricted by Doze:</p><ol><li>FCM high priority msg</li><li>Alarms set with setAndAllowWhileIdle() and setExactAndAllowWhileIdle()</li></ol><p>Testing Doze:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the system into Doze mode</span></span><br><span class="line">adb shell dumpsys deviceidle force-idle</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit idle mode &amp; reactivate the device</span></span><br><span class="line">adb shell dumpsys deviceidle unforce</span><br><span class="line">adb shell dumpsys battery reset <span class="comment"># this also recovers charging</span></span><br></pre></td></tr></table></figure><h4 id="App-Standby-Since-API-23"><a href="#App-Standby-Since-API-23" class="headerlink" title="App Standby (Since API 23)"></a>App Standby (Since API 23)</h4><p>An app is idle if the followings are satisfies:</p><ol><li>No user touching for a certain period of time</li><li>No processes in the foreground (either as an activity or foreground service)</li><li>No notifications showing on the lock screen or in the notification center.</li><li>Not charging</li></ol><p>Testing App Standby:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># check whether your app is in standby mode. A 'Idle=false' output means not in standby mode</span></span><br><span class="line">adb shell am get-inactive &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the app into App Standby mode</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit Standby mode for your app</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Doze-on-the-go-Since-API-24"><a href="#Doze-on-the-go-Since-API-24" class="headerlink" title="Doze on-the-go (Since API 24)"></a>Doze on-the-go (Since API 24)</h3><p>A lighter Doze mode which activates when the phone is moving in our pockets or hands. Doze on-the-go allows WakeLock, Wifi Scaning and GPS etc, that’s why it’s lighter than former Doze mode introduced in API 23.</p><p>Ignore Doze configuration:</p><p><img src="http://tao93.top/images/2018/10/10/1539154768.png" alt=""></p><h4 id="Background-Limits-Since-API-26"><a href="#Background-Limits-Since-API-26" class="headerlink" title="Background Limits (Since API 26)"></a>Background Limits (Since API 26)</h4><p>Background Limits affects apps that targets API 26 or higher and includes Background Service Limitations and Broadcast Limitations.</p><h5 id="Background-Service-Limitations"><a href="#Background-Service-Limitations" class="headerlink" title="Background Service Limitations"></a>Background Service Limitations</h5><p>For an app that targets API 26 or higher, it’s in background if:</p><ol><li>No visible Activity</li><li>No foreground Service</li><li>Not InputMethod Service, Wallpaper service etc.</li></ol><p>After several minutes of being in background, background services are stopped by the OS. Replacing background services with Scheduler Jobs is fine in many cases.</p><h5 id="Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26"><a href="#Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26" class="headerlink" title="Broadcast Limitations (Introduced in API 25 and strengthened in API 26)"></a>Broadcast Limitations (Introduced in API 25 and strengthened in API 26)</h5><p>For an app that targets API 26 or higher, it:</p><ol><li>can’t register receivers for implicit broadcasts in Manifest file</li><li>can register receivers for explicit broadcasts in Manifest file</li><li>can register receivers for any broadcasts runtimely</li></ol><p>Broadcasts that require a <a href="https://developer.android.com/guide/topics/manifest/permission-element.html#plevel" target="_blank" rel="noopener">signature permission</a> are exempted from this restriction.</p><p>In some cases, registering system broadcasts could be replaced by Scheduler Jobs, such as if we want to do something when the device is charging.</p><h3 id="Adaptive-Battery-Since-API-29"><a href="#Adaptive-Battery-Since-API-29" class="headerlink" title="Adaptive Battery (Since API 29)"></a>Adaptive Battery (Since API 29)</h3><p>A new feature based on Machine Learning.</p><ol><li>Limit battery for apps that are not used often.</li><li>Apps should be able to run quickly when they are needed.</li><li>Don’t bother users to manage manually.</li></ol><p>Apps are arranged into 4 standby buckets: <code>Active</code>, <code>Working set</code>, <code>Frequent</code> and <code>Rare</code>. Limits are increased from <code>Active</code> to <code>Rare</code>:</p><p><img src="http://tao93.top/images/2018/10/10/1539157914.png" alt=""></p><p>An app is in <code>Active</code> if it:</p><ol><li>has launched an activity</li><li>is running a foreground service</li><li>has a sync adapter associated with a content provider used by a foreground app</li><li>has a notification clicked by the user</li></ol><p>An app is in <code>Working set</code> if it runs often but isn’t active.</p><p>An app is in <code>Frequent</code> if it is used regularly, but not necessarily every day.</p><p>An app is in <code>Rare</code> if it is not often used.</p><p>Find out what bucket the app is currently in programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsageStatsManager.getAppStandbyBucket()</span><br></pre></td></tr></table></figure><p>Test Standby Buckets:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assgin your app into a specified bucket</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-standby-bucket &lt;packagename&gt; active|working_set|frequent|rare</span><br><span class="line"></span><br><span class="line"><span class="comment"># check bucket assignments for one app or all apps</span></span><br><span class="line"><span class="comment"># the output '10 20 30 40' mean Active, Working set, Frequent, Rare respectively</span></span><br><span class="line">adb shell am get-standby-bucket [&lt;packagename&gt;]</span><br></pre></td></tr></table></figure><h3 id="Battery-Saver"><a href="#Battery-Saver" class="headerlink" title="Battery Saver"></a>Battery Saver</h3><p>New battery saver in API 29:</p><ol><li>No red status bar and has animation</li><li>Location service is off when screen is off</li><li>Battery level threshold is adjustable</li></ol><p>Apps are encouraged to switch to dark theme when battery saver is on.</p><p>Check whether battery saver is on programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((PowerManager)getSystemService(Context.POWER_SERVICE)).isPowerSaveMode()</span><br></pre></td></tr></table></figure><p>Test battery saver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pretend to be in low battery status</span></span><br><span class="line">adb shell settings put global low_power 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset all configurations</span></span><br><span class="line">adb shell dumpsys battery reset</span><br></pre></td></tr></table></figure><h3 id="Background-Restrictions-Since-API-29"><a href="#Background-Restrictions-Since-API-29" class="headerlink" title="Background Restrictions (Since API 29)"></a>Background Restrictions (Since API 29)</h3><p>Two criterias:</p><ol><li>Apps targeting pre-Oreo and using background services</li><li>Excessive WakeLocks (&gt; 1hr in background)</li></ol><p>Background restrictions are decided by the users:</p><p><img src="http://tao93.top/images/2018/10/10/1539156945.png" alt=""></p><p>When Background Restrictions is enabled for an app, fllowings are restricted:</p><ol><li>Background jobs, alarms, services and network accessing</li><li>Location related updates </li><li>Foreground services</li></ol><p>Except GUI operation, Background restrictions could alse be finished via adb:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND allow</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-drives-battery-Life&quot;&gt;&lt;a href=&quot;#What-drives-battery-Life&quot; class=&quot;headerlink&quot; title=&quot;What drives battery Life?&quot;&gt;&lt;/a&gt;What drives b
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>通过 wifi 连接 adb</title>
    <link href="http://tao93.top/2018/09/26/%E9%80%9A%E8%BF%87%20wifi%20%E8%BF%9E%E6%8E%A5%20adb/"/>
    <id>http://tao93.top/2018/09/26/通过 wifi 连接 adb/</id>
    <published>2018-09-26T07:47:46.693Z</published>
    <updated>2018-09-26T07:47:46.694Z</updated>
    
    <content type="html"><![CDATA[<p>Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 类型的 native 库，并且也还会有一些其他局限性。</p><p>其实，真机也是可以用局域网无线连接的，只需要电脑和 Android 设备在同一个局域网内。大致步骤就是下面几条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先用数据线连接，确保 adb devices 可以看到设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 adb server 重新以 tcp 模式启动，端口指定为 5555</span></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑和手机之间建立无线连接</span></span><br><span class="line">adb connect &lt;IP address of your Computer&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拔掉数据线，此时再检查一遍是否无线连接成功</span></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>每次都想上面这样执行两三条命令显然太繁杂，尤其是其中还有一步要替换为电脑的当前内网 IP，所以应该写一个脚本来把上面的东西一键搞定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先断开一下</span></span><br><span class="line">adb disconnect</span><br><span class="line"></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep 两秒，不然的话因为刚执行 adb tcpip 5555 那么后续的命令会找不到 devices</span></span><br><span class="line">sleep 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装了黑域</span></span><br><span class="line">adb shell pm list packages | grep <span class="string">'me\.piebridge\.brevent'</span></span><br><span class="line">has_brevent=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$has_brevent</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 重新启动黑阈</span></span><br><span class="line">    adb -d shell sh /data/data/me.piebridge.brevent/brevent.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 android 设备的 IP 地址</span></span><br><span class="line">android_ip=`adb shell <span class="string">"ifconfig"</span> | grep <span class="string">'inet.*cast'</span> | awk <span class="string">'&#123;print $2&#125;'</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Android device IP: '</span> <span class="variable">$android_ip</span></span><br><span class="line">adb connect <span class="variable">$android_ip</span></span><br></pre></td></tr></table></figure><p>上面的脚本中，会检查是否安装了<a href="https://play.google.com/store/apps/details?id=me.piebridge.brevent&amp;hl=zh" target="_blank" rel="noopener">黑阈</a>，如果安装了，就会重新启动黑阈。黑阈是一款管理 Android 应用运行状态的应用，用来限制应用唤醒和常驻后台。Android 8.0 以上的系统，只要 USB 调试选项发生变更，黑阈就会停止起作用，所以此处需要重新让它运行起来。另外上面的脚本中还通过 ifconfig 命令来获取到电脑的内网 IP，用于执行 adb connect 命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
      <category term="adb" scheme="http://tao93.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>记一次混淆问题导致的 bug</title>
    <link href="http://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E7%9A%84%20bug/"/>
    <id>http://tao93.top/2018/09/26/记一次混淆问题导致的 bug/</id>
    <published>2018-09-26T07:47:46.691Z</published>
    <updated>2018-09-26T07:47:46.692Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 <a href="https://github.com/card-io/card.io-Android-SDK" target="_blank" rel="noopener">Card.IO</a> 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用了几个 so 库。只不过没有提供 armeabi 类型的 so 库，而只有 armeabi-v7a 和 armeabi-v8a 之类的 so 库。所以初次提供给公司项目使用时，出现了找不到 so 的错误，也就是 UnsatisfiedLinkError 错误。也就是下面这样的提示：</p><p><img src="http://tao93.top/images/2018/09/01/1535807292.png" alt=""></p><p>后面我想尽办法提供了 armeabi 类型的 so 库，这个问题就算告一段落了，然后这还不是结束。今天，测试又发了一段崩溃日志，也就是下面这样的日志：</p><p><img src="http://tao93.top/images/2018/09/01/1535807316.png" alt=""></p><p>因为之前出现过找不到 so 库的问题，所以乍一看上面的日志，我们都以为又是找不到 so 库 (为我们的菜表示羞愧 🤩)。然后经过上网查找，并和 native 的代码对比，我才意识到，上面的日志其实是 so 库是找到了的，只不过是加载 so 库时，调用 JNI_onLoad 这个 native 方法时出错了。此外，向测试要了 debug 包，发现没有问题，所以初步断定是混淆的问题，然后就是排查了。</p><p>我把测试提供给我的 release 包反编译，然后和 JNI_onLoad 方法中的 native 代码对比，终于找到原因了：release 包中，我提供的库的某个方法被混淆掉了，但是这个方法是需要被 JNI_onLoad 方法调用的。所以问题就是：一个需要被 so 库调用的 Java 方法被混淆了！其实，很多时候我们的项目引入一些著名的第三方包 (比如 Knife 之类的) 时，都会在我们的项目的 Proguard 配置文件中声明不要混淆这些三方包的代码，为的就是避免上面这个问题。说一句显得有点废话的话：第三方包发布混淆包时，他们的 Proguard 配置文件只能在他们的 aar 包构建时生效，而在他们的 aar 构建到我们的项目中时，他们的 Proguard 早已鞭长莫及不起作用了。</p><p>回到我遇到的这个问题，我们本地自测时，很少会进行混淆，本地的 release 默认都是未混淆的 (minifyEnabled 是 false)，所以自测的时候根本没有注意到这个问题。这次这个 bug 的解决办法之一是，在最终使用我的 aar 的项目中，显示声明不要混淆我这个 aar 中的某些代码，这就和上一段说的声明不混淆第三方包的代码是一样的。But，还有一种更好的方法，那就是使用 com.android.support.support-annotations 支持库中的 @Keep 注解，此注解可以标记哪些方法或者类在最终构建 apk 时不会被混淆掉 (当然在前面的 aar 构建等过程自然也不会混淆)。</p><p>总结一下，当前项目的 Proguard 配置文件只能在当前项目构建输出产物时起作用，而无法确保输出的产物交给其他项目集成时不被混淆。若要确保后者，那就可以用 support-annotations 支持库中的注解了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近把 &lt;a href=&quot;https://github.com/card-io/card.io-Android-SDK&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Card.IO&lt;/a&gt; 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记一个简单的递归问题与解法</title>
    <link href="http://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E6%B3%95/"/>
    <id>http://tao93.top/2018/09/26/记一个简单的递归问题与解法/</id>
    <published>2018-09-26T07:47:46.682Z</published>
    <updated>2018-09-26T07:47:46.691Z</updated>
    
    <content type="html"><![CDATA[<p>递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。</p><p>前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：</p><p><img src="http://tao93.top/images/2018/09/01/1535807089.png" alt=""></p><p>这个问题很明显是个递归问题。我当时就夸下海口说，10分钟给你写个 Python 脚本。虽然实际上用了接近 30 分钟。。。</p><p>言归正传，这个问题的递归关系包含两种，<strong>嵌套关系</strong>和<strong>并列关系</strong>。比如 2[a]3[c] 最外层是并列关系，即 2[a] 和 3[c] 是两个互相并列的子问题，他们的解答串起来就是 2[a]3[c] 的解答。而 2[2[a]] 最外层则是一个嵌套关系，即要求 2[2[a]] 的解答需要先求子问题 2[a] 的解答 (这个解答显示就是 aa)，所以问题化解为 2[aa]。</p><p>所以思路就是，对于一个问题 X，先按并列关系划分为若干个子问题 X1, X2, …, Xn；如果 n 大于 1，那么各个子问题的答案串起来就是答案了；如果 n 等于 1，那么说明 X 最外层并不是并列关系而是嵌套关系或者根本就是单个字母，如果 X 是单个字母，那么答案就是它本身，反之，那么 X 一定是 s[Y] 的形式，答案就是 s 个 Y 的答案串起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_loc</span><span class="params">(input, left)</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    i = left</span><br><span class="line">    <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> input[i] == <span class="string">']'</span>:</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> input[i] == <span class="string">'['</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'['</span> <span class="keyword">not</span> <span class="keyword">in</span> input:</span><br><span class="line">        <span class="keyword">return</span> input</span><br><span class="line">    first = input.find(<span class="string">'['</span>)</span><br><span class="line">    i = p_loc(input, first)</span><br><span class="line">    <span class="keyword">if</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">        parts = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">            parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">            input = input[i+<span class="number">1</span>:]</span><br><span class="line">            first = input.find(<span class="string">'['</span>)</span><br><span class="line">            i = p_loc(input, first)</span><br><span class="line">        parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">            res += do(part)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = p_loc(input, first)</span><br><span class="line">        sub_res = do(input[first+<span class="number">1</span>:right])</span><br><span class="line">        <span class="keyword">return</span> int(input[:first]) * sub_res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(do(<span class="string">'2[a]3[c]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]3[c]'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。&lt;/p&gt;
&lt;p&gt;前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/153580
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://tao93.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>日常修 Bug</title>
    <link href="http://tao93.top/2018/09/26/%E6%97%A5%E5%B8%B8%E4%BF%AE%20Bug/"/>
    <id>http://tao93.top/2018/09/26/日常修 Bug/</id>
    <published>2018-09-26T07:47:46.680Z</published>
    <updated>2018-09-26T07:47:46.681Z</updated>
    
    <content type="html"><![CDATA[<p>前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。</p><p><img src="http://tao93.top/images/2018/09/01/1535790364.png" alt=""></p><p>鉴于报告人没提具体的版本号，也没提怎么出现的，也没提是什么机型出现的，我就和报告人说沟通了一番。报告人说应该是小米 6 出现这个问题，我遂借了一部小米 6，然后运行 demo 并没有复现。现在就有两种可能，第一是只有报告人那台小米 6 有问题，第二是 demo 没问题但是集成到巴西版本后就有问题了。经过艰苦交涉，终于从对方那里要到了一个安装包后，我手里手机复现了此问题，事实很快就清楚了：demo 没问题但是集成后有问题，也就是和机型压根没关系。</p><p>先直接给出最后修复的方法，修复方法是在我的扫卡库的 activity 中，调用以下一行就 OK 了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 PhoneWindow 设置一个背景 </span></span><br><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br></pre></td></tr></table></figure><p>嗯，修复方法很简单，但是为什么这样做就 work 了呢？接下来就是调试的过程了.</p><p>首先获取一下这个界面的 layout 信息，尝试看看右侧白色细线是不是额外塞进去的视图，结果并不是。然后我再看是否是设置了什么 padding 导致了这个问题。事实上，正式这样的，可惜我可能是瞎了眼，居然没有看到下面的线索，即 DecorView 的右侧 padding 是 2：</p><p><img src="http://tao93.top/images/2018/09/01/1535790424.png" alt=""></p><p>我只看到了下面的 LinearLayout 的宽度是1438，比我的手机屏幕宽度1440少了2个像素，显然就是右侧的白线了。</p><p><img src="http://tao93.top/images/2018/09/01/1535790483.png" alt=""></p><p>所以我怎么办呢，我开始调试 measure 和 layout 的过程。因为 DecorView 的宽度是 1440 没错，可是它的 Child LinearLayout 宽度只有 1438，所以我先条件断点在 LinearLayout 类中的 onMeasure 方法。断点的条件我本来想写 getParent() instance DecorView，结果发现无法应用 DecorView，于是我就改成了 getParent() != null &amp;&amp; getParent().getParent() == null，其实这是不对的，DecorView 同样有 Parent，也就是 ViewRootImpl 对象，我把这个给忘了。所以断点条件就成了下面这样臃肿的了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent().getParent() == <span class="keyword">null</span> </span><br><span class="line"><span class="comment">// 当然其实还有更简洁的方式，比如下面这样 </span></span><br><span class="line">getClass().getName.endswith(<span class="string">"DecorView"</span>)</span><br></pre></td></tr></table></figure><p>然后发现不管是 measure 还是 layout 的过程，LinearLayout 宽度始终就是 1438，DecorView 就只给它留了这个大空间。然后我开始调试到 DecorView 的测量过程中，最后发现在 ViewGroup (这里仅仅是由于 DecorView 是继承自 ViewGroup 的) 的 measureChildWithMargins 方法中，找到了关键线索：</p><p><img src="http://tao93.top/images/2018/09/01/1535790538.png" alt=""></p><p>也就是上面的 mPaddingRight 的值居然是 2 而不是 0，这意味着 DecorView 的右侧 padding 是2，这样就能解释通为啥 DecorView 的 child 宽度小了 2 了。这是我赶紧回去看 layout 信息，然后就发现了我本来早就该发现的线索了。</p><p>OK，接下来是要知道，谁把 DecorView 的右侧 padding 加了 2 的。我对 View 类的 mPaddingRight 属性加了下图所示的断点：</p><p><img src="http://tao93.top/images/2018/09/01/1535790585.png" alt=""></p><p>果然，不一会儿，我就有了收获，得到了下面的堆栈：</p><p><img src="http://tao93.top/images/2018/09/01/1535790614.png" alt=""></p><p>上面堆栈清晰了展示了右侧 padding 是怎么被设置为 2 的，概括来说，就是 PhoneWindow 在准备 DecorView 时，检查到有一个 Drawable，然后在设置这个 Drawable 时，去设置了 padding。那么为什么设置 Drawable 需要设置 padding 呢？看下图就明白了：</p><p><img src="http://tao93.top/images/2018/09/01/1535790640.png" alt=""></p><p>原来，这是个自带 padding 的 NinePatchDrawable。接下来，我就查找了一下，发现这个 drawable 就是 PhoneWindow 中的 mBackgroundsource 属性解析而来。这个属性是从应用主题中指定的。现在回到前面我提前贴出的解决方法之一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT))</span><br></pre></td></tr></table></figure><p>上面的代码调用 PhoneWindow 的 setBackgroundDrawable 方法，这个调用除了设置 bg drawable 外，还直接让 mBackgroundsource 变为 0，所以后面就轮不到那个 NinePatchDrawable 了。</p><p>其实，上面的解决方法还是有点突兀，另一种方法是，在扫卡的库中设置一个主题，这样的话，就不会应用巴西版本乘客端项目中声明的主题了，自然也就不会把那个 NinePatchDrawable 设置进来。</p><p>再说点别的。这个扫卡的库，被集成到另一个库中，然后另一个库再集成到巴西版本中。中间这个库，我是没有涉足的。所以为么验证我有没有修复成功，我只能在最终的项目中再引用一下我的库经过改动后的版本，当然版本号也要增加一下。这样的话，就可以新的覆盖旧的，把中间那个库对扫卡库的引用给覆盖的。唉，真是折腾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/1535790364.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;鉴于报告人没
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>提高开发效率的各种工具</title>
    <link href="http://tao93.top/2018/09/26/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7/"/>
    <id>http://tao93.top/2018/09/26/提高开发效率的各种工具/</id>
    <published>2018-09-26T07:47:46.677Z</published>
    <updated>2018-09-26T07:47:46.680Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说，工欲善其事必先利其器。好用的开发工具，虽然不会直接改善我们写的代码，但是对于效率的提高和提高舒适度还是很有帮助的。本文意在提供一些不是非常普遍使用，但是对于效率提升可能非常有用的工具。话不多说，开始正文！</p><h4 id="剪贴板工具-—-Clipy"><a href="#剪贴板工具-—-Clipy" class="headerlink" title="剪贴板工具 —- Clipy"></a>剪贴板工具 —- <a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a></h4><p>剪贴板工具实在太实用了，不过似乎大部分程序员都没有用上剪贴板工具。而 Clipy 是一款很合适的剪贴板工具，以至于我想起它时，直接将它插到最前面，并且序号编为 0。Clipy 是一个开源的剪贴板工具，简洁不闹心，复制的图片和文本都可以管理，用起来很爽。</p><p><img src="http://tao93.top/images/2018/09/01/1535789967.png" alt=""></p><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p>这是个终端加强工具，macOS 和 Linux 都可用，把默认 shell 从 bash 改为 zsh，然后再加强一下。我只用的 oh-my-zsh 的 3 个 features，但这 3 个都是很有吸引力的。</p><p>第一、自带识别 git 项目目录的功能，直接显示分支名、有无未提交的本地修改；</p><p>第二、cd 时，直接不停的按 tab，指导选中了你想要的目录，然后回车，就可以进入想进入的目标，减少输入目录名前几个字母的劳累。</p><p>第三、这是个 killer feature，在终端输入任何几个字符，按向上的箭头，就可列出以这些字符开头的所有历史命令，这样很多需重复使用的命令、很久忽然想起需要再次使用的命令的使用方便了非常多，比如忽然想起 10 天前，使用 sed 命令搞了个事情，但是 sed 命令你懂的，压根记不住用法，怎么办？直接终端输入 sed 然后按向上箭头，立马调出 sed 开头的历史命令。</p><h4 id="local-Maven-仓库"><a href="#local-Maven-仓库" class="headerlink" title="local Maven 仓库"></a>local Maven 仓库</h4><p>自打谷歌一手将 Android 的构建工具切换到 Gradle 后，远程依赖变为用由 Gradle 配置从 Maven 仓库获取依赖。而除了 Jcenter、mavenCentral、Google 这样最常见 3 个公开 Maven 仓库外，现在很多公司内部会开发一些 SDK 或者工具包之类的，然后作为依赖放在公司内部的私有 Maven 仓库中，提供给公司内部使用。</p><p>问题来了，对于普通的开发者来说，有时候需要修改某个依赖的源代码并加以验证，但是又不想把修改后的代码马上就构建一个新版本的依赖传输到公司的 Maven 仓库。毕竟，天晓得自己要改多少次，如果一直往公司 Maven 仓库推，被别人看到了好像会感觉自己很菜的样子 ?。这时候，如果有一个本地的 Maven 仓库，那先传到本地 Maven 仓库，然后再从本地仓库获取依赖，就可以避免这个问题了，特别是对于一些文件比较大的依赖，这样速度也会更快。</p><p>这里说的 local Maven 仓库，不是 Gradle 中使用 mavenLocal() 来声明的那个仓库 (通常位于 ~/.m2/repository) 中，而是指自己在个人电脑上搭建一个 Maven 仓库，就和远程仓库一样，只不过域名使用 localhost 来访问即可。</p><p>方法其实比较简单，比如使用 Nexus OSS Maven 的话，在 macOS 系统上简直不要太容易，直接 brew install nexus，然后再 nexus start 就 OK了，此时在浏览器上面打开 <a href="http://localhost:8081/nexus" target="_blank" rel="noopener">http://localhost:8081/nexus</a> 就可以开始登录了，初始用户名和密码分别是 admin 和 admin123，登录之后，里面已经有了一些 repository 了，如下图所示：</p><p><img src="http://tao93.top/images/2018/09/01/1535790041.png" alt=""></p><p>我常用的就是上面 Snapshots 这个 repository，专门用来托管 SNAPSHOT 类型的依赖，关于 SNAPSHOT 类型的依赖，我会写一篇更全面详细的文章来讲怎么使用。</p><p>OK，现在就可以在向本地的 Maven 仓库传依赖包并拉取使用了。其实，局域网内其他同事也是可以访问这个 Maven 仓库的，比如 <a href="http://localhost:8081/nexus/content/repositories/snapshots/" target="_blank" rel="noopener">http://localhost:8081/nexus/content/repositories/snapshots/</a> 这个仓库，别的同事要访问我这个 snapshot 仓库的话，只需要他把 localhost 换成我的私有 IP 地址即可。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>为什么把 Python 列出来呢？因为其实 Python 入门是非常简单的，再加上这年头，不了解一下 Python 都不好意思说自己是程序员。而入门后，可以帮我们做点事情，比如下图中，表达式计算，进制转换:</p><p><img src="http://tao93.top/images/2018/09/01/1535790099.png" alt=""></p><p>其实 Python 可以做的事很多，通过引入 Python 自带的包或者第三方库的包，Python 几乎无所不能。举个例子，去年微信跳一跳小游戏刚出来时，我看这个游戏非常简单，我就想，能不能用 Python 做个自动化脚本来跳呢？当然可以！其实原理也很简单，对于每一跳，可以分为若干步：截图、分析图片得出需要跳跃的距离、根据距离来模拟一个长按事件。这样的三个步骤对于 Android 设备是很容易实现的。所以思路就是，使用 Python 调用 adb 工具来截图、pull 截图到电脑中；然后使用 Python 的照片处理库来分析照片的像素，找到跳的那个东西的位置和下一个方块的位置，这样就知道需要跳跃的距离了；调用 adb 模拟一个长按屏幕的事件，长按的时间和需要跳跃的距离成正比，至于这个比值系数，摸索几次测试一下就可以了。详见我的博客 <a href="http://tao93.top/2018/09/01/Python%20也能玩跳一跳小游戏/">Python 也能玩跳一跳小游戏</a>。</p><h4 id="我改进过的-JD-GUI"><a href="#我改进过的-JD-GUI" class="headerlink" title="我改进过的 JD-GUI"></a>我改进过的 JD-GUI</h4><p>恬不知耻的推荐一下我<a href="https://github.com/Tao93/jd-gui" target="_blank" rel="noopener">更改过的 JD-GUI</a>。<a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener">JD-GUI</a> 本来是一个开源项目，但是已经3年没有维护了。两年前，当时因为工作需要，我要频繁的解压 apk，把 dex 文件转成 jar，然后再用 JD-GUI 反编译查看代码注入效果，所以我就想，这么三个步骤能不能一步搞定。于是经过一个周末的努力，我小改了一下 JD-GUI，使其支持直接拖入 apk 文件，然后自动解压，自动调用 apktool 来将 dex 转成 jar 文件，然后再交给原 JD-GUI 反编译。PS：我非常贴心的提供了 macOS、Windows、Linux 三个平台的 binary 包。</p><h4 id="the-Unarchiver-for-macOS"><a href="#the-Unarchiver-for-macOS" class="headerlink" title="the Unarchiver for macOS"></a><a href="https://itunes.apple.com/cn/app/the-unarchiver/id425424353?mt=12" target="_blank" rel="noopener">the Unarchiver</a> for macOS</h4><p>macOS 自带的解压工具比较弱鸡，比如 jar 文件无法解压，一些别的压缩包解压时也会出幺蛾子。而这款 the Unarchiver for macOS 体积不大，简洁却可以应付几乎所有的解压场景，还能提供选择 charset 的机会，从而解压某些压缩包时避免文件名乱码。</p><h4 id="USTC-Mirror"><a href="#USTC-Mirror" class="headerlink" title="USTC Mirror"></a><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">USTC Mirror</a></h4><p>在此推荐一下中国科大开源镜像，这份镜像可以使得在国内访问很多开源软件的速度飞起来。</p><p>比如<a href="http://mirrors.ustc.edu.cn/help/pypi.html" target="_blank" rel="noopener">给 pip 设置代理</a>，可以让 pip 下载 Python 扩展包的速度快得飞起。</p><p>再比如使用<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp" target="_blank" rel="noopener">中国科大的 AOSP 镜像</a>，获取 AOSP 项目的源码 (几十 GB 大小) 的速度将要加快很多，如果不使用代理，那么从 <a href="https://source.android.com/setup/build/downloading" target="_blank" rel="noopener">Google 官方同步 AOSP 代码</a>，其难度你懂的。</p><p>再再比如，非常流行的 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，是 macOS 平台上使用命令行管理软件包及它们的依赖关系的工具，好比是 Linux 的包管理系统。此外 Homebrew 使用 cask tap 甚至还可以安装 Sublime text，Chrome 等许多的 GUI 软件，并自动建立软链接链接到 GUI 的软件的可执行文件，比如 Sublime text，使用 Homebrew 安装后，就可以在命令行使用 subl 即可打开 Sublime text 了。扯远了，Homebrew 同样存在在国内下载软件速度慢的问题，而同样，中国科大镜像提供了 <a href="http://mirrors.ustc.edu.cn/help/homebrew-bottles.html" target="_blank" rel="noopener">Homebrew 镜像</a>，能让绝大部分包的下载速度快起来。</p><p>最后，先对 USTC Mirror 的维护者表示感谢。然后，我想说这个镜像的内容非常多，绝大部分我也不了解，也就是还有很多可以深入探索的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;俗话说，工欲善其事必先利其器。好用的开发工具，虽然不会直接改善我们写的代码，但是对于效率的提高和提高舒适度还是很有帮助的。本文意在提供一些不是非常普遍使用，但是对于效率提升可能非常有用的工具。话不多说，开始正文！&lt;/p&gt;
&lt;h4 id=&quot;剪贴板工具-—-Clipy&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>常用的 Bash 命令总结</title>
    <link href="http://tao93.top/2018/09/26/%E5%B8%B8%E7%94%A8%E7%9A%84%20Bash%20%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://tao93.top/2018/09/26/常用的 Bash 命令总结/</id>
    <published>2018-09-26T07:47:46.676Z</published>
    <updated>2018-09-26T07:47:46.677Z</updated>
    
    <content type="html"><![CDATA[<p>这篇记录是我看 <a href="http://linuxcommand.org/tlcl.php" target="_blank" rel="noopener">The Linux Command Line</a> 后为了总结而写的，目的是便于自己随时查阅。The Linux Command Line 是我相当喜欢的一本电子书，它是一本值得一页一页看下去的书。</p><p><strong>cp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅复制目标目录不存在或者存在但是更旧的的项。 </span></span><br><span class="line">cp -u </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 file2 已经存在, file2 的内容会被 file1 的内容重写。如果 file2 不存在，则会创建它。 </span></span><br><span class="line">cp file1 file2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录 dir2 不存在，创建目录 dir2，操作完成后，目录 dir2 中的内容和 dir1 中的一样。如果目录 dir2 存在，则目录 dir1 和其中的内容将会被复制到 dir2 中。 </span></span><br><span class="line">cp -r dir1 dir2</span><br></pre></td></tr></table></figure><p><strong>mv</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅移动目标目录不存在或者存在但是更旧的的项。 </span></span><br><span class="line">mv -u </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录 dir2 不存在，创建目录 dir2，并且移动目录 dir1 的内容到目录 dir2 中，同时删除目录 dir1。如果目录 dir2 存在，移动目录 dir1( 它的内容)到目录 dir2 中。 </span></span><br><span class="line">mv dir1 dir2</span><br></pre></td></tr></table></figure><p><strong>rm</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 警惕不小心写出 rm * .html 这样的命令，这会删除当前目录的所有文件。</span></span><br></pre></td></tr></table></figure><p><strong>命令的4中形式</strong></p><ol><li>executable file, 可以是二进制的，也可以是文本形式的脚本；</li><li>builtins, 即 /bin 下面的 [, echo, kill, pwd, test 和 /usr/bin 下面的 alias, bg, cd, command, false, fc, fg, getopts, hash, jobs, printf, read, true, type, ulimit, umask, unalias, wait, which；</li><li>shell 函数</li><li>alias 定义的别名</li></ol><p><strong>type</strong></p><p>type是一个极其有用的命令，能立马找到当前环境能用的命令是源自哪里，是什么类型的。示例：</p><blockquote><p>➜  ~ type Python3<br>Python3 is /Users/didi/.bin/Python3<br>➜  ~ ls -l /Users/didi/.bin/Python3<br>lrwxr-xr-x  1 didi  staff  22  4 25 10:06 /Users/didi/.bin/Python3 -&gt; /usr/local/bin/python3<br>➜  ~ type [<br>[ is a shell builtin<br>➜  ~ type ls<br>ls is an alias for ls -G</p></blockquote><p><strong>where</strong></p><p>where命令的有用之处是它可以列出所有出现的地方，比如电脑里面有两个 git 可执行文件，那么 where git 可以把它们统统列出来。</p><p><strong>man 手册的章节含义</strong></p><ol><li>用户命令</li><li>程序接口内核系统调用</li><li>库函数程序接口</li><li>特殊文件，比如说设备结点和驱动程序</li><li>文件格式</li><li>游戏娱乐，如屏幕保护程序</li><li>其他方面</li><li>系统管理员命令</li></ol><p><strong>&gt; file_name</strong></p><p>巧妙的使用重定向，可以将文本文件的内容清空，也可以新建一个空文件。</p><p><strong>重定向的常见用法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖型重定向 stdout，可以省略那个 1 </span></span><br><span class="line">ls ~ 1&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加性重定向 stdout，可以省略那个 1 </span></span><br><span class="line">ls ~ 1&gt;&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖型重定向 stderr </span></span><br><span class="line">ls ~ 2&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加性重定向 stdout </span></span><br><span class="line">ls ~ 2&gt;&gt; out.txt</span><br></pre></td></tr></table></figure><p><strong>/dev/null</strong></p><p>随意放东西进去的垃圾箱</p><p><strong>花括号展开</strong></p><p>echo Front-{A..D}–Back 将会输出四项内容，即 {A..D} 表示从 A 到 D 一共四个情况。</p><p><strong>将命令执行结果展开</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只需要把命令放在 $() 里面即可，旧版 shell 也使用把命令放在 `` 中间的方式 </span></span><br><span class="line"><span class="built_in">echo</span> $(ls)</span><br></pre></td></tr></table></figure><p><strong>引号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双引号中，参数展开，算术表达式展开，和命令替换仍然有效，比如 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$USER</span> <span class="variable">$((2+2)</span>) <span class="variable">$(cal)</span>"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号中，所有展开都无效</span></span><br></pre></td></tr></table></figure><p><strong>命令行移动光标</strong></p><blockquote><p>ctrl a # 移动到行首</p><p>ctrl e # 移动到行末</p><p>alt &lt;- # 左移一个 word</p><p>alt -&gt; # 右移一个 word</p><p>ctrl u # 剪切整行内容</p><p>ctrl k # 剪切光标后面的内容</p><p>ctrl y # 粘贴</p></blockquote><p><strong>管理进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出终端相关进程</span></span><br><span class="line">ps </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有进程</span></span><br><span class="line">ps x </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有进程的详细信息</span></span><br><span class="line">ps aux </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示从终端启动的后台进程</span></span><br><span class="line"><span class="built_in">jobs</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 让指定序号的从终端启动的进程返回到前台</span></span><br><span class="line"><span class="built_in">fg</span> %JOB_SPEC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 让指定序号的从终端启动的进程返回到后台</span></span><br><span class="line"><span class="built_in">bg</span> %JOB_SPEC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给进程发送信号，最常见的信号是：</span></span><br><span class="line"><span class="built_in">kill</span> -SIG_NUM PID </span><br><span class="line">    1  HUP  挂起</span><br><span class="line">    2  INT  中断，和 ctrl c 的作用一样</span><br><span class="line">    9  KILL 杀死，这个信号并不会发给进程号是 PID 的进程，而是立即强制停止此进程，被杀进程就没有机会保存数据</span><br><span class="line">    15 TERM <span class="built_in">kill</span> 命令的默认信号，终止进程，被中止的进程有机会保存数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇记录是我看 &lt;a href=&quot;http://linuxcommand.org/tlcl.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Linux Command Line&lt;/a&gt; 后为了总结而写的，目的是便于自己随时查阅。The Lin
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://tao93.top/tags/Linux/"/>
    
      <category term="Bash" scheme="http://tao93.top/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>博客系统迁移记录</title>
    <link href="http://tao93.top/2018/09/26/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://tao93.top/2018/09/26/博客系统迁移记录/</id>
    <published>2018-09-26T07:47:46.674Z</published>
    <updated>2018-09-26T07:47:46.675Z</updated>
    
    <content type="html"><![CDATA[<p>此前我用的是 <a href="http://www.zblogcn.com/" target="_blank" rel="noopener">Z-blog 系统</a>，这个系统上手简单，不过仅支持在网页在线编写文章。这种方式弊端是比较死板，如果将来需要把文章移动到别的地方会很麻烦，而如果是用 MarkDown 来写文章就不会有这个麻烦了。本文就详细记录这次博客系统迁移的细节，包含 Linux 系统配置、Nginx 的配置、<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a> 的配置和 deploy 脚本等内容。</p><p>首先是，这次又把 VPS 的 Server 硬盘重置了，每次重置后都需要重新设置配置一遍 Linux 系统（我的 VPS 是 Ubuntu 16.04），所以这次记录一下配置的过程，也就是各种配置命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">adduser liutao <span class="comment"># add user, with root user</span></span><br><span class="line">usermod -aG sudo liutao <span class="comment"># add sudo permission, with root user</span></span><br><span class="line">su - liutao <span class="comment"># switch to user liutao</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update repository info</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure shadowsocks</span></span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">sudo mkdir /etc/shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># create config file</span></span><br><span class="line">sudo vim /etc/shadowsocks/ss.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:22222,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"your pass word"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:1000,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add service configuration info,.</span></span><br><span class="line">sudo vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># start shadowsocks service</span></span><br><span class="line">sudo systemctl start shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># start shadowsocks on startup</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># install linuxbrew</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># install oh my zsh, this dependends on zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line">vim .zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Nginx, MySQL, Php</span></span><br><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.5-full.tar.gz</span><br><span class="line">gunzip lnmp1.5-full.tar.gz</span><br><span class="line">tar xf lnmp1.5-full.tar</span><br><span class="line"><span class="built_in">cd</span> lnmp1.5-full</span><br><span class="line">sudo ./install.sh lnmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># install word-press</span></span><br><span class="line">wget https://wordpress.org/latest.zip</span><br><span class="line">unzip latest.zip -d wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment"># set root to be/home/liutao/wordpress</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">sudo nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后本地浏览器打开 http://tao93.top/ 开始设置 WordPress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create database named wordpress</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">&gt; create database wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在浏览器中填入刚刚的 database 名字，及其他信息</span></span><br><span class="line"><span class="comment"># 在 server 中的 WordPress 根目录中创建 wp-config.php 并填入浏览器页面显示的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 nginx 使用的 config 文件</span></span><br><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了解决一些权限问题，www 是 nginx 配置文件中声明的 web server 的 user name</span></span><br><span class="line"><span class="comment"># 这样就把 group 改为了 www，并且 group 用户都有 write 的权限</span></span><br><span class="line">sudo chgrp -R www &lt;root_dir_of_wordpress&gt;</span><br><span class="line">sudo chmod -R g+w &lt;root_dir_of_wordpress&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外还在 &lt;root_dir_of_wordpress&gt; 中的 wp-config.php 文件中插入了 define('FS_METHOD','direct'); 这样一行，不知道是不是必要的</span></span><br></pre></td></tr></table></figure><p>以上就是最终配置到 WordPress 的过程。之所以配置 WordPress，是因为我查到 WordPress 可以使用 Markdown，另外 WordPress 自带评论功能，插件和主题也非常丰富，所以就先使用 WordPress。结果发现 WordPress 的 Markdown 还需要安装插件才能支持，另外支持也不是很好，比如代码块会把比较长的行转行显示（即不是可以左右滑动），代码行号与高亮都没要。</p><p>所以，我还是痛下决心，换回到 hexo。hexo 比较简单，本地安装 hexo 后，在空目录中执行 hexo init 即可生成一堆相关文件，其中的 public 用来存放从当前 theme 和 markdown 文件生成的 static web 文件；而 source 目录用来存放 markdown 文件。简单使用步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in hexo root directory</span></span><br><span class="line">hexo g <span class="comment"># generate static web files</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment"># start local web server, then browse http://localhost:4000 to preview web pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy files in public to server's directory, therefore updated pages can be browsed at http://tao93.top/</span></span><br></pre></td></tr></table></figure><p>以上就是简单的用法，不过实际上我做了一些额外工作。例如为了避免 markdown 文件意外丢失，我们需要把它们备份到 server 上，server 和 local 同时丢失的可能性极小。另外，markdown 中插入图片时，可以先把图片放在本地，然后 markdown 中指向图片的本地路径，这样生成的 web 文件会把图片拷贝到 public 目录中某处，然后 html 文件引用 public 目录中的 image，这时的引用其实就是一个 url 了。但是我不是这样做的，我是先把要插入的图片拷贝到 Server 的 public 目录某处，这样就会得到一个指向次图片的 url，然后再 markdown 中直接使用这个 url。这样的话，只要 server 的图片库保持稳定，markdown 文件就不用和本地图片库绑定在一起。同样的，server 的图片库也需要备份到 local，以确保安全。下面就开始介绍以上两点。</p><p>首先是本地 source 目录需要备份到 server 上，我的方式是本地 source 目录使用 git 来追踪，然后 server 上简历一个 bare repository source.git，这样本地的每次 commit 都 push 到 server 上的 source.git，就可以作为备份了。相应的本地的 public 目录也要 push 到 server 上的 public.git 这样一个 bare repository，然后在 server 上的 public 中，从 public.git 这个 remote git pull 一下，这样 server 中的 public 就有了最新的 web 文件。</p><p>接下来是图片上传到 server 中，为了方便，我写了一个 Python 脚本，用来把本地图片上传到 server，或者把剪贴板的图片 (便于复制图片的情景) 上传到 server，然后将对应的 url 粘贴到剪贴板，这样的话，只需要执行这个 Python 脚本，就可以上传本地图片或者剪贴板上的图片，并把得到的 url 复制到剪贴板，然后就可以直接粘贴到 markdown 中。以下是这个 upload_pic.py 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab, Image</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># store image files in date format directory path in server</span></span><br><span class="line">date_path = now.strftime(<span class="string">'%Y/%m/%d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use timestamp as image file name in server</span></span><br><span class="line">f_name = str(int(now.timestamp()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># get picture in clipboard</span></span><br><span class="line">    im = ImageGrab.grabclipboard()</span><br><span class="line">    <span class="comment"># check whether it's a picture</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, Image.Image):</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># file name in server</span></span><br><span class="line">        f_name = str(int(datetime.datetime.now().timestamp())) + <span class="string">'.png'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># save in local</span></span><br><span class="line">        im.save(f_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># the url of the image</span></span><br><span class="line">        url = <span class="string">'http://tao93.top/images/'</span> + date_path + <span class="string">'/'</span> + f_name</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># copy the url to clipboard</span></span><br><span class="line">        os.system(<span class="string">"echo '%s' | pbcopy"</span> % url)</span><br><span class="line">        print(<span class="string">'url has been copied'</span>)</span><br><span class="line">        print(<span class="string">'copying...'</span>)</span><br><span class="line">        dest_path = <span class="string">'/home/liutao/hexo_blog/public/images/'</span> + date_path</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># mkdir in server and copy the image</span></span><br><span class="line">        os.system(<span class="string">"ssh liutao@tao93.top 'mkdir -p "</span> + dest_path + <span class="string">"'"</span>)</span><br><span class="line">        os.system(<span class="string">'scp '</span> + f_name + <span class="string">' liutao@tao93.top:'</span> + dest_path)</span><br><span class="line">        print(<span class="string">'copy finished'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># remove local image file</span></span><br><span class="line">        os.remove(f_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'clipboard content is not a image!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(sys.argv[<span class="number">1</span>]):</span><br><span class="line">        <span class="comment"># file name in server</span></span><br><span class="line">        f_name = str(int(datetime.datetime.now().timestamp()))</span><br><span class="line">        dot_loc = sys.argv[<span class="number">1</span>].rfind(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">if</span> dot_loc &gt;= <span class="number">0</span>:</span><br><span class="line">            f_name += sys.argv[<span class="number">1</span>][dot_loc:] <span class="comment"># append the file extension</span></span><br><span class="line">        </span><br><span class="line">        url = <span class="string">'http://tao93.top/images/'</span> + date_path + <span class="string">'/'</span> + f_name</span><br><span class="line">        os.system(<span class="string">"echo '%s' | pbcopy"</span> % url)</span><br><span class="line">        print(<span class="string">'url has been copied'</span>)</span><br><span class="line">        print(<span class="string">'copying...'</span>)</span><br><span class="line">        dest_path = <span class="string">'/home/liutao/hexo_blog/public/images/'</span> + date_path</span><br><span class="line">        os.system(<span class="string">"ssh liutao@tao93.top 'mkdir -p "</span> + dest_path + <span class="string">"'"</span>)</span><br><span class="line">        os.system(<span class="string">'scp '</span> + sys.argv[<span class="number">1</span>] + <span class="string">' liutao@tao93.top:'</span> + dest_path + <span class="string">'/'</span> + f_name)</span><br><span class="line">        print(<span class="string">'copy finished'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(sys.argv[<span class="number">1</span>] + <span class="string">' is not a file!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'too much arguments'</span>)</span><br></pre></td></tr></table></figure><p>为了简化步骤，我写了一个 deploy.sh 脚本放在本地 hexo blog 根目录中，这样只需要在 source 目录中编辑 markdown 文件，然后 commit，再调用 deploy.sh 脚本即可。此脚本把其他要做的事情都做了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># into source </span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure it's commited in source directory</span></span><br><span class="line">status=$(git status -s)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$status</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># git push in source</span></span><br><span class="line">    git push</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'not commited in source directory!'</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># back into parent directory</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate static web files</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># git push in local public directory</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update web files'</span></span><br><span class="line">git push</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull in server's public directory</span></span><br><span class="line">ssh liutao@tao93.top <span class="string">'cd /home/liutao/hexo_blog/public; git pull'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git commit in server's images directory</span></span><br><span class="line">ssh liutao@tao93.top <span class="string">'cd /home/liutao/hexo_blog/public/images; git add .; git commit -m "add images"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull in local's images directory</span></span><br><span class="line"><span class="built_in">cd</span> images</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'========='</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Finished!'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'========='</span></span><br></pre></td></tr></table></figure><p>这样上面的脚本就把生成 web 文件，拷贝 public 中的 web 文件拷贝到 server，把 server 中的 image 目录中的信息更新到 local 的 images 目录这样几个事情。</p><p>附：</p><p>如果要本地 git repo 没有 commit，remote repo 有 commit，现在需要本地的 master 分支 track remote 的 master 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先添加 origin，设置好 url</span></span><br><span class="line">git remote add origin liutao@tao93.top:/home/liutao/hexo_blog/public/images/.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后 fetch 一下 远程的状态</span></span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果 git pull --set-upstream-to 是不行的，会说本地 master 分支不存在，而需要下面这样才行</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此前我用的是 &lt;a href=&quot;http://www.zblogcn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Z-blog 系统&lt;/a&gt;，这个系统上手简单，不过仅支持在网页在线编写文章。这种方式弊端是比较死板，如果将来需要把文章移动到别的地
      
    
    </summary>
    
    
      <category term="Other" scheme="http://tao93.top/tags/Other/"/>
    
  </entry>
  
</feed>
