<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu Tao</title>
  
  <subtitle>A little older, a little wiser, but happy to see you.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tao93.top/"/>
  <updated>2019-11-06T20:45:34.327Z</updated>
  <id>https://tao93.top/</id>
  
  <author>
    <name>Liu Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin Summary</title>
    <link href="https://tao93.top/2019/11/04/Kotlin%20Summary/"/>
    <id>https://tao93.top/2019/11/04/Kotlin Summary/</id>
    <published>2019-11-04T16:44:56.826Z</published>
    <updated>2019-11-06T20:45:34.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Before-all"><a href="#1-Before-all" class="headerlink" title="1. Before all"></a>1. Before all</h3><h4 id="What’s-Kotlin"><a href="#What’s-Kotlin" class="headerlink" title="What’s Kotlin"></a>What’s Kotlin</h4><ol><li>By Jetbrains which created Intellij IDEA</li><li>Targeting JVM and more, interoperate with Java</li><li>Concise and safe, with many modern features</li></ol><h4 id="the-REPL-read-evaluate-print-loop"><a href="#the-REPL-read-evaluate-print-loop" class="headerlink" title="the REPL(read, evaluate, print, loop)"></a>the REPL(read, evaluate, print, loop)</h4><p>Install Kotlin commandline tools in macOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kotlin</span><br></pre></td></tr></table></figure><p>Execute <code>kotlinc</code> to start REPL</p><p><img src="http://tao93.top/images/2019/11/05/1572994981.png" alt=""></p><h3 id="2-Types"><a href="#2-Types" class="headerlink" title="2. Types"></a>2. Types</h3><h4 id="Built-in-types"><a href="#Built-in-types" class="headerlink" title="Built-in types"></a>Built-in types</h4><p><code>String, Char, Boolean, Int, Double, List&lt;T&gt;, Set&lt;T&gt;, Map&lt;K, V&gt;, Array&lt;T&gt;</code></p><p>Not like Java, Kotlin has no primitives (int, float etc.) hence avoids the boxing between primitives and objects. </p><p>However, in byte code generated by Kotlin, primitives are used to improve performance.</p><h3 id="3-Conditionals"><a href="#3-Conditionals" class="headerlink" title="3. Conditionals"></a>3. Conditionals</h3><h4 id="Conditional-operators"><a href="#Conditional-operators" class="headerlink" title="Conditional operators"></a>Conditional operators</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Operator</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">Evaluates whether the value on the left is less than the value on the right.</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">Evaluates whether the value on the left is less than or equal to the value on the right.</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">Evaluates whether the value on the left is greater than the value on the right.</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">Evaluates whether the value on the left is greater than or equal to the value on the right.</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">Evaluates whether the value on the left is equal to the value on the right (like equals in Java).</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">Evaluates whether the value on the left is not equal to the value on the right.</td></tr><tr><td style="text-align:center">===</td><td style="text-align:center">Evaluates whether the two instances point to the same reference (like == in Java).</td></tr><tr><td style="text-align:center">!==</td><td style="text-align:center">Evaluates whether the two instances do not point to the same reference.</td></tr></tbody></table></div><h3 id="4-Functions"><a href="#4-Functions" class="headerlink" title="4. Functions"></a>4. Functions</h3><h4 id="Kotlin-supports-file-level-functions"><a href="#Kotlin-supports-file-level-functions" class="headerlink" title="Kotlin supports file level functions"></a>Kotlin supports file level functions</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(fileLevelFunc())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fileLevelFunc</span><span class="params">()</span></span> = <span class="string">"file level"</span> <span class="comment">// expression function</span></span><br></pre></td></tr></table></figure><h4 id="Default-value-of-parameters"><a href="#Default-value-of-parameters" class="headerlink" title="Default value of parameters"></a>Default value of parameters</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    greeting(<span class="string">"Earth"</span>) <span class="comment">// default value for 2nd parameter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greeting</span><span class="params">(name: <span class="type">String</span>, greeting: <span class="type">String</span> = <span class="string">"good morning"</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"<span class="subst">$&#123;greeting.capitalize()&#125;</span>! <span class="variable">$name</span>."</span>) <span class="comment">// e.g. Good morning! Saturn.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Named-function-parameters"><a href="#Named-function-parameters" class="headerlink" title="Named function parameters"></a>Named function parameters</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    greeting(greeting = <span class="string">"Hello"</span>, name = <span class="string">"Earth"</span>) <span class="comment">// named parameters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greeting</span><span class="params">(name: <span class="type">String</span>, greeting: <span class="type">String</span> = <span class="string">"good morning"</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"<span class="subst">$&#123;greeting.capitalize()&#125;</span>! <span class="variable">$name</span>."</span>) <span class="comment">// e.g. Good morning! Saturn.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function-names-in-backticks"><a href="#Function-names-in-backticks" class="headerlink" title="Function names in backticks"></a>Function names in backticks</h4><p>It’s said this is useful to call Java methods whose names are reserved words in Kotlin, or to name some special methods.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> `😂`<span class="params">()</span></span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    `😂`() <span class="comment">// call a function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Inline-functions"><a href="#Inline-functions" class="headerlink" title="Inline functions"></a>Inline functions</h4><p>Kotlin support inline functions, which is good for performance.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">factorial</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        n * factorial(n - <span class="number">1</span>)  <span class="comment">// wrong, recursion is not allowed for inline functions</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Anonymous-functions"><a href="#5-Anonymous-functions" class="headerlink" title="5. Anonymous functions"></a>5. Anonymous functions</h3><p>An example of anoymous function:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numLetters = <span class="string">"Mississippi"</span>.count(&#123; letter -&gt;</span><br><span class="line">    letter == <span class="string">'s'</span></span><br><span class="line">&#125;)</span><br><span class="line">print(numLetters) <span class="comment">// would Prints 4</span></span><br></pre></td></tr></table></figure><p>The complete structure of an anoymous function should be like:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> funcVariable: (ParamType1, ParamType2) -&gt; ReturnType = </span><br><span class="line">&#123; param1: ParamType1, param2: ParamType2 -&gt;</span><br><span class="line">...</span><br><span class="line">expression_to_be_returned <span class="comment">// no return keyword, just put the expression here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Parameter types are usually omitted when they caould be inferred. Single parameter’s name could be omitted if its type could ba inferred, and we take <code>it</code> as the parameter name. Unused parameter name could be marked as <strong><code>_</code></strong>.</p><p>Examples:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numLetters = <span class="string">"Mississippi"</span>.count(&#123;</span><br><span class="line">    it == <span class="string">'s'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> afterFilter = <span class="string">"Mississippi"</span>.filterIndexed(&#123; _, char-&gt;</span><br><span class="line">    char != <span class="string">'s'</span></span><br><span class="line">&#125;)</span><br><span class="line">print(afterFilter) <span class="comment">// prints Miiippi</span></span><br></pre></td></tr></table></figure><p><strong><em>Note</em></strong>: an anonymous function must be called immediately, assigned to a variable, or be passed as a parameter.</p><p>Anonymous functions as parameter is often in a different style when it is required as the <strong>last</strong> parameter in another function:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count starting from a specified index.</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">count</span><span class="params">(str: <span class="type">String</span>, startIdx: <span class="type">Int</span>, predicate: (<span class="type">Char</span>)</span></span> -&gt; <span class="built_in">Boolean</span>): <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.substring(startIdx).count(predicate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// style 1</span></span><br><span class="line">count(<span class="string">"Mississippi"</span>, <span class="number">5</span>, &#123;</span><br><span class="line">    it == <span class="string">'s'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// style 2, looks like definition of count, but actually it's anonymous function as parameter</span></span><br><span class="line">count(<span class="string">"Mississippi"</span>, <span class="number">5</span>) &#123;</span><br><span class="line">    it == <span class="string">'s'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Want to declare a function type that returns something like <code>void</code> in Java? You need the <code>Unit</code>.</p><p>You can also refer a non anonymous function as parameter in call to another function by using <code>::</code>. But I don’t think this is common.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isS</span><span class="params">(char: <span class="type">Char</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> char == <span class="string">'s'</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">val</span> numLetters = <span class="string">"Mississippi"</span>.count(::isS)</span><br></pre></td></tr></table></figure><h3 id="6-Null-Safety-and-Exceptions"><a href="#6-Null-Safety-and-Exceptions" class="headerlink" title="6. Null Safety and Exceptions"></a>6. Null Safety and Exceptions</h3><p>For nullable variables, there are some common solutions to handle potential null pointer exceptions.</p><p><strong>Safe call operator</strong>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beverage = readLine()?.capitalize() <span class="comment">// the type of beverage would be String?.</span></span><br></pre></td></tr></table></figure><p><strong>Nonnull assertion</strong>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beverage = readLine()!!.capitalize() <span class="comment">// your responsibility to avoid null pointer exception</span></span><br></pre></td></tr></table></figure><p><strong>Check before use</strong>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = readLine()</span><br><span class="line"><span class="keyword">var</span> beverage = <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123; <span class="comment">// type of beverage would be String.</span></span><br><span class="line">    result.capitalize() + result.toLowerCase()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, check before use isn’t always safe, e.g. a field of an object might be assigned null between your null checking and usage of the field. For such case, you would need a local variable to get rid of this risk:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> localVar = a.b</span><br><span class="line"><span class="keyword">if</span> (localVar != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// do something refers a.b</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Elvis operator</strong>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beverage = readLine()?.capitalize() ?: <span class="string">""</span>  <span class="comment">// type of beverage would be String.</span></span><br></pre></td></tr></table></figure><h4 id="Exceptions-in-Kotlin"><a href="#Exceptions-in-Kotlin" class="headerlink" title="Exceptions in Kotlin"></a>Exceptions in Kotlin</h4><p>Kotlin doesn’t require handling of those checked Exceptions of Java. Therefore you can do IO operations without try-catch and exception declaration in the method signature.</p><h3 id="7-Collections"><a href="#7-Collections" class="headerlink" title="7. Collections"></a>7. Collections</h3><h4 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (type, name, price) = aList  <span class="comment">// fetch the leading 3 elements from a list.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> (type, _, price) = aList <span class="comment">// skip elements in specified indexes.</span></span><br></pre></td></tr></table></figure><h4 id="protection-of-immutable-list-is-not-valid-at-runtime"><a href="#protection-of-immutable-list-is-not-valid-at-runtime" class="headerlink" title="protection of immutable list is not valid at runtime"></a>protection of immutable list is not valid at runtime</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(a <span class="keyword">as</span> MutableList&lt;<span class="built_in">Int</span>&gt;).<span class="keyword">set</span>(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">println(a) <span class="comment">// would print [100, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="8-Class-definition"><a href="#8-Class-definition" class="headerlink" title="8. Class definition"></a>8. Class definition</h3><h4 id="Visibility-modifiers-of-class-members"><a href="#Visibility-modifiers-of-class-members" class="headerlink" title="Visibility modifiers of class members"></a>Visibility modifiers of class members</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Modifier</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">public (default)</td><td style="text-align:center">The function or property will be accessible by code outside of the class. By default, functions and properties without a visibility modifier are public.</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">The function or property will be accessible only within the same class.</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">The function or property will be accessible only within the same class or its subclass.</td></tr><tr><td style="text-align:center">internal</td><td style="text-align:center">The function or property will be accessible within the same module.</td></tr></tbody></table></div><h4 id="Class-fields"><a href="#Class-fields" class="headerlink" title="Class fields"></a>Class fields</h4><p>For class fields, default <code>getter</code> is available for <code>val</code> and <code>var</code> fields. But <code>setter</code> is only for <code>var</code> fields. Yet we can override the default <code>setter</code> and <code>getter</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>(_name: String, _age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a field always return capitalized string when you get it</span></span><br><span class="line">    <span class="keyword">val</span> name = _name</span><br><span class="line">        <span class="keyword">get</span>() = field.capitalize()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a field only allows increasing</span></span><br><span class="line">    <span class="keyword">var</span> age = _age</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; field) &#123;</span><br><span class="line">                field = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can override the visibility of a setter to make it less permissive then field’s visibility. E.g., you want to make a field readable everywhere but only writable in the file:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>(_age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// a field only allows increasing in current file.</span></span><br><span class="line">    <span class="keyword">var</span> age = _age</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; field) &#123;</span><br><span class="line">                field = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Computed-fields"><a href="#Computed-fields" class="headerlink" title="Computed fields"></a>Computed fields</h4><p>Has getter or/and setter but no real fields to store values.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> rolledValue</span><br><span class="line">        <span class="keyword">get</span>() = (<span class="number">1.</span><span class="number">.6</span>).shuffled().first()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Object-initialization"><a href="#9-Object-initialization" class="headerlink" title="9. Object initialization"></a>9. Object initialization</h3><h4 id="The-primary-contructor"><a href="#The-primary-contructor" class="headerlink" title="The primary contructor"></a>The primary contructor</h4><p>Add parameter list inside a pair of parenthesis after the class name, make it looks like a method. For fields <strong>with default getter and setter</strong>, you can declare them inside the parameter list by adding <code>var</code> or <code>val</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// visibility modifier and default values are also available</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="secondary-constructor"><a href="#secondary-constructor" class="headerlink" title="secondary constructor"></a>secondary constructor</h4><p>Must call the primary constructor or another secondary constructor(of course no cycle call)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(): <span class="keyword">this</span>(<span class="string">"Unknown"</span>)  <span class="comment">// call primary constructor with default parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apart from default parameter values, named parameters are also available for constructors.</p><h4 id="Lazy-initialization"><a href="#Lazy-initialization" class="headerlink" title="Lazy initialization"></a>Lazy initialization</h4><p>Only initialize a field when it’s accessed (by the getter)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span> <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        (<span class="number">0</span> until <span class="number">10</span>).shuffled().first()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-Inheritance"><a href="#10-Inheritance" class="headerlink" title="10. Inheritance"></a>10. Inheritance</h3><p>In Java, we only override methods. But in Kotlin, both class functions and fields could be overridden. Also, in Kotlin, classes, functions and fields must be marked <code>open</code> explicity to make them inheritable or able to be overridden. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> dangerLevel = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">description</span><span class="params">()</span></span> = <span class="string">"Room: <span class="variable">$name</span>\n"</span> +</span><br><span class="line">            <span class="string">"Danger level: <span class="variable">$dangerLevel</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span> = <span class="string">"Nothing much to see here..."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TownSquare</span> : <span class="type">Room</span></span>(<span class="string">"Town Square"</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> dangerLevel = <span class="keyword">super</span>.dangerLevel - <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span> = <span class="string">"The villagers rally and cheer as you enter!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Functions are final by default unless they are inherited from an open class. To prevent inherited functions from being overriden again, we can mark it <code>final</code>.</p><p>In Kotlin’s inheritance, we always have:</p><p><img src="http://tao93.top/images/2019/11/05/1572968935.png" alt=""></p><p>However, when compiled into bytecode, the class Room doesn’t inherits the class Any in JVM rule.</p><h3 id="11-Objects"><a href="#11-Objects" class="headerlink" title="11. Objects"></a>11. Objects</h3><h4 id="singleton-by-object-keyword"><a href="#singleton-by-object-keyword" class="headerlink" title="singleton by object keyword"></a>singleton by <code>object</code> keyword</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    UserManager.getUser(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constructors are not allowed for such objects</span></span><br><span class="line"><span class="keyword">object</span> UserManager &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> users = mutableListOf&lt;String&gt;(<span class="string">"A"</span>, <span class="string">"B"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">(idx: <span class="type">Int</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">return</span> users.getOrNull(idx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Anonymous-inner-class"><a href="#Anonymous-inner-class" class="headerlink" title="Anonymous inner class"></a>Anonymous inner class</h4><p>In java, we often implement interfaces or extend simple classes as anonymous inner class, such as click listeners and view adapters.</p><p>In Kotlin, they could be divided into 2 categories. For interfaces with only one method and declared in Java, we can use a format called Lambda:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">generateButton.setOnClickListener &#123; view -&gt;</span><br><span class="line">    fetchData()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">useI</span><span class="params">(i: <span class="type">I</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">useI(I &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// I.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For other cases, the format is like this:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">listView.adapter = <span class="keyword">object</span> : BaseAdapter() &#123;  <span class="comment">// call the constructor here.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(pos: <span class="type">Int</span>, view: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>?)</span></span>: View &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(pos: <span class="type">Int</span>)</span></span>: Any &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemId</span><span class="params">(pos: <span class="type">Int</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nested classes by default cannot access members of the outer class, unless they are marked inner:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">outerFunc</span><span class="params">()</span></span> = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line">        init &#123;</span><br><span class="line">            outerFunc()  <span class="comment">// wrong, unable to access</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        init &#123;</span><br><span class="line">            outerFunc()  <span class="comment">// ok</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> UserManager &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> users = mutableListOf&lt;String&gt;(<span class="string">"A"</span>, <span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        init &#123;</span><br><span class="line">            users <span class="comment">// ok. this is nested class inside an object class.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Data-classes"><a href="#Data-classes" class="headerlink" title="Data classes"></a>Data classes</h4><p>Data classes are suitable for model, that’s what the <code>data</code> means.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span></span>(<span class="keyword">var</span> x: <span class="built_in">Int</span>, <span class="keyword">var</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> inFirstQuadrant = (x &gt;<span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Characteristics of the data classes:</p><ul><li><p>Implementation of <code>toString</code>, <code>equal</code> and <code>copy</code> regarding the fields declared in the primary constructor;</p></li><li><p>Must have a primary constructor whose all parameters are marked with <code>val</code> or <code>var</code>;</p></li><li><p>Cannot be <code>abstract</code>, <code>open</code>, or <code>inner</code>.</p></li></ul><h4 id="Operator-overloading"><a href="#Operator-overloading" class="headerlink" title="Operator overloading"></a>Operator overloading</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span></span>(<span class="keyword">var</span> x: <span class="built_in">Int</span>, <span class="keyword">var</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plusAssign</span><span class="params">(another: <span class="type">Coordinate</span>)</span></span> &#123;</span><br><span class="line">        x += another.x</span><br><span class="line">        y += another.y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> coo = Coordinate(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">coo += Coordinate(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="12-Generics"><a href="#12-Generics" class="headerlink" title="12 Generics"></a>12 Generics</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(<span class="keyword">val</span> name: String)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Novel</span></span>(name: String): Book(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Textbook</span></span>(name: String): Book(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookshelf</span>&lt;<span class="type">T: Book</span>&gt;</span>(<span class="keyword">vararg</span> <span class="keyword">val</span> books: T)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> shelf1 = Bookshelf(Novel(<span class="string">"A song of Ice &amp; Fire"</span>), Novel(<span class="string">"The load of the rings"</span>))</span><br><span class="line"><span class="keyword">val</span> shelf2 = Bookshelf(Novel(<span class="string">"A song of Ice &amp; Fire"</span>), Textbook(<span class="string">"Introduction to Algorithms"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T: CharSequence&gt;</span> <span class="title">count</span><span class="params">(cs: <span class="type">T</span>, startIdx: <span class="type">Int</span>, char: <span class="type">Char</span>)</span></span> =</span><br><span class="line">    cs.substring(startIdx).count &#123;</span><br><span class="line">        it == char</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1: List&lt;Book&gt; = listOf&lt;Novel&gt;(Novel(<span class="string">"A"</span>), Novel(<span class="string">"B"</span>))</span><br><span class="line"><span class="keyword">val</span> list2: MutableList&lt;Book&gt; = mutableListOf&lt;Novel&gt;(Novel(<span class="string">"A"</span>), Novel(<span class="string">"B"</span>)) <span class="comment">// wrong</span></span><br></pre></td></tr></table></figure><p>Actually the <code>List</code> interface is like this:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="type">out E</span>&gt; : <span class="type">Collection</span>&lt;<span class="type">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here <code>out</code> means: any fields of a List whih the generic type <code>E</code> must be <code>val</code>. Thus <code>E</code> is a type only for readable fields.</p><p>On the other hand, there is <code>in</code>, which means a generic type is only for writable variables:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="type">in T</span>&gt; </span>&#123; <span class="comment">// no fields of type T can be available to outside</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> item: T? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setItem</span><span class="params">(newItem: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        item = newItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a: A&lt;Novel&gt; = A&lt;Book&gt;()</span><br></pre></td></tr></table></figure><p>The wildcard in Java generics has some similarities with the <code>in</code> and <code>out</code> in Kotlin, but they are not equivalent concepts.</p><h3 id="13-Extensions"><a href="#13-Extensions" class="headerlink" title="13. Extensions"></a>13. Extensions</h3><p>Based on anonymous function and generics, Kotlin brings the extensions, which enable us to extend classes with new functions and fields without inheritance. The Kotlin standard library contains a large numbers of extensions.</p><p>The code below</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">count</span><span class="params">(str: <span class="type">String</span>, startIdx: <span class="type">Int</span>, predicate: (<span class="type">Char</span>)</span></span> -&gt; <span class="built_in">Boolean</span>) =</span><br><span class="line">    str.substring(startIdx).count(predicate)</span><br><span class="line">    </span><br><span class="line">count(<span class="string">"Mississippi"</span>, <span class="number">5</span>) &#123;</span><br><span class="line">    it == <span class="string">'s'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>could be refactored as</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just like we have extended the String class, a final class.</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">count</span><span class="params">(startIdx: <span class="type">Int</span>, predicate: (<span class="type">Char</span>)</span></span> -&gt; <span class="built_in">Boolean</span>) =</span><br><span class="line">    substring(startIdx).count(predicate)</span><br><span class="line"></span><br><span class="line"><span class="string">"Mississippi"</span>.count(<span class="number">5</span>) &#123;</span><br><span class="line">    it == <span class="string">'s'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extend with fields is also available:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> String.countS</span><br><span class="line">    <span class="keyword">get</span>() = count &#123; it == <span class="string">'s'</span> || it == <span class="string">'S'</span> &#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">"Mississippi"</span>.countS) <span class="comment">// would print 4</span></span><br></pre></td></tr></table></figure><p>Like computed properties, extended fields have no backing fields, actually the extended fields has no essential differences with extended methods.</p><p>Visibility modifiers are also valid for the extensions.</p><p>Extensions on nullable types:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for such extension, the this is nullable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String?.<span class="title">printWithDefault</span><span class="params">(<span class="keyword">default</span>: <span class="type">String</span>)</span></span> = println(<span class="keyword">this</span> ?: <span class="keyword">default</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> s: String? = <span class="literal">null</span></span><br><span class="line">s.printWithDefault(<span class="string">"what?"</span>) <span class="comment">// no need to write s?. even when s is null.</span></span><br></pre></td></tr></table></figure><p>Generics in extensions:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">prt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span> + <span class="number">1</span>).prt()</span><br></pre></td></tr></table></figure><p>Extensions in Kotlin standard library:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>)</span></span> -&gt; R): R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usage of the <code>let</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span></span>(<span class="keyword">val</span> pair: Pair&lt;String, String&gt;?)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> y = Y(Pair(<span class="string">"hello"</span>, <span class="string">"world"</span>))</span><br><span class="line">y.pair?.let &#123;</span><br><span class="line">    println(it.first + <span class="string">" "</span> + it.second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> p = y.pair</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">    println(p.first + <span class="string">" "</span> + p.second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extension function type:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> greetings: String.() -&gt; <span class="built_in">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"Hello "</span> + <span class="keyword">this</span>.capitalize())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"Mississippi"</span>.greetings()</span><br></pre></td></tr></table></figure><p>Another extension in Kotlin standard library:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls the specified function [block] with `this` value as its receiver and returns its result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">run</span><span class="params">(block: <span class="type">T</span>.()</span></span> -&gt; R): R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File(<span class="string">"x.txt"</span>).run &#123;</span><br><span class="line">    setReadable(<span class="literal">true</span>)</span><br><span class="line">    setWritable(<span class="literal">true</span>)</span><br><span class="line">    setExecutable(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-Java-Interoperability"><a href="#14-Java-Interoperability" class="headerlink" title="14. Java Interoperability"></a>14. Java Interoperability</h3><h4 id="Nullity"><a href="#Nullity" class="headerlink" title="Nullity"></a>Nullity</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in java side, mark non-private fields, return type and parameter type</span></span><br><span class="line"><span class="comment">// with annotations, thus helps Kotlin side handle nullity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> String x = <span class="string">"x"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> String f(<span class="meta">@NotNull</span> String y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jetbrains created their annotations like this:<br><img src="http://tao93.top/images/2019/11/05/1572992024.png" alt=""></p><p>While the annotations by Google is like this:<br><img src="http://tao93.top/images/2019/11/05/1572992106.png" alt=""></p><h3 id="File-level-Kotlin-members"><a href="#File-level-Kotlin-members" class="headerlink" title="File level Kotlin members"></a>File level Kotlin members</h3><p>Let’s say we have a kotlin file Hello.kt which is:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in Hello.kt file</span></span><br><span class="line"><span class="comment">// by default, the Hello.kt would generate a JVM class as HelloKt, </span></span><br><span class="line"><span class="comment">// but we can change it like the following line.</span></span><br><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// file level members would be static members in generated JVM class</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> = <span class="string">"hello from kotlin."</span></span><br></pre></td></tr></table></figure><h3 id="Kotlin-functions-with-default-parameter-values"><a href="#Kotlin-functions-with-default-parameter-values" class="headerlink" title="Kotlin functions with default parameter values"></a>Kotlin functions with default parameter values</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add this annotation to make it generates several overloaded JVM methods</span></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(name: <span class="type">String</span> = <span class="string">"Unknown"</span>, age: <span class="type">Int</span> = <span class="number">0</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Access-members-of-companion-object-in-Java"><a href="#Access-members-of-companion-object-in-Java" class="headerlink" title="Access members of companion object in Java"></a>Access members of companion object in Java</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmField</span>  <span class="comment">// with this, H.x is valid in Java, or it would be H.companion.x</span></span><br><span class="line">        <span class="keyword">val</span> x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@JvmStatic</span>  <span class="comment">// with this, H.f is valid in Java</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h4><p>As we said earlier, Kotlin doesn’t require we to try-catch code blocks which may throw checked Java Exceptions or add a <code>throws</code> declaration in the method signatures. So if a Java method is called with <code>throws</code> declaration is called in kotlin, we might missed the exceptions warning by the Java method.</p><p>For Kotlin methods which would be called by Java and might throw checked exceptions, marked it with annotation:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> FileNotFoundException()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Referred-functions-of-Kotlin"><a href="#Referred-functions-of-Kotlin" class="headerlink" title="Referred functions of Kotlin"></a>Referred functions of Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in Test.kt file</span></span><br><span class="line"><span class="keyword">val</span> translator = &#123; utterance: String -&gt;</span><br><span class="line">    println(utterance.toLowerCase().capitalize())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function1&lt;String, Unit&gt; translator = RoomKt.getTranslator();</span><br><span class="line">        translator.invoke(<span class="string">"MONey"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What’s the <code>Function1</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A function that takes 1 argument. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function1</span>&lt;<span class="type">in P1, out R</span>&gt; : <span class="type">Function</span>&lt;<span class="type">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** Invokes the function with the specified argument. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(p1: <span class="type">P1</span>)</span></span>: R</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Corutines"><a href="#Corutines" class="headerlink" title="Corutines"></a>Corutines</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Before-all&quot;&gt;&lt;a href=&quot;#1-Before-all&quot; class=&quot;headerlink&quot; title=&quot;1. Before all&quot;&gt;&lt;/a&gt;1. Before all&lt;/h3&gt;&lt;h4 id=&quot;What’s-Kotlin&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://tao93.top/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>5 分钟提高 macOS 使用效率</title>
    <link href="https://tao93.top/2019/08/09/macOS%20%E6%95%88%E7%8E%87/"/>
    <id>https://tao93.top/2019/08/09/macOS 效率/</id>
    <published>2019-08-09T07:57:21.000Z</published>
    <updated>2019-10-10T23:22:36.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>提起 macOS，大家可能会想到精致、广告少、软硬搭配极佳、Unix 等等，这些也是 macOS 逐渐在软件开发者、设计师、文字工作者等群里中成为「标配」的原因。然而总结我这几年的使用经验，我认为有许多工具和方法，可以在默认的 macOS 基础上，更进一步提高我们的效率。本文基于 macOS 10.14.6，不比较 macOS 和其它系统孰优孰劣，而是针对「所有用户」和「程序员」两个群体分别分享一些我的经验，欢迎讨论和交流。另外，本文推荐的几乎都是免费或者开源的工具，嗯，我就是这么为大家的钱包着想（<del>我可不会说是因为我穷</del>）。</p><h3 id="对所有用户"><a href="#对所有用户" class="headerlink" title="对所有用户"></a>对所有用户</h3><h4 id="剪贴板管理"><a href="#剪贴板管理" class="headerlink" title="剪贴板管理"></a>剪贴板管理</h4><p>剪贴板管理工具帮我们维护文本和<strong>图片</strong>的复制历史，从而让我们能粘贴上上上上上上上上上上上上(<del>请不要说我凑字数</del>)…次复制的内容。显而易见这是对任何人都非常有用 enhancement，这也是为啥我把它放在第一个介绍。现在 <a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a> 等工具已集成了剪贴板管理的功能，不过，本着开源优先(<del>免费</del>)的原则，我要推荐的是 GitHub 上的 <a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a>，安装并稍微设置后，按下设定好的快捷键，就能出现下图的弹框：</p><p><img src="http://tao93.top/images/2019/08/03/1564845517.png" alt=""></p><p>然后只需要按上下方向键选择，就可以粘贴上上上上…次复制过的内容了。不过需要强调的是，在 Clipy 的<a href="https://github.com/Clipy/Clipy/releases" target="_blank" rel="noopener">下载页面</a>，务必下载 1.15 版本，因为 1.2.0 和 1.2.1 都有一个 bug 使得它无法将复制的图片纳入管理。</p><h4 id="软件卸载"><a href="#软件卸载" class="headerlink" title="软件卸载"></a>软件卸载</h4><p>众所周知，macOS 上安装软件一般是将一个 XXX.app 拖到一个 Applications 目录中，也就是一个拷贝的动作，完成这个后，我们就可以通过 Spotlight 搜索或者在 Launchpad 点击图标来打开它。事实上，XXX.app 其实是一个目录，而不是一个后缀为 app 的文件，这可以通过在 XXX.app 上右键，然后点击<code>Show Package contents</code>，如图：</p><p><img src="http://tao93.top/images/2019/08/03/1564845703.png" alt=""></p><p>XXX.app 目录包含一个软件运行起来所需的所有文件，但当我们打开一个新安装的软件，它往往会在一些别的地方 (不在 Applications 也不在 XXX.app 中) 生成一些配置文件。所以仅仅在 Applications 中删除 XXX.app 并不能移除生成的配置文件，从而如果哪天再次安装这个软件，老的配置依然会产生作用。若要彻底卸载软件，可以使用轻量级的 <a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a>，它可以帮我们搜索出需卸载软件的本体和所有配置文件，然后我们选择删除哪些：</p><p><img src="http://tao93.top/images/2019/08/03/1564846208.png" alt=""></p><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p>对于软件，其实我是能用系统自带的就用系统自带的，然而 macOS 上面的 <code>Archive Utility.app</code> 解压某些格式时会出错，也不能选择文本编码，所以就有必要使用第三方解压软件了，比如轻量的 <a href="https://theunarchiver.com/" target="_blank" rel="noopener">The Unarchiver</a> 了。</p><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p>同样的，macOS 的 <code>TextEdit.app</code> 也是不堪重任，就好比是 Windows 上的记事本一样。如果你也不知道自己该用什么文本编辑器，那 <a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> 是个很不错的选择。轻量、功能强大、定制行强、支持各种花式的插件，这就是 Sublime Text。我最喜欢它的一个功能是，在它的一个 tab 中写点东西，不用保存为文件就可以退出软件甚至关机，等下次打开它，一切内容都恢复了，这特别适合用来记点东西。</p><h4 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h4><p>窗口管理也就是把窗口放大缩写和挪动的操作。macOS 默认的窗口操作被一些人认为不如 Windows 好用，其实我认为稍微设置一下，就能让这些人的🤐啦。首先，macOS 其实不需要我们经常回到桌面，这有别于 Windows 的经常回到桌面点击图标启动软件。macOS 中，当需要切换到别的软件时，不应该用最小化 (快捷键 Cmd+M) 的操作，因为永远不知道最小化后露出来的是哪一个软件，所以应该直接点击或 Cmd+Tab 前往想要去的软件，除非你的某个软件真的有见不得人的东西，别人来到你电脑前时你可以疾速地按下 Cmd+M 组合键。更别提最小化后，键盘操作将不能把该窗口拉回来，而只能靠点 击 (鼠标或触摸板)，而通常键盘操作更快速。</p><p>扯远了，回到窗口管理，如果愿意付费，可以选用 <a href="https://manytricks.com/moom/" target="_blank" rel="noopener">Moom</a> 或 <a href="https://www.folivora.ai/bettersnaptool" target="_blank" rel="noopener">BetterSnapTool</a> 两款付费软件，当然他们都可免费试用。它们提供足够的功能让我们花式管理窗口，快捷键也好，触发角也罢。如果你不想大动干戈，其实我们最需要的只有两个操作：窗口最大化(不是开启全屏视图)和窗口大小回退。前者让我们将当前软件填满屏幕，从而聚精会神工作(<del>摸鱼</del>)；后者意思是让窗口从最大化变回本来的大小。这两个操作一般可以通过 macOS 自带的 Zoom 操作，也就是 menu bar 中 Window 菜单下的 Zoom。这个 Zoom 默认没有快捷键，不过我们可以在系统中设置：<code>System Preferences.app</code> &gt; <code>Keyboard</code> &gt; <code>Shortcuts</code> &gt; <code>App Shortcuts</code>，然后点<code>+</code>按钮并如下添加：</p><p><img src="http://tao93.top/images/2019/08/04/1564848618.png" alt=""></p><p>此后按上面设置的快捷键，就能最大窗口化和回退窗口了。</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>快捷键的世界纷繁复杂，有时候甚至不小心触发了个什么快捷键却不知情，然后一脸😳。言归正传，适用最广，使用频率最高的少数基本快捷键才是最值得提的：</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Cmd + N</td><td style="text-align:center">一般是新建窗口</td><td></td></tr><tr><td style="text-align:center">Cmd + T</td><td style="text-align:center">一般是新建 Tab 标签页</td></tr><tr><td style="text-align:center">Cmd + ` (ESC 下方按键)</td><td style="text-align:center">在当前软件的不同窗口间切换</td></tr><tr><td style="text-align:center">Cmd + Shift + [</td><td style="text-align:center">当前窗口向左侧 Tab 切换</td></tr><tr><td style="text-align:center">Cmd + Shift + ]</td><td style="text-align:center">当前窗口向右侧 Tab 切换</td></tr><tr><td style="text-align:center">Cmd + W</td><td style="text-align:center">关闭当前 Tab 或当前窗口</td></tr><tr><td style="text-align:center">Cmd + Q</td><td style="text-align:center">彻底退出软件</td></tr><tr><td style="text-align:center">Ctrl + Cmd + Space</td><td style="text-align:center">卖萌时可用，试试你就知道了</td></tr><tr><td style="text-align:center">Option + Cmd + C</td><td style="text-align:center">复制文件或目录的路径</td></tr><tr><td style="text-align:center">Cmd + L</td><td style="text-align:center">Safari 与 Chrome 中 focus 地址栏</td></tr><tr><td style="text-align:center">Option + Cmd + Delete</td><td style="text-align:center">永久删除目录或文件</td></tr><tr><td style="text-align:center">F11</td><td style="text-align:center">扒开所有窗口看下桌面</td></tr><tr><td style="text-align:center">Cmd + ,</td><td style="text-align:center">进偏好设置，对几乎所有软件有效</td></tr></tbody></table></div><p>macOS 有 Mission Control 和 App Exposé 两个功能，分别有默认的快捷键 Cmd + ↑ 和 Cmd + ↓，前者显示所有窗口，后者显示当前软件的所有窗口。当然，它们还可以在触摸板设置中通过设置手势来触发。</p><p>Windows 中出现一个弹框时，我们可以按 Tab 键来切换 focus 到不同按钮上，然后按 Enter 或空格来代替点击按钮。macOS 其实也可以，但默认未开启，开启方法是：<code>System Preferences.app</code> &gt; <code>Keyboard</code> &gt; <code>Shortcuts</code>，然后 <code>Full Keyboard Access</code> 选中 <code>All controls</code> 即可。</p><p>在一些大键盘上，右侧会有很多没有存在感的按键，比如 Home 和 End。其实它们的作用之一是将光标移动到行首/行末，所以它们搭配上 Shift 按键，就可以快速选中当前光标至行首/行末的文本，即快捷键 Home/End + Shift。而要选中整行，也可先 Home 然后 End + Shift 即可。macOS 中，Home 和 End 可分别由 Cmd + ← 和 Cmd + → 实现，如此一来，按下 Cmd 和 Shift 再按左右方向键即可。</p><p>有时候我们想强退一些无响应的软件，可以按 Option + Cmd + ESC 然后在窗口中强退某个软件。如果你不记得这个快捷键，通常在 Dock 中右键图标也会有强退的选项。提到 ESC，顺便说一下，绝大部分各式各样的小弹框，都可以通过按 ESC 来把弹框关闭掉。</p><h4 id="光标要快"><a href="#光标要快" class="headerlink" title="光标要快"></a>光标要快</h4><p>如果你认为我说的是光标随鼠标或手指在触摸板上移动速度的快慢，那你就错啦！虽然我的确建议前面说的这个快慢可以…搞快点（毕竟这样可以减少有时候在触摸板上手指滑动一次还没到目的地，需要抬起手指接力继续滑动)，可我更想说的是<strong>长按</strong>键盘的左右方向键时，光标在字符之间移动的速度。首次使用 Mac 时，我就发现这个移动速度太慢，令人抓狂！幸而不就我就得知在 <code>System Preferences.app</code> &gt; <code>Keyboard</code> 中把 <code>Key Repeat</code> 和 <code>Delay Until Repeat</code> 都设置到最右侧，就能长按左右方向键时，光标比较快地移动了。</p><p>什么？你还要更快？嗯，办法也是有的，按住 Option 的同时，长按或连击左右方向键，光标将以英文 word 为单位移动，所以移动速度会更快。</p><h4 id="默认打开方式"><a href="#默认打开方式" class="headerlink" title="默认打开方式"></a>默认打开方式</h4><p>说到这个就想起 Xcode，但凡和代码有点关系的文件，macOS 都会默认让 Xcode 打开。发生这种情况时，我都是疾速地 Cmd+Q 退出 Xcode 然后在 Finder 中右键刚刚打开的文件，此时<strong>按住 Option</strong> 并在 <code>Always Open With</code> 菜单中选择我想要的软件，比如 <code>Sublime Text</code>，到这，Xcode 再也无法染指这个文件格式了 😏。</p><h4 id="简单管理启动项"><a href="#简单管理启动项" class="headerlink" title="简单管理启动项"></a>简单管理启动项</h4><p>Windows 中我们往往用各种电脑管家来限制某些软件开机自启的流氓行为，macOS 中这样的流氓少很多，但当真的有了的时候，或者我们偏要把某些软件设置自启 (比如我会把邮件客户端设置开机自启，这样电脑重启后，我不会忘记打开它而错过邮件通知，<del>嗯，我就是热爱工作</del>)。操作很简单，<code>System Preferences.app</code> &gt; <code>Users &amp; Groups</code> &gt; <code>Login Items</code>，然后不想要的 login item 删掉，想增加的加上，OK。推荐把每天都用的工具软件加上去，比如前面说的 Clipy。</p><h4 id="截屏与录屏"><a href="#截屏与录屏" class="headerlink" title="截屏与录屏"></a>截屏与录屏</h4><p>macOS 系统自带的截屏功能，在 <code>System Preferences.app</code> &gt; <code>Keyboard</code> &gt; <code>Shortcuts</code> &gt; <code>Screenshots</code> 中可一览无遗，如下图所示：</p><p><img src="http://tao93.top/images/2019/08/04/1564911138.png" alt=""></p><p>有截取全屏和截取选中区域并放到剪贴板；也有截取全屏和截取选中区域并<strong>作为文件保存</strong>到桌面，并且这种方式下，截图刚完成时桌面右下角会和 iOS 一样短时间内显示一个缩略图，点击它的话可以编辑刚刚的截图。以上功能无法截图到剪贴板同时提供编辑功能，此外录屏功能也是缺失的，所以安装第三方截图软件势在必行。</p><p>说出来可能有点 low，其实我截屏和录屏一直是用 QQ 内嵌的截图功能。对，就是腾讯那个 QQ。简单来说，QQ 这个截图工具是可以单独运行的，并不依赖 QQ 的运行，我把这个工具按上一条「简单管理启动项」中的方法设置为开机自启。这样不用管 QQ 的死活就可以一直使用它了。</p><p>步骤是：</p><ul><li>打开 QQ &gt; <code>Cmd + ,</code> 进入设置 &gt; <code>Function</code> &gt; 点 <code>Capture &amp; Record Screen</code> 右边的 <code>Preferences</code>，这时显示下面的设置界面：</li></ul><p><img src="http://tao93.top/images/2019/08/04/1564911840.png" alt=""></p><ul><li>设置好你想要的截屏快捷键和录屏快捷键，并确保<code>Runs in background after you quit QQ</code> 勾选上了。</li><li>在 Applications 的 QQ.app 上右键再点 <code>Show Package Contents</code>，然后按如下路径找到 <code>QQ jietu plugin.app</code>，最后将它拖进 Login Items 即可：</li></ul><p><img src="http://tao93.top/images/2019/08/04/1564912051.png" alt=""></p><p>至此，按下之前设置的截图快捷键，会出现 Screenshot，Screen Recording 和 Recognition 三个选项，分别是截屏、录屏、识别图片中的文本，功能还算够用的。</p><p><img src="http://tao93.top/images/2019/08/04/1564912278.png" alt=""></p><h4 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h4><p>关于 Finder，有一下几点建议：</p><ul><li>在 Finder 的设置中，将 <code>New Finder windows show</code> 改为使用频率最高的目录，比如 Download 或个人工作目录：</li></ul><p><img src="http://tao93.top/images/2019/08/04/1564912792.png" alt=""></p><ul><li>在 Finder 的设置中，将搜索设置为搜索当前目录 (默认居然是搜索整个 Mac 😢)：</li></ul><p><img src="http://tao93.top/images/2019/08/04/1564913032.png" alt=""></p><ul><li>在浏览目录或文件时，建议用下面的视图</li></ul><p><img src="http://tao93.top/images/2019/08/04/1564913106.png" alt=""></p><ul><li>建议多使用 Tab 标签页，而不是打开新的 Finder 窗口。</li></ul><h3 id="对程序员"><a href="#对程序员" class="headerlink" title="对程序员"></a>对程序员</h3><p>以下是面向程序员的内容<del>，非战斗人员请速速撤退</del>。</p><h4 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h4><p>网上很多文章一上来就是 <a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a>，不过我倒是觉得 macOS 自带的 Terminal 已经够强大了，并且字体更好看点，再说本着能用系统自带就不用第三方，我就一直默认使用 Terminal。</p><p>macOS 上 Terminal 窗口默认太小了，我们可以在其设置 &gt; Profiles &gt; Window &gt; Window Size 中设置更大的行列数，从而充分利用我们的屏幕，省去拖拽窗口边缘的行为。</p><p>如果时常使用 Terminal，以下快捷键是非常 Life Saving 的：</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + U</td><td style="text-align:center">清除已输入的内容</td></tr><tr><td style="text-align:center">Ctrl + A</td><td style="text-align:center">光标移动到行首</td></tr><tr><td style="text-align:center">Ctrl + E</td><td style="text-align:center">光标移动到行末</td></tr><tr><td style="text-align:center">Ctrl + K</td><td style="text-align:center">删除光标之后的内容</td></tr></tbody></table></div><p>细心的读者可能会发现上面快捷键都是使用反人类的 Ctrl 而不是 Mac 上的 Cmd，其实上面的快捷键历史非常悠久 (那时可能还没有苹果公司)，是从早期 Unix 系统流传下来，所以同样适用于 Linux (可能会有细微差别)。另外，之前「光标要快」讲的按住 Option 时按左右方向键来快速移动光标，在此同样适用。</p><p>顺带说下可能大家不知道的两个非常有用的命令，file 和 type。前者可根据文件 meta data 判断文件类型，后者可告知你一个命令是以下来源中的哪一种：内建命令 (比如 type, cd 等)、指定路径下的可执行文件、符号链接。另外如果电脑中不小心有两个某命令(比如两个 python)且都加入了 PATH 环境变量，<code>type xxx</code> 会显示当前使用的 xxx 的路径，而 <code>which -a xxx</code> 则显示所有已加入 PATH 环境变量 的 xxx。</p><h4 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h4><p><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a> 是久负盛名的开源项目，它几乎让 macOS 中 Zsh 的上手难度变为了 0。首先啰嗦一下，macOS 一直使用 bash 作为默认 Shell，这也是常见 Linux 发行版的做法。</p><p>我个人最喜欢 On My Zsh 的一下特性：</p><ul><li>按已输入文本搜索历史命令。大家都知道 bash 中按向上方向键可以一条条显示历史命令，而 On My Zsh 则可以比如输入 <code>adb shell</code> 后按向上方向键，显示的全部是 <code>adb shell</code> 开头的历史命令，这让我们更快找到想要的历史命令。</li><li>更简单的目录选择。比如输入 ls 后，按 tab 键，会显示当前目录所有 item，然后可以直接按上方向键选中 item 再按回车确认。</li><li>如果当前目录在 Git 项目中，会显示当前分支，以及是否有未提交改动的小叉叉。</li><li>更丰富的高亮色和主题定制功能。</li></ul><p>如果上面有你想要功能，请自行安装 😁</p><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 是又一个上万 star 的开源项目，大家可能早就知道了它，所以我就只简单说说。</p><p>Homebrew 自称是 macOS 上缺失的包管理器，的确如此，Linux 发行版有各种管理命令行软件包的包管理器，而 macOS 默认没有。</p><p>Homebrew 的 <a href="https://github.com/Homebrew/homebrew-core" target="_blank" rel="noopener">core repo</a> 为每个包维护一个 ruby 脚本文件，改文件记录了这个包的依赖信息，版本更迭信息，从哪里获取 binary 包或者源代码、编译方法等等信息。有了这些信息，Homebrew 就可以管理包的安装(包括下载源码编译的方式)、升级、卸载、依赖下载等，也就实现了包管理器的功能。这个 core repo 在我们本地也有一份，Homebrew 的 updating 其实本地的 repo pull 远程的变化，也就是这些 ruby 脚本的增删改给 pull 过来。软件包的名字是唯一性的，因而上述 ruby 脚本直接以软件包的名字命名，也是不会重复的。</p><p>值得一提的是，Homebrew 把 core repo 和后面讲到的 cask repo 叫做 tap，而 tap 里面管理的依赖包，叫做 formula，了解这些术语有利于看懂 Homebrew 的提示。</p><p>Homebrew 安装软件包，通常是在 <code>/usr/local</code> 目录中以该软件包名字为名建立目录，然后其中再以版本号为名建立目录，版本号目录中含有该版本的所有文件，且往往有个 bin 目录来包含软件包的可执行文件。也就是说，Homebrew 可以同事维护多个版本。而真正加入到 PATH 环境变量的其实是 <code>/usr/local/bin</code> 目录。Homebrew 每更新或安装一个软件包，<code>/usr/local/bin</code> 中都会更新或新建一个符号链接，来指向此软件包最新的版本的真正可执行文件。从而我们执行此符号链接，就可以运行最新的软件包。</p><p>Homebrew 管理的命令行软件，很多是 GNU 开源软件，这些软件的分发在国内有不少镜像，从而能加快我们的下载速度。为此，core repo 在国内也有镜像 (比如<a href="http://mirrors.ustc.edu.cn/help/brew.git.html" target="_blank" rel="noopener">中国科大的镜像</a>)，只不过这个镜像并非和 Homebrew 官方的 repo 完全一致，而是下载链接指向国内的一些软件源镜像，也只有这样才能真正加快下载软件包的速度。</p><p>此外，Homebrew 也支持一些 GUI 软件 (如 Google Chrome 和 Sublime Text 等) 的管理。GUI 软件的管理，是由 <a href="https://github.com/Homebrew/homebrew-cask" target="_blank" rel="noopener">cask repo</a> 来支撑的。使用 Homebrew 安装 GUI 软件，通常也会在 <code>/usr/local/bin</code> 中新建符号链接来，使我们可以在 Shell 中启动 GUI 软件。比如 Sublime Text 安装好后，就会有 subl 这个符号链接：</p><p><img src="http://tao93.top/images/2019/08/04/1564931295.png" alt=""></p><p>我们直接执行 <code>subl</code> 即可打开 Sublime Text，而 <code>subl</code> 加上文件名，还可打开指定文件。</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式在我们搜索、替换结构复杂的文本时非常有用。过去，程序员只能用 grep 和 sed 命令来使用正则表达式查找、替换文本，而现在，许多 IDE 和文本编辑器都支持在查找和替换时使用正则表达式。</p><h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>效率，在日常生活中是指同样时间内完成工作的多少。追求效率是无可厚非的，然而处在这样一个快节奏的现代社会中，有时候我们也需要慢下来，悠然和缓的操持我们的电脑，享受任务完成后的一刻宁静<del>，不然别人以为交给我们的任务太简单了</del>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;提起 macOS，大家可能会想到精致、广告少、软硬搭配极佳、Unix 等等，这些也是 macOS 逐渐在软件开发者、设计师、文字工作者等群里
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://tao93.top/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>给三星 tablet SM-T830 刷机</title>
    <link href="https://tao93.top/2019/07/10/Flash%20stock%20firmware%20in%20SM-T830/"/>
    <id>https://tao93.top/2019/07/10/Flash stock firmware in SM-T830/</id>
    <published>2019-07-11T03:54:34.000Z</published>
    <updated>2019-07-11T03:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>前天公司发给我一部三星 tablet 作为测试机，是 Tab S4 wifi 版，具体型号是 SM-T830，虽然不是我期待的 Pixel 3 XL，但是配置也还不错，加上屏幕也比较大。但是坑就坑在，这是一部国行的机器，没有 Google Mobile Service (GMS) 不说，还充斥了不少国内生态的杂物，比如系统设置中的 device storage 界面，居然写着「powered by 360」，还有一些预装的国内应用。</p><p>这时摆在我前面的有三种方法：第一，刷机刷入一个原生 Android 系统，这当然是最完美的；第二，找一个三星官方的但是是国外版的系统刷入，这种系统会有 GMS；第三，自己把确实的 Google 服务安装上去，凑活着用。</p><p>以上第一种方法，我在网上查了查，几乎不可能，因为这个 机型比较小众，网上根本没有给它刷原生系统的方法，就连 <a href="https://lineageos.org/" target="_blank" rel="noopener">LineageOS</a> 也没有支持这个机型。第二种方法，是比较可行的，这款 tablet 即使小众，也是在全球销售的，国外绝大部分地区销售的都是带有 GMS 的，此外这是个 WiFi 版机型，也不用担心运营商和网络制式的问题，所以刷成功的话，虽不是原生 Android，但也有完整可靠的 GMS 全件套。第三种方法，改动最小，但是也可能有后遗症，因为这样自行补充安装 Google service 的方式有可能是不完备可靠的，指不定啥时候就出点 bug。</p><p>所以我就开始实施第二种方法：刷入三星官方固件的国外版本，最后这件事折腾了我一天多。</p><h4 id="下载-错误的-固件包"><a href="#下载-错误的-固件包" class="headerlink" title="下载 (错误的) 固件包"></a>下载 (错误的) 固件包</h4><p>首先是获取固件包，在网上找了一通，找到了 xda 上的<a href="https://forum.xda-developers.com/galaxy-tab-s4/how-to/sm-t830-t830xxu1arh1-t3831918" target="_blank" rel="noopener">这个帖子</a>，里面贴出了存放在 Google drive 的适用于 SM-T830 的两个官方固件的链接，一个是法国版，另一个是阿拉伯联合酋长国版。帖子的作者还说，他对刷机可能出现的后果不负任何责任，提供这两个包只是让大家免收一些网站要收费才能下载固件包或者是付费才能提速下载的恶心。话说，SM-T830 的小众，从我搜遍 xda 也没找到几个和它相关的帖子即可略见一斑。</p><p>固件包大小约是 3.6 GB，起先我从浏览器直接下载 Google drive 上的固件包，网速很慢只有 100KB/S 的样子，下了挺久最后都失败了。后面我发现，先把固件添加到我自己的 Google drive 空间，然后在手机上的 Google drive 应用中下载，配合公司的网络环境，速度可以很快，差不多半个小时就下载好了。</p><h4 id="企图用虚拟机，失败"><a href="#企图用虚拟机，失败" class="headerlink" title="企图用虚拟机，失败"></a>企图用虚拟机，失败</h4><p>三星的内部刷机工具 odin，只能用 Windows 运行，我手里只有 Mac，所以我一开始希望用 virtual box 中的 win10 虚拟机来操作。我从硬盘里面把很久前备份的 win10 的 virtual disk image (也就是一个 .vdi 文件) 拷贝到电脑，然后以此新建一个虚拟机，成功的运行，但是鼓捣了半天，也无法让这个虚拟机连接 USB 设备，别说这台 tablet 不行，连 U 盘都不行。VirtualBox VM Extension Pack 安装了，在 win10 里面也安装了 Guest Additions，USB device filters 也配置了，就是不行，只能放弃，找同事借用 Windows 台式机。</p><p><strong>2019年1月1日更新</strong>：我后面 VirtualBox 装 Windows 虚拟机是可以连接到 Android 设备的，并且可以刷机，见<a href="https://tao93.top/2019/01/01/%E7%BB%99%E4%B8%89%E6%98%9F%20tablet%20SM-T830%20%E5%88%B7%E6%9C%BA[%E7%BB%AD]/">给三星 tablet SM-T830 刷机[续]</a> 的最后一部分</p><h4 id="失败的刷机"><a href="#失败的刷机" class="headerlink" title="失败的刷机"></a>失败的刷机</h4><p>在同事的台式机上操作之前，我在网上已经看了一段讲解刷机过程的视频，感觉挺简单的，就几个步骤而已。等到开始在 Windows 上面开始弄，我把固件包解压，然后用 odin 开始，这才发现那个视频其实过时了，视频中固件包解压后只有一个文件，但是我解压后其实有 4 个文件。其实这一点 Odin 中都已经提示了，new model 需要 4 个文件：</p><p><img src="http://tao93.top/images/2018/12/08/1544280785.png" alt=""></p><p>所以我的固件包是比较新的，所以有多个文件，但是仔细对比发现有点问题，odin 需要的是 BL, AP, CP, HOME_CSC 4 部分，但是我的固件包解压后 4 个文件的文件名是如下所示 (文件我已经删掉了，所以没法贴出完整文件名)：</p><blockquote><p>BL…<br>AP…<br>CSC…<br>HOME_CSC…</p></blockquote><p>相当于没有 CP 开头的，反而似乎有两个 CSC 的，这时我也没夺多管，依次点击 odin 中的 BL, AP, CP, CSC 四个安装，然后把 4 个文件都添加进去，然后就点 start 了，然后就失败了。于是我把 CP 和 CSC 需要的文件调换了一下，还是失败。</p><p>这时候我就查了一下为啥少了 CP 开头的文件，这才发现，原来 WiFi 版就是没有 CP 文件，这是和基带相关的，只有可插卡上网的版本才有。顺便也发现了我的 CSC… 和 HOME_CSC… 两个文件的区别，据说前者是彻底清空数据，后者会保留用户数据，所以这两个文件其实作用是类似的，其实我也注意到它们大小也非常相近，都是 180MB 左右。</p><p>于是我就空出 CP 那里不添加文件，其余 3 个添加上，然后 start，结果左边文本框停留在 ‘setupconnection..’，我一查，发现很多说卡在这一步的，纷纷在求 help。没办法我就只能继续查，有说要先运行 odin 后连接 USB 数据线的(试了不行)。查了一阵，终于查到一个看起来比较靠谱的<a href="https://forum.xda-developers.com/sprint-galaxy-s6/help/odin-stuck-setupconnection-t3574320" target="_blank" rel="noopener">方法</a>，依然是 xda 论坛上的：</p><p><img src="http://tao93.top/images/2018/12/08/1544281510.png" alt=""></p><p>我按照上面说的一步一步走，依然失败，但是没再卡在 setupconnection 了。我总结发现，odin 应该确实有 bug，明明设备连接正常，它就是卡在这一步，这时候可以这么做：1. 重新启动设备，1. 断开 USB 连接，3. 进入 downloading mode，4. 连接 USB 然后再在 odin 中 start，就不会卡在那一步了。</p><p>进入 Download 模式的方法：先关机，然后同时按住 Volumn Up 和 Power 键，等屏幕亮后立即松手，此时会进入 Recovery mode (三星自己的 recovery 或者第三方 recovery 比如 TWRP)。如果是三星的 recovery，选择 boot to bootloader 即可，如果是 TWRP，选择进入 Download 模式即可。</p><p>回到刚刚说的，虽然没卡在 setupconnection 了，但是依然失败，提示大概是：</p><blockquote><p><id:0 004=""> abl.elf</id:0></p><p><id:0 004=""> FAIL! (Auth)</id:0></p><id:0 004=""><p><id:0 004=""> Complete(Write) operation failed.</id:0></p><p><osm> All threads completed. (succeed 0 / failed 1)</osm></p></id:0></blockquote><p>以 abl.elf 为关键字又是一番在网上搜索，最后发现<a href="http://bbs.gfan.com/android-9245022-1-1.html" target="_blank" rel="noopener">这个帖子有</a>人遇到这个问题最后解决了：</p><p><img src="http://tao93.top/images/2018/12/08/1544281993.png" alt=""></p><p>起初我对「固件版本落后于现有版本」这句话不以为然，因为我觉得这不就意味着只能升级不能降级嘛，不科学。但后面我忽然想到，这句话意思可能是刷机不能刷那些版本比设备出厂时系统版本还更旧的固件，就上这个人确实解决了问题，并且我前面下的固件包都是 2018 年 8 月份的，确实有点旧，所以我开始想怎么下最新的用于 SM-T830 的固件。</p><h4 id="下载最新的固件包"><a href="#下载最新的固件包" class="headerlink" title="下载最新的固件包"></a>下载最新的固件包</h4><p>这时，就又回到开始找固件包的步骤了，网上满是假链接，或者是要注册，要交费的，找得人心累。不过，最后竟然找到一个叫 SamFirm tool 的神器，这个神器可以直接高速下载想要的最新固件，简直不能更棒。如下图所示，输入系统型号，然后选择 auto 模式来查找，就能找到最新的固件，并且下载速度还很快！<a href="https://forum.xda-developers.com/galaxy-tab-s/general/tool-samfirm-samsung-firmware-t2988647" target="_blank" rel="noopener">这个帖子</a>可以下载到这个神器。</p><p><img src="http://tao93.top/images/2018/12/08/1544283275.png" alt=""></p><p>如上图所示，准确地填入型号，填入要下载的固件的国家或地区代号（这里我要填的就是某个外国或国外地区，这样固件包才会有 GMS）。这个国家或地区代号可以从<a href="https://www.sammobile.com/firmwares/galaxy-tab-s4/SM-T830/" target="_blank" rel="noopener">这里</a>找到，我在上一张图中填入的是 XEF，其实就是代表法国。填好后勾选 Auto，然后点击 Check Update，即可检查到最新固件包的信息，我在今天（2018年12月8日）检查到的 SM-T830 的法国版最新固件包如上图箭头所示，是 2018年10月24日更新的。然后就可以在 SamFirm 右边点下载了。建议勾选 Decrypt automatically，否则 下载好固件包后还需要重新解密，费时间。</p><p>国家或地区代号截图：</p><p><img src="http://tao93.top/images/2018/12/08/1544283882.png" alt=""></p><h4 id="成功刷机"><a href="#成功刷机" class="headerlink" title="成功刷机"></a>成功刷机</h4><p>下载到最新固件后，解压，然后用 odin 依次填入 BL AP CSC 三个地方的文件，点 start，继续卡在 setupconnection，按照我之前的总结跳过这个 setupconnection，然后真正开始刷机，大概 10 分钟不到就刷好了。</p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>刷个机遇到的坑还真是挺多，把这些记录下来，说不定以后公司的国行设备需要刷机，这些记录就能派上用场了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;前天公司发给我一部三星 tablet 作为测试机，是 Tab S4 wifi 版，具体型号是 SM-T830，虽然不是我期待的 Pixel 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
      <category term="Firmware" scheme="https://tao93.top/tags/Firmware/"/>
    
      <category term="Samsung" scheme="https://tao93.top/tags/Samsung/"/>
    
  </entry>
  
  <entry>
    <title>再次将 hexo blog 放置到 Github Pages</title>
    <link href="https://tao93.top/2019/07/05/%E5%86%8D%E6%AC%A1%E5%B0%86%20hexo%20blog%20%E6%94%BE%E7%BD%AE%E5%88%B0%20Github%20Pages/"/>
    <id>https://tao93.top/2019/07/05/再次将 hexo blog 放置到 Github Pages/</id>
    <published>2019-07-06T02:59:53.000Z</published>
    <updated>2019-10-10T23:35:18.419Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插话"><a href="#插话" class="headerlink" title="插话"></a>插话</h4><p>电脑换了后，我把 hexo blog 整个目录拷贝到新电脑，然后新电脑安装 node，安装 hexo，用 npm 安装主题所需的依赖，然后 generate 出来的网页文件样式有问题，最后回退到 node v10 才解决。似乎 node 对历史版本的兼容性不佳，也可能是用 npm 安装的一些依赖没适配最新的 node，神坑！</p><h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>租了一年的阿里云位于香港的 VPS 到期了，但到期不是关键，关键是大约一个多月前，我的 VPS 彻底被屏蔽了，在国内 ping IP 都完全不通，只有境外才能正常访问。向阿里云反馈，对方建议我重新 deploy 一个 VPS。我以为重新 deploy 一下很简单，然而事实是重新 deploy 需要我重新下订单，然后用新订单来 deploy，原有订单就当废了。而阿里云只提供数据备份和恢复服务，用于将原 VPS 的数据迁移到新 VPS，并且这项服务也是收费的。这是在让人忍无可忍。还好原订单当时只剩一个多月，所以我打定注意不用阿里云了。</p><p>另外我简单试了一下 Vultr 的服务，先试了个 $2.5/Mo 的，结果发现只有 IPv6 而没有 IPv4。后面我申请退款，退款倒是很迅速，只是扣掉了我余额的一部分，工单里面询问，对方也只是说这个是协议规定，既然您已使用我们的产品、同意的协议，那么只能请您谅解。于是我对 Vultr 也无好感了。</p><p>加之听我的同学讲起了别的好使的翻墙方式，于是用 VPS 翻墙的需求也没什么了，于是我想到了用 Github Pages 来 host 我的 hexo blog。</p><h4 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h4><p>如我在 <a href="https://tao93.github.io/2018/09/26/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">博客系统迁移记录</a> 中所说，我使用自己写的一个 deploy.sh 脚本，这个脚本会将我的 Markdown 文件的改动 push 到 VPS 上（以作备份，避免本地电脑数据丢失），然后调用 hexo 在 public 目录生成网页文件，并 commit 再 push 到 VPS，从而让 blog 网页刷新，最后我 blog 中用到的图片，我都是放置到 VPS，然后自动生成 image url 并插入到 Markdown 中的，因此为防 VPS 数据丢失，这个脚本还把 VPS 中的图片目录 commit，然后在本地把图片目录 pull 下来。这样一来，图片和原始的 Markdown 文件，就都在本地和 VPS 中都有完整备份，一方数据丢失时，另一方可以被用来恢复数据。</p><p>当时能有这种备份思想，也是因为曾目睹一个朋友的事故。这个朋友也是用 VPS 来 host hexo blog，而 Markdown 文件只在本地有一份，某天他本地数据丢失了，最后他不得不借助 VPS 上的网页文件来重写 Markdown 文件，而他又是 blog 高产用户，可想而知这是多么繁琐。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>之前我有 3 git repo，分别是包含 Markdown 文件的 source，包含生成的网页文件的 public，还有就是 Image。前两者都是我本地 commit，然后 push 到 VPS，最后的 Image 则是 VPS 上不断增加新图片，然后 VPS 上 commit，本地再 pull。</p><p>现在改用 Github Pages 后，我只能有一个 repo (<a href="https://github.com/Tao93/Tao93.github.io)来" target="_blank" rel="noopener">https://github.com/Tao93/Tao93.github.io)来</a> host blog 所需要的网页文件和那些图片，所以我就把 Image 全部放进 public 中了，这样就少了 Image 这个 git repo。另外，Github Pages 是 https 的，所以我还需要在 hexo config 中把 http 改为 https。</p><p>另外，为了备份 Markdown 文件，我另外开了 <a href="https://github.com/Tao93/hexo-blog-post" target="_blank" rel="noopener">https://github.com/Tao93/hexo-blog-post</a> 这个 repo 来保存我的 Markdown 文件。</p><p>往后，我更新 blog 的流程就是：本地 source repo 中新增或修改 Markdown 文件，文件中需要插入图片时，把图片放入 <code>public/Images</code> 中指定路径，然后以此路径得到 image url 并使用该 url 来插入图片，最后在 source repo 中 commit；然后 deploy.sh 脚本先将 source repo push 到 <a href="https://github.com/Tao93/hexo-blog-post，然后调用" target="_blank" rel="noopener">https://github.com/Tao93/hexo-blog-post，然后调用</a> hexo 在 public 中生成网页文件，最后将 public repo push 到 <a href="https://github.com/Tao93/Tao93.github.io，至此" target="_blank" rel="noopener">https://github.com/Tao93/Tao93.github.io，至此</a> blog 网页就更新了。</p><p>从上面所讲可知，Markdown 文件和 Image 都是 Github 和本地都有，互为备份，确保安全。另外上面的插入图片，依然是使用我在 <a href="https://tao93.github.io/2018/09/26/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">博客系统迁移记录</a> 说的 upload_pic 脚本，这个脚本可以自动将我复制的图片文件或者是截图内容复制到 <code>public/images</code> 的按日期命名的目录并用时间戳命名，然后再 generate 一个生成的 url 并把 url 复制到我的剪贴板。因此我只需要复制或截图，然后再调用 upload_pic，就可以得到一个 url 用于在 Markdown 中插入图片。</p><p>最后，一年前买了阿里云 3 年的域名 tao93.top，我让它指向 tao93.github.io 了。</p><p>最后的最后，插入两张图片测试一下，一张是截图，另一张是复制图片文件。</p><p><img src="http://tao93.top/images/2019/07/06/1562381892.png" alt=""></p><p><img src="http://tao93.top/images/2019/07/06/1562381957.png" alt=""></p><p>&lt;完&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;插话&quot;&gt;&lt;a href=&quot;#插话&quot; class=&quot;headerlink&quot; title=&quot;插话&quot;&gt;&lt;/a&gt;插话&lt;/h4&gt;&lt;p&gt;电脑换了后，我把 hexo blog 整个目录拷贝到新电脑，然后新电脑安装 node，安装 hexo，用 npm 安装主题所需的依赖，然后 
      
    
    </summary>
    
    
      <category term="Hexo Blog" scheme="https://tao93.top/tags/Hexo-Blog/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义简易 PickerView</title>
    <link href="https://tao93.top/2019/04/07/Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E6%98%93%20PickerView/"/>
    <id>https://tao93.top/2019/04/07/Android 自定义简易 PickerView/</id>
    <published>2019-04-07T12:28:04.685Z</published>
    <updated>2019-07-05T14:01:31.229Z</updated>
    
    <content type="html"><![CDATA[<p>最近的做的一项 feature 中，需要使用类似于 iOS 的 UIPickerView 的控件，功能是通过滚动 item 来选择其中一个，也就是下图这样的：</p><p><img src="http://tao93.top/images/2019/04/07/1554640301.png" alt=""></p><p>Android SDK 倒是有一个 NumberPicker 和这个非常类似，不过 NumberPicker 设计有点问题，滚动很慢，即使是手指快速滑动，也只能滚动五六个 items，而 Github 上确实有不少优秀的实现，可以和 iOS 的 UIPickerView 非常相似，不过其代码有些复杂，以至于想要速读代码然后自己写一份也比较费时间。所以，我就想到自己基于 Android 的 ListView 写一个简单的自定义 PickerView。</p><p>既然使用 ListView，那么首先需要解决问题有如下几个：</p><ol><li>如何让所有 item 都能通过滑动而滚动到视图中间，从而表示该 item 被选中？</li><li>如果让 ListView 的 idle 状态变为离散的，而非本来的任意滚动状态都可以为 idle？</li><li>怎么获取当前选中的 item 的序号？</li></ol><p>第一个问题比较好办，在 list 的首尾各填充一些空白的 item，这样就能让用户可见的所有 item 都能滑动到正中间。第二个问题，我的做法是，如果手指离开时，ListView 缓慢滑动，那么就在速度低于某个阈值时，让它滑动到恰好将一些 item 显示出来而不要有某个 item 只显示一部分；而如果手指离开时 ListView 快速滑动，那么就在 ListView 刚刚变为 idle 状态时，让它就近滑动到「恰好将一些 item 显示出来」的状态。第三个问题好办，计算一下当前显示的所有 item 的 position 就能知道最中间显示的 item 的 position。</p><p>另外还有一些细节问题：</p><ol><li>需要在中间绘制上两条灰色水平线；</li><li>需要在 canvas 的最上层绘制不是正中间区域绘制半透明矩形，从而让非选中的 item 看起来是灰色的；</li><li>点击非选中的 item 时，需要滚动 ListView 让该 item 滑动到正中间。</li></ol><p>实现的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Adapter interface for &#123;<span class="doctag">@link</span> PickerView&#125; which is like UIPickerView on iOS. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PickerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** get resource id of layout for each item of the picker view. */</span></span><br><span class="line">    <span class="meta">@LayoutRes</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemLayoutResource</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** count of items in the picker view. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** text string for the item at the specified position. */</span></span><br><span class="line">    <span class="function">String <span class="title">getItemAt</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A view to let users to choose one item from a list, like UIPickerView on iOS.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PickerView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** the listView which is used to implement this PickerView */</span></span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line">    <span class="comment">/** the count of visible items, must be odd numbers, the middle item would be the the selected one. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> visibleCount = <span class="number">5</span>; <span class="comment">// 5 items visible by default</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> itemHeight;</span><br><span class="line"></span><br><span class="line">    Paint dividerLinePaint;</span><br><span class="line">    Paint greyLayerPaint;</span><br><span class="line">    <span class="comment">/** adapter for this pickerView */</span></span><br><span class="line">    PickerAdapter adapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerThickness;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerMarginLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> dividerMarginRight;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> velocityThreshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VelocityTracker velocityTracker = VelocityTracker.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PickerView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, <span class="keyword">final</span> <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        setWillNotDraw(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        itemHeight = getResources().getDimension(R.dimen.picker_view_item_height);</span><br><span class="line">        velocityThreshold = getResources().getDisplayMetrics().density * <span class="number">260</span>;</span><br><span class="line">        </span><br><span class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PickerView);</span><br><span class="line">        dividerThickness = ta.getDimension(R.styleable.PickerView_divider_thickness, getResources().getDisplayMetrics().density);</span><br><span class="line">        dividerMarginLeft = ta.getDimension(R.styleable.PickerView_divider_margin_left, <span class="number">0</span>);</span><br><span class="line">        dividerMarginRight = ta.getDimension(R.styleable.PickerView_divider_margin_right, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> dividerColor = ta.getColor(R.styleable.PickerView_divider_color, Color.LTGRAY);</span><br><span class="line">        ta.recycle();</span><br><span class="line"></span><br><span class="line">        dividerLinePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        dividerLinePaint.setColor(dividerColor);</span><br><span class="line">        dividerLinePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        dividerLinePaint.setStrokeWidth(dividerThickness);</span><br><span class="line">        greyLayerPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        greyLayerPaint.setColor(<span class="number">0xb0ffffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter)</span> </span>&#123;</span><br><span class="line">        setAdapter(adapter, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter, <span class="keyword">int</span> initPos)</span> </span>&#123;</span><br><span class="line">        setAdapter(adapter, <span class="number">0</span>, initPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set adapter and other two parameters.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visibleCount count of visible items in the picker, must be odd numbers. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initPos position of the initially selected item, 0 means the first item would be selected.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(PickerAdapter adapter, <span class="keyword">int</span> visibleCount, <span class="keyword">int</span> initPos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.getItemCount() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visibleCount &gt; <span class="number">0</span> &amp;&amp; visibleCount % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.visibleCount = visibleCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line"></span><br><span class="line">        listView = <span class="keyword">new</span> ListView(getContext());</span><br><span class="line">        addView(listView, <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (<span class="keyword">int</span>) (itemHeight * <span class="keyword">this</span>.visibleCount)));</span><br><span class="line">        listView.setOverScrollMode(View.OVER_SCROLL_NEVER);  <span class="comment">// remove over scroll effects.</span></span><br><span class="line">        listView.setVerticalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">        listView.setDivider(<span class="keyword">null</span>);  <span class="comment">// remove listView's dividers</span></span><br><span class="line"></span><br><span class="line">        listView.setOnScrollListener(<span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">                    <span class="comment">// scroll to nearest place that fit the selection properly.</span></span><br><span class="line">                    scrollToNearest();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> InnerAdapter());</span><br><span class="line">        <span class="keyword">if</span> (initPos &gt; <span class="number">0</span> &amp;&amp; initPos &lt; adapter.getItemCount()) &#123;</span><br><span class="line">            listView.setSelection(initPos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the position of the currently selected item, starting from 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSelectedPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listView.getFirstVisiblePosition();</span><br><span class="line">        View firstChild = listView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(firstChild.getTop()) &lt; firstChild.getHeight() / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> listView.getFirstVisiblePosition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> listView.getFirstVisiblePosition() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> superResult = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        </span><br><span class="line">        velocityTracker.addMovement(ev);</span><br><span class="line">        <span class="keyword">if</span> (ev.getActionMasked() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">float</span> yVelocity = velocityTracker.getYVelocity();</span><br><span class="line">            <span class="comment">// scroll to nearest proper place directly if the fling is very slow</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(yVelocity) &lt; velocityThreshold) &#123;</span><br><span class="line">                scrollToNearest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> superResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** scroll the listView to fit the nearest proper position */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToNearest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        View firstChild = listView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(firstChild.getTop()) &gt; Math.abs(firstChild.getBottom())) &#123;</span><br><span class="line">            listView.smoothScrollToPosition(listView.getLastVisiblePosition());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            listView.smoothScrollToPosition(listView.getFirstVisiblePosition());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        velocityTracker.recycle();</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw(canvas);</span><br><span class="line">        <span class="comment">//canvas.drawRect(0, itemHeight * 2, getWidth(), itemHeight * 3, dividerLinePaint);</span></span><br><span class="line">        canvas.drawLine(dividerMarginLeft, itemHeight * <span class="number">2</span> - dividerThickness, </span><br><span class="line">                getWidth() - dividerMarginRight, itemHeight * <span class="number">2</span> - dividerThickness, dividerLinePaint);</span><br><span class="line">        canvas.drawLine(dividerMarginLeft, itemHeight * <span class="number">3</span> + dividerThickness, </span><br><span class="line">                getWidth() - dividerMarginRight, itemHeight * <span class="number">3</span> + dividerThickness, dividerLinePaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw two transparent rectangles to make not selected items looks grey</span></span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), itemHeight * <span class="number">2</span> - dividerThickness, greyLayerPaint);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, getHeight() - <span class="number">2</span> * itemHeight + dividerThickness, getWidth(), getBottom(), greyLayerPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the adapter for the listView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// we would add visibleCount - 1 empty strings to the list View, so the count should plus visibleCount - 1.</span></span><br><span class="line">            <span class="keyword">return</span> adapter.getItemCount() + visibleCount - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// there're visibleCount - 1 items with empty text, they would be equally put at the starting and ending.</span></span><br><span class="line">            <span class="keyword">if</span> (position &lt; visibleCount / <span class="number">2</span> || position &gt;= getCount() - visibleCount / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> adapter.getItemAt(position - visibleCount / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> position;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                convertView = View.inflate(getContext(), adapter.getItemLayoutResource(), <span class="keyword">null</span>);</span><br><span class="line">                convertView.setBackgroundColor(Color.WHITE); <span class="comment">// to avoid the default touch effect of listView item</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// select a item when it's clicked by users</span></span><br><span class="line">            convertView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> cur = getSelectedPosition() + visibleCount / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span> (position &gt; cur) &#123;</span><br><span class="line">                        listView.smoothScrollToPosition(position + visibleCount / <span class="number">2</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt; cur) &#123;</span><br><span class="line">                        listView.smoothScrollToPosition(position - visibleCount / <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            TextView textView = convertView.findViewById(R.id.picker_text_view);</span><br><span class="line">            textView.setText((String) getItem(position));</span><br><span class="line">            <span class="keyword">return</span> convertView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些小细节。比如 ListView 的高度需要正好是 itemView 的奇数倍，这样才能恰好只显示一些 item，并且最中间显示其中一个 item。再比如为了避免 ListView 自带的点击 item 时的视觉效果，需要给 itemView 设置纯白色背景。</p><p>至此，一个简易的 PickerView 就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的做的一项 feature 中，需要使用类似于 iOS 的 UIPickerView 的控件，功能是通过滚动 item 来选择其中一个，也就是下图这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2019/04/07/15546
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一个不一样的 ANR</title>
    <link href="https://tao93.top/2019/01/18/%E4%B8%80%E4%B8%AA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%20ANR/"/>
    <id>https://tao93.top/2019/01/18/一个不一样的 ANR/</id>
    <published>2019-01-18T13:04:23.787Z</published>
    <updated>2019-07-05T14:03:18.662Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个 ANR 问题，拿到 traces 文件后，显示主线程的堆栈是下面这样的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.MessageQueue</span><span class="selector-class">.nativePollOnce</span>(Native method)</span><br><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.MessageQueue</span><span class="selector-class">.next</span>(MessageQueue<span class="selector-class">.java</span>:<span class="number">323</span>)</span><br><span class="line">at android<span class="selector-class">.os</span><span class="selector-class">.Looper</span><span class="selector-class">.loop</span>(Looper<span class="selector-class">.java</span>:<span class="number">135</span>)</span><br><span class="line">at android<span class="selector-class">.app</span><span class="selector-class">.ActivityThread</span><span class="selector-class">.main</span>(ActivityThread<span class="selector-class">.java</span>:<span class="number">5417</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>!(Native method)</span><br><span class="line">at com<span class="selector-class">.android</span><span class="selector-class">.internal</span><span class="selector-class">.os</span><span class="selector-class">.ZygoteInit</span><span class="variable">$MethodAndArgsCaller</span>.run(ZygoteInit<span class="selector-class">.java</span>:<span class="number">726</span>)</span><br><span class="line">at com<span class="selector-class">.android</span><span class="selector-class">.internal</span><span class="selector-class">.os</span><span class="selector-class">.ZygoteInit</span><span class="selector-class">.main</span>(ZygoteInit<span class="selector-class">.java</span>:<span class="number">616</span>)</span><br></pre></td></tr></table></figure><p>这样一段堆栈，在很多情况下表明主线程是正常的，即处在等待区下一条主线程消息的过程中，而不是陷在某个耗时特别长的消息中。</p><p>经过反复测试，最后确认这个 ANR 和设置了 Default UncaughtExceptionHandler 有关，问题代码可以简化成下面的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(<span class="keyword">final</span> Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, Thread.currentThread().toString());</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hello world"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="comment">//throw new RuntimeException("hello world!!");</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码的表现是，如果只让第 26 行抛出异常，那么一切看起来都正常，但是如果让第 29 行抛出异常，那么应用直接就无响应了。</p><p>经过一番查找与验证，我发现原因大致是，当一个 Java 线程抛出了未捕获的异常时，JVM 先会调用到 UncaughtExceptionHandler，然后再会把此线程停止掉。所以这段代码中，如果主线程抛出异常，那么第 6 行的方法结束后，主线程就会被 JVM 给停止掉，既然主线程都停止掉了，那自然就无响应了，也就会发生 ANR 了。</p><p>事实上，一般我们设置自定义 UncaughtExceptionHandler 时，都会在自定义的 uncaughtException 方法最后再调用一遍被我们顶替掉的系统默认的 UncaughtExceptionHandler，以便把应用 kill 掉，而这个例子，充分的显示了，当未捕获异常发生后，就算赖着不 kill 掉应用也是不行的，因为可能主线程都已经被停掉了。</p><p>关于 JVM 先调用 UncaughtExceptionHandler 然后把发生未捕获异常的线程停止掉的说法，见于 <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-11.html#jls-11.3" target="_blank" rel="noopener">Java Language Specification 11.3</a>，如下所示的片段：</p><p><img src="http://tao93.top/images/2019/01/18/1547816082.png" alt=""></p><p>那么主线程被停止掉，是个什么样的状态呢，我用下面的代码，把主线程的状态给输出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(<span class="keyword">final</span> Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, Thread.currentThread().toString());</span><br><span class="line">                Log.i(<span class="string">"uncaught"</span>, t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> Thread mainThread = Thread.currentThread();</span><br><span class="line">                Log.i(<span class="string">"&lt;&lt;&lt;"</span>, mainThread.getState().toString());</span><br><span class="line">                <span class="keyword">if</span> (thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                Log.i(<span class="string">"&lt;&lt;&lt;"</span>, mainThread.getState().toString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    thread.start();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hello world!!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 24 行和第 35 行一共会 4 此输出主线程的状态，结果如下面所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:24.308</span> 14533 14533 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">RUNNABLE</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:25.309</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:26.310</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br><span class="line">01<span class="selector-tag">-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:27.311</span> 14533 14570 <span class="selector-tag">I</span> &lt;&lt;&lt;     : <span class="selector-tag">NEW</span></span><br></pre></td></tr></table></figure><p>从上面代码可知，主线程从 RUNNABLE 状态变成了 NEW 状态，为什么是 NEW 状态，我也不清楚，也许将来对 JVM 了解更多了，会清除吧。</p><p>回到这个 ANR 来，这个例子说明，我们如果使用自定义的 UncaughtExceptionHandler，记得要把应用 kill 掉，还有 default 的 UncaughtExceptionHandler 是全局公用的，很容易会出现被顶替 (覆盖)，所以切记别随意调用，免得出现意料之外的问题。</p><p>修复这样的 ANR，分成两部分，第一部分是先移除或者修改不恰当的设置 UncaughtExceptionHandler 的代码，先消除 ANR，然后还需要把引发 ANR 的另一个原因，也就是未捕获的异常给修复掉，不然应用不会 ANR 了但是会 Crash。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近碰到一个 ANR 问题，拿到 traces 文件后，显示主线程的堆栈是下面这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 绘制圆形图片</title>
    <link href="https://tao93.top/2019/01/12/Android%20%E7%BB%98%E5%88%B6%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/"/>
    <id>https://tao93.top/2019/01/12/Android 绘制圆形图片/</id>
    <published>2019-01-12T10:38:32.256Z</published>
    <updated>2019-01-12T10:38:33.385Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，以免忘记，以备使用。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    Shader shader;</span><br><span class="line">    Matrix mat = <span class="keyword">new</span> Matrix();</span><br><span class="line">    Bitmap bitmap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a bitmap from the image resource what we want to draw</span></span><br><span class="line">        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon);</span><br><span class="line">        <span class="comment">// a bitmap shader, would be set into paint, here we use repeat tile mode, but since we'll</span></span><br><span class="line">        <span class="comment">// scale to make the bitmap fill the canvas just right, so there would be no repeat.</span></span><br><span class="line">        shader = <span class="keyword">new</span> BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);</span><br><span class="line">        <span class="comment">// after this, the paint would contains this bitmap.</span></span><br><span class="line">        paint.setShader(shader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        <span class="comment">// scale to make bitmap fill the canvas</span></span><br><span class="line">        mat.setScale((<span class="keyword">float</span>)getWidth() / bitmap.getWidth(), (<span class="keyword">float</span>)getHeight() / bitmap.getHeight());</span><br><span class="line">        shader.setLocalMatrix(mat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// draw a circle with the paint.</span></span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView2</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line">    <span class="keyword">private</span> Drawable mDrawable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView2</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line">        mDrawable = getResources().getDrawable(R.drawable.dossier_icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        <span class="comment">// make the path to be a circle whose diameter is width of the view.</span></span><br><span class="line">        mPath.reset();</span><br><span class="line">        mPath.addCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        <span class="comment">// drawable must setBounds before draw</span></span><br><span class="line">        mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// save current (default) clip</span></span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="comment">// make the clip to be the circle </span></span><br><span class="line">        canvas.clipPath(mPath);</span><br><span class="line">        <span class="comment">// draw the bitmapDrawable</span></span><br><span class="line">        mDrawable.draw(canvas);</span><br><span class="line">        <span class="comment">// restore default clip</span></span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView3</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    Paint mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    Paint whitePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap;</span><br><span class="line">    <span class="keyword">private</span> Matrix mat = <span class="keyword">new</span> Matrix();</span><br><span class="line">    <span class="keyword">private</span> Xfermode mXfermode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView3</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        mXfermode = <span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</span><br><span class="line">        whitePaint.setColor(Color.RED);</span><br><span class="line">        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dossier_icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        mat.setScale((<span class="keyword">float</span>)getWidth() / bitmap.getWidth(), (<span class="keyword">float</span>)getHeight() / bitmap.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// save current layer and create a new layer</span></span><br><span class="line">        <span class="keyword">int</span> count = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight(), mPaint);</span><br><span class="line">        <span class="comment">// draw a white circle in the new layer</span></span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">2</span>, whitePaint);</span><br><span class="line">        <span class="comment">// this xfer mode is src_in type, which could make image to be drawn in only previous white circle area.</span></span><br><span class="line">        mPaint.setXfermode(mXfermode);</span><br><span class="line">        <span class="comment">// draw bitmap in new layer</span></span><br><span class="line">        canvas.drawBitmap(bitmap, mat, mPaint);</span><br><span class="line">        <span class="comment">// this is necessary, or the influence would last</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// back to previous layer.</span></span><br><span class="line">        canvas.restoreToCount(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个方法中，方法二最简便易用，方法三最不推荐，因为新增一个 canvas layer 是开销很大的，这一点 saveLayerAlpha 方法的注释有说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，以免忘记，以备使用。&lt;/p&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>给三星 tablet SM-T830 刷机[续]</title>
    <link href="https://tao93.top/2019/01/01/%E7%BB%99%E4%B8%89%E6%98%9F%20tablet%20SM-T830%20%E5%88%B7%E6%9C%BA%5B%E7%BB%AD%5D/"/>
    <id>https://tao93.top/2019/01/01/给三星 tablet SM-T830 刷机[续]/</id>
    <published>2019-01-01T13:20:54.004Z</published>
    <updated>2019-07-05T14:04:33.387Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是，从 xda 上面<a href="https://forum.xda-developers.com/galaxy-tab-s4/help/lineage-development-t3852509" target="_blank" rel="noopener">这个帖子</a> 看到，有人在三星 Tab S4 平板上面刷了个类原生 Android 的系统，他表示用起来挺好，只不过 4 个扬声器只有底部两个可以发声。看到这个我心里就痒痒，因为三星的官方 rom 我并不喜欢，里面有三星的 app store，还有三星的一套账户系统，调试到系统代码的时候，行号也完全对不上(Pixel是可以对上行号的)，所以我也想给手里的 Tab S4 平板刷一个类原生系统。</p><p>然后我就在 xda 上面查了查，发现我应该需要先刷入一个 TWRP recovery，然后再使用 TWRP 刷入类原生系统。另外我也注意到，之所以能刷并没有适配 Tab S4 的 ROM，得归功于 Project Trable。谷歌提出 Project Trable 是为了让 Android 系统的开发和底层驱动的开发分离开，两者只要满足协议，就可以组合在一起，这样就可减小 Android 系统升级时厂商开发驱动的工作，从而让设备更快升级 Android 系统。Project Trable 也使得那些符合要求的设备，可以刷大量满足 Project Trable 要求的 General System Image (GSI)。Tab S4 就是符合 Project Trable 要求的，所以我就是要给它刷 GSI。</p><p>回到前面说的 TWRP 的事情，TWRP 官方并没有适配 Tab S4 的版本，不过我在<a href="https://forum.xda-developers.com/galaxy-tab-s4/development/recovery-twrp-3-2-3-1-galaxy-tab-s4-t3843211" target="_blank" rel="noopener">这个帖子</a>里面发现了用于 Tab S4 的非官方 TWRP，并写出了步骤：</p><ol><li>确认 OEM 已解锁；</li><li>设备进入 download 模式；</li><li>使用 odin 的 AP slot 来刷入 TWRP 压缩包，记得要取消勾选「Auto Reboot」;</li><li>关机，然后再进入 TWRP；</li><li>进入 TWRP，然后刷入 Forced encryption disabler patch，format DATA 一下；</li><li>进入 TWRP，刷入 Magisk 压缩包，于是设备就 root 了。</li></ol><p>步骤其实很简单，不过我在这里折腾了 3 天。我先按照上面的步骤来，结果发现进 TWRP 后就无法访问 internal storage，自然就刷不了 Forced encryption disabler patch。我试了非常多想法，比如重刷三星官方固件，刷更旧的官方固件(原因是这个帖子里面工具发出来时，官方固件还更旧一些，而我看到这帖子时已经更新到比较新了)，刷国行的官方固件，都不行，其中刷更低版本的固件还有限制即 BootLoader 不能降级，所以其实官方固件降不了多少级。我还看到了<a href="https://www.thecustomdroid.com/install-twrp-samsung-galaxy-tab-s4-root-guide/" target="_blank" rel="noopener">这种帖子</a>，里面告诉我说，需要先刷一个 DM-Verity patched boot，我也试了，发现刷完这个 DM-Verity patched boot 后直接无法进入系统，报 Verification Failed 错误，必须重置设备才行。翻遍 xda 那个 40 几页的帖子后，我发现其实这个帖子就是抄 xda 那个帖子，只不过抄的时候，xda 帖子上面的步骤确实第一步是刷 DM-Verity patched boot，不过后来 xda 帖子步骤更新了，成了现在这样的。</p><p>不是无法访问 internal storage 嘛，后来我买了个 micro SD 卡，插进设备，在 TWRP 中这个 micro SD 是可以访问的，所以我就可以继续刷入 Forced encryption disabler patch 并 format DATA，然后我就 boot loop 了，真气人。即使我再刷入 GSI，依然是 boot loop。</p><p>后来那个 xda 帖子的作者回复我说「全程没看到我刷 Magisk 的描述，但 Magisk 是必要的，否则会 boot loop」。我确实没刷 Magisk，因为我并没有像 root，我只想搞个 TWRP 然后刷 GSI 而已。于是我就刷了 Magisk，发现不在 boot loop 了，然后再<a href="https://github.com/phhusson/treble_experimentations/releases/tag/v108" target="_blank" rel="noopener">这里</a> 下载了 system-arm64-aonly-gapps-su.img.xz 这个 GSI 并刷入，这次终于成功了，进入了一个类似 AOSP user-debug 类型的 aosp 系统，很简陋，连 Contact，Settings，等这些应用都是 aosp 版本的，和正常的很不一样，相机应用则直接打开就 crash。顺便记录一下 TWRP 刷 GSI 的方法，很简单：</p><ol><li>进入 TWRP，wipe 一下；</li><li>进入 install，切换到 install image 模式，找到 GSI；</li><li>partition 选择 system image，flash；</li><li>重启</li></ol><p>关键是，这个 aosp 系统有些 bug，最受不了的 bug 是，锁屏、旋转时屏幕都会变形一下，截屏得到的图片也是会变形一下。这和我最初看到的 xda 帖子里面那人说的只是扬声器没有全部发声差远了。所以我就想找更好些的 GSI。问了那个人，结果没回复我。</p><p>最后找到了 <a href="https://forum.xda-developers.com/project-treble/trebleenabled-device-development/9-0-pixelexperience-p-t3833294" target="_blank" rel="noopener">Pixel Experience</a> ，虽然依然有一些 bug，不过感觉还可以。</p><p>放几张截图：</p><p><img src="http://tao93.top/images/2019/01/01/1546351524.png" alt=""></p><p>最后还有一点，这次我是用 Virtual Box 中的 Win 10 虚拟机刷的，让 VirtualBox 中的 Win 10 虚拟机连接上 Android 设备，需要给 VirtualBox 安装 extension pack，在 Win 10 虚拟机中安装 guest additions，然后还需要在此 win 10 虚拟机的设置中添加对应的 USB filter (需要设备连接上后才能添加)，并按照 USB 类型勾选 USB 2.0 还是 3.0，如下图所示：</p><p><img src="http://tao93.top/images/2019/01/01/1546352547.png" alt=""></p><p>最后，在设备连接上电脑后，把 win 10 的窗口放在最前面，然后再 macOS 的菜单栏勾选对应的 USB device，勾选的话，就是 win 10 虚拟机连接词 USB 设备，否则驾驶 macOS 连接此 USB device，如下图：</p><p><img src="http://tao93.top/images/2019/01/01/1546353760.png" alt=""></p><p><strong>2019 年 5 月 29 日更新</strong></p><p>最近得知三星已经给一些设备推送了 Android Pie 的更新，而组里面几部 Tab S4 都是运行国内版系统的国行机器，所以没有收到更新通知，所以我就有了把我手里的 Tab S4 刷回基于 Android Pie 的国外版三星系统。</p><p>步骤很简单，先用 SamFirm tool 下载基于 Android Pie 的 stock firmware 包，然后设备先进入 TWRP recovery (我之前刷了 TWRP，所以有这个)，然后点 Reboot 再点 Download 即可进入三星设备的 Download 模式，然后就是很简单地使用 odin 工具把系统刷进去就好了。</p><p>注意 Download 模式和 Recovery 是不一样的。TWRP 是 custom recovery，而三星自带的 recovery 是类似下面这样的:</p><p><img src="http://tao93.top/images/2019/05/29/1559062868.png" alt=""></p><p>即使用 TWRP 取代了自带的 Recovery，我们依然可以进入 Download 模式，从而用 odin 刷回到官方 firmware。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事情的起因是，从 xda 上面&lt;a href=&quot;https://forum.xda-developers.com/galaxy-tab-s4/help/lineage-development-t3852509&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="GSI" scheme="https://tao93.top/tags/GSI/"/>
    
      <category term="Project Treble" scheme="https://tao93.top/tags/Project-Treble/"/>
    
  </entry>
  
  <entry>
    <title>Android Toast 两个 Crash</title>
    <link href="https://tao93.top/2018/12/22/Android%20Toast%20%E4%B8%A4%E4%B8%AA%20Crash/"/>
    <id>https://tao93.top/2018/12/22/Android Toast 两个 Crash/</id>
    <published>2018-12-22T15:05:48.751Z</published>
    <updated>2019-07-05T14:01:06.385Z</updated>
    
    <content type="html"><![CDATA[<p>Toast 是 Android 系统一种非常简单的提示性小工具，最近我尝试修复 Toast 相关的两种 Crash，所以把相关的原委和过程记录了下来。先来看一下第一种 Crash 的 log:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy<span class="meta">@e</span>2815e is not valid; is your activity running?</span><br><span class="line">        at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">679</span>)</span><br><span class="line">        at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:<span class="number">342</span>)</span><br><span class="line">        at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">93</span>)</span><br><span class="line">        at android.widget.Toast$TN.handleShow(Toast.java:<span class="number">459</span>)</span><br><span class="line">        at android.widget.Toast$TN$<span class="number">2</span>.handleMessage(Toast.java:<span class="number">342</span>)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:<span class="number">154</span>)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6119</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br></pre></td></tr></table></figure><p>上面的 stack trace 中的代码全部是关于 UI 线程中处理一个消息的，这个消息需要做的是把 Toast 需要显示的 view 添加到 WindowManager 中，从而可以显示出来。这样的 crash 是没有任何 app 代码牵涉其中的，所以无法确定是 app 何处的代码导致的这个 crash。我们先来看看 Toast 显示的大致过程。</p><p>首先是通过 <code>Toast#makeText</code> 方法或者 <code>Toast</code> 构造函数创建 Toast 对象，然后就可以调用它的 show 方法了。不过此方法是异步的，它仅仅是将该 toast 添加到一个队列中，等待显示，即此方法不等 toast 真正显示就已经返回了，而 toast 的显示需要用一个新的 UI 线程消息中的代码来显示出来。</p><p><code>Toast#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show the view for the specified duration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mNextView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"setView must have been called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    INotificationManager service = getService();</span><br><span class="line">    String pkg = mContext.getOpPackageName();</span><br><span class="line">    TN tn = mTN;</span><br><span class="line">    tn.mNextView = mNextView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        service.enqueueToast(pkg, tn, mDuration);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// Empty</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 15 行是一个跨进程调用了 NotificationServiceManager 的方法，而作为参数的 TN 对象是实现了 <a href="https://developer.android.com/reference/android/os/IInterface" target="_blank" rel="noopener">IInterface</a> 的，所以可以通过 Binder 传给其他进程。Toast 真正的显示，需要等 NotificationServiceManager 回调回来，这个回调也就是调用 Toast 内部类 TN 的 show 方法。而从 api 25 开始，此方法还会将 NotificationServiceManager 产生的一个 window token 传递过来。</p><p>api 25 中的 <code>TN#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * schedule handleShow into the right thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    mHandler.obtainMessage(<span class="number">0</span>, windowToken).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api 24 中的 <code>TN#show</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * schedule handleShow into the right thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    mHandler.post(mShow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此 <code>TN#show</code> 方法是被远程调用的，所以实际会运行在 app 的 Binder 线程池的线程中，所以此方法向主线程发了一个消息，这个消息才是真正让 toast 显示的地方。不同的是 api 25 的代码还会把 window token 也传递到消息中。处理这个消息的代码，会调用 <code>TN#handleShow</code> 方法，这个 <code>handleShow</code> 是下面这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"HANDLE SHOW: "</span> + <span class="keyword">this</span> + <span class="string">" mView="</span> + mView</span><br><span class="line">            + <span class="string">" mNextView="</span> + mNextView);</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        <span class="comment">// remove the old view if necessary</span></span><br><span class="line">        handleHide();</span><br><span class="line">        mView = mNextView;</span><br><span class="line">        Context context = mView.getContext().getApplicationContext();</span><br><span class="line">        String packageName = mView.getContext().getOpPackageName();</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">            context = mView.getContext();</span><br><span class="line">        &#125;</span><br><span class="line">        mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        <span class="comment">// We can resolve the Gravity here by using the Locale for getting</span></span><br><span class="line">        <span class="comment">// the layout direction</span></span><br><span class="line">        <span class="keyword">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</span><br><span class="line">        mParams.gravity = gravity;</span><br><span class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</span><br><span class="line">            mParams.horizontalWeight = <span class="number">1.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</span><br><span class="line">            mParams.verticalWeight = <span class="number">1.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mParams.x = mX;</span><br><span class="line">        mParams.y = mY;</span><br><span class="line">        mParams.verticalMargin = mVerticalMargin;</span><br><span class="line">        mParams.horizontalMargin = mHorizontalMargin;</span><br><span class="line">        mParams.packageName = packageName;</span><br><span class="line">        mParams.removeTimeoutMilliseconds = mDuration ==</span><br><span class="line">            Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</span><br><span class="line">        <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mWM.removeView(mView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        mWM.addView(mView, mParams);</span><br><span class="line">        trySendAccessibilityEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第 37 行，才是真正把 toast 的 view 添加到 WindowManager，也就是让 toast 显示出来，至此理了一遍 toast 显示的流程。而最前面的 crash log 表明，crash 是发生在 <code>ViewRootImpl#setView</code> 方法中的，并且提示 window token invalid。这其实就是提示 从 NotificationManagerService 传过来给 TN 的 token 对象失效了。而失效的原因，其实得从 NotificationManagerService 中找。</p><p><code>NotificationManagerService#showNextToastLocked</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNextToastLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Show pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            record.callback.show(record.token);</span><br><span class="line">            scheduleTimeoutLocked(record);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Object died trying to show notification "</span> + record.callback</span><br><span class="line">                    + <span class="string">" in package "</span> + record.pkg);</span><br><span class="line">            <span class="comment">// remove it from the list and let the process die</span></span><br><span class="line">            <span class="keyword">int</span> index = mToastQueue.indexOf(record);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mToastQueue.remove(index);</span><br><span class="line">            &#125;</span><br><span class="line">            keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">            <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                record = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法就是 NotificationManagerService 发起显示下一个 toast 的代码，注意到第 6 行调用的 show 方法，其实就是远程调用 TN 对象的 show 方法，而第 6 行的 callback 其实就是 TN 对象所对应的远程代理对象。紧接着第 7 行调用的 scheduleTimeoutLocked 方法，其实设定了一个失效限制，使得第 6 行传递的 token 会在几秒内失效。</p><p><code>scheduleTimeoutLocked</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleTimeoutLocked</span><span class="params">(ToastRecord r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mHandler.removeCallbacksAndMessages(r);</span><br><span class="line">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</span><br><span class="line">    <span class="keyword">long</span> delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</span><br><span class="line">    mHandler.sendMessageDelayed(m, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码发送一个 delayed 消息(截止 api 27，此 delay 时长是 2 秒或 3.5 秒），处理上面方法发送的消息的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> MESSAGE_TIMEOUT:</span><br><span class="line">            handleTimeout((ToastRecord)msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面被调用的 <code>handleTimeOut</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTimeout</span><span class="params">(ToastRecord record)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Timeout pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</span><br><span class="line">    <span class="keyword">synchronized</span> (mToastQueue) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = indexOfToastLocked(record.pkg, record.callback);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cancelToastLocked(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面第 7 行被调用的 <code>cancelToastLocked</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelToastLocked</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(index);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        record.callback.hide();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Object died trying to hide notification "</span> + record.callback</span><br><span class="line">                + <span class="string">" in package "</span> + record.pkg);</span><br><span class="line">        <span class="comment">// don't worry about this, we're about to remove it from</span></span><br><span class="line">        <span class="comment">// the list anyway</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ToastRecord lastToast = mToastQueue.remove(index);</span><br><span class="line">    mWindowManagerInternal.removeWindowToken(lastToast.token, <span class="keyword">true</span>, DEFAULT_DISPLAY);</span><br><span class="line"></span><br><span class="line">    keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">    <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Show the next one. If the callback fails, this will remove</span></span><br><span class="line">        <span class="comment">// it from the list, so don't assume that the list hasn't changed</span></span><br><span class="line">        <span class="comment">// after this point.</span></span><br><span class="line">        showNextToastLocked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面第 13 行就是使 window token 失效的代码。至此可知，NotificationServiceManager 远程调用 <code>TN#show</code> 方法后几秒内，此 token 就会失效，在这几秒内如果 toast 没有真正添加到 WindowManager，那么等添加的时候，就会出现 BadTokenException，应用就会 crash。而阻碍 toast 的 view 被添加到 WindowManager，只有 UI 线程的忙碌，也就是如果 UI 线程已经在执行或者马上要执行的其他消息比较耗时，那么 toast 的 view 就无法及时添加。</p><p>不过，Google 也意识到这种 UI 线程 block 不到 ANR 时长就 crash 的现象了，所以在 api 26 中，此 BadTokenException 直接被捕获了，也就是下面的第 42 行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Since the notification manager service cancels the token right</span></span><br><span class="line">        <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></span><br><span class="line">        <span class="comment">// race and we may attempt to add a window after the token has been</span></span><br><span class="line">        <span class="comment">// invalidated. Let us hedge against that.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mWM.addView(mView, mParams);</span><br><span class="line">            trySendAccessibilityEvent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以此 crash，仅仅发生在 api 25 的系统中，要修复这个问题，可以参考 github 上的 <a href="https://github.com/drakeet/ToastCompat" target="_blank" rel="noopener">ToastCompat</a> 中的方法。</p><p>再来看一下另一种 Crash log：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: View android.widget.LinearLayout&#123;41a97eb8 V.E..... ......ID 0,0-540,105 #7f0b020d app:id/toast_layout_root&#125; has already been added to the window manager.</span><br><span class="line">   at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:<span class="number">223</span>)</span><br><span class="line">   at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">69</span>)</span><br><span class="line">   at android.widget.Toast$TN.handleShow(Toast.java:<span class="number">402</span>)</span><br><span class="line">   at android.widget.Toast$TN$<span class="number">1</span>.run(Toast.java:<span class="number">310</span>)</span><br><span class="line">   at android.os.Handler.handleCallback(Handler.java:<span class="number">730</span>)</span><br><span class="line">   at android.os.Handler.dispatchMessage(Handler.java:<span class="number">92</span>)</span><br><span class="line">   at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</span><br><span class="line">   at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5136</span>)</span><br><span class="line">   at java.lang.reflect.Method.invokeNative(Method.java)</span><br><span class="line">   at java.lang.reflect.Method.invoke(Method.java:<span class="number">525</span>)</span><br><span class="line">   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">737</span>)</span><br><span class="line">   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">553</span>)</span><br><span class="line">   at dalvik.system.NativeStart.main(NativeStart.java)</span><br></pre></td></tr></table></figure><p>这个 crash 原因是同一个 view 被重复添加到 WindowManager 导致的。抛出异常的地方是 <code>WindowManagerGlobal#addView</code> 方法，也就是下面的代码第 15 行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">            Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (display == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"display must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDyingViews.contains(view)) &#123;</span><br><span class="line">                    <span class="comment">// Don't wait for MSG_DIE to make it's way through root's queue.</span></span><br><span class="line">                    mRoots.get(index).doDie();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view</span><br><span class="line">                            + <span class="string">" has already been added to the window manager."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// The previous removeView() had not completed executing. Now it has.</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>从上面代码可知，第 10 行 index 非负，且 mDyingViews 包含需添加的 view，则会抛出此异常。第 10 行 index 非负的原因，是 mViews 包含此 view，如下面代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findViewLocked</span><span class="params">(View view, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = mViews.indexOf(view);</span><br><span class="line">    <span class="keyword">if</span> (required &amp;&amp; index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"View="</span> + view + <span class="string">" not attached to window manager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，也就是当需要添加一个 view 时，如果此 view 在 mViews 中却不在 mDyingViews 中，那就会抛出异常。现在我们看一下 <code>Toast#TN#handleShow</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">            mWM.removeView(mView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Since the notification manager service cancels the token right</span></span><br><span class="line">        <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></span><br><span class="line">        <span class="comment">// race and we may attempt to add a window after the token has been</span></span><br><span class="line">        <span class="comment">// invalidated. Let us hedge against that.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mWM.addView(mView, mParams);</span><br><span class="line">            trySendAccessibilityEvent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码显示，实际上，Toast 被现实时，其实会先把 view 从 WindowManager 移除（注意一下移除的前提是 view 的 parent 不空），然后再尝试添加。我们看看 WindowManagerGlobal#removeView 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">true</span>);</span><br><span class="line">        View curView = mRoots.get(index).getView();</span><br><span class="line">        removeViewLocked(index, immediate);</span><br><span class="line">        <span class="keyword">if</span> (curView == view) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Calling with view "</span> + view</span><br><span class="line">                + <span class="string">" but the ViewAncestor is attached to "</span> + curView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意上面方法有个 immediate 参数，不过从 <code>Toast#TN#handleShow</code> 调用过来时，这个参数会是 false。现在假设 view 包含在 mViews 中，那么上面第 7 行 index 将非负，上面第 9 行调用了 removeViewLocked 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeViewLocked</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">    ViewRootImpl root = mRoots.get(index);</span><br><span class="line">    View view = root.getView();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        InputMethodManager imm = InputMethodManager.getInstance();</span><br><span class="line">        <span class="keyword">if</span> (imm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            imm.windowDismissed(mViews.get(index).getWindowToken());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> deferred = root.die(immediate);</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.assignParent(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">            mDyingViews.add(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码 第 11 行因为 immediate 为 false，所以返回的 deferred 是 true，那么第 15 行就会把 view 添加到 mDyingViews。</p><p>至此总结一下，只要 view 的 parent 不空，那么它就会尝试被移除，如果 mView是中有次 view，则尝试移除的结果就是 mDyingViews 也会包含此 view，则 crash 不会发生。</p><p>经过分析系统代码，我发现给 view 设置 parent 是在 ViewRootImpl 中的 setView 方法调用 <code>view.assignParent(this)</code> 做到的，而 ViewRootImpl #setView 是在 WindowManagerGlobal#addView 调用的。置空 parent 则是在 WindowManagerGlobal#removeViewLocked 做的，而从 mViews 移除 view 是在 WindowManagerGlobal#doRemoveView 做的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doRemoveView</span><span class="params">(ViewRootImpl root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = mRoots.indexOf(root);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mRoots.remove(index);</span><br><span class="line">            mParams.remove(index);</span><br><span class="line">            <span class="keyword">final</span> View view = mViews.remove(index);</span><br><span class="line">            mDyingViews.remove(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ThreadedRenderer.sTrimForeground &amp;&amp; ThreadedRenderer.isAvailable()) &#123;</span><br><span class="line">        doTrimForeground();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这些方法都是在主线程调用的，所以可以肯定，在 addView 时，mView 包含 view 时，则此 view 的 parent不空。而 mView 不包含 view 时，它的 parent 为空。看起来似乎无懈可击，系统代码确保了 toast 的显示不会出现重复添加 view 导致的 IllegalStateException。但是明明 crash 就是发生了，分析堆栈也可知就是出现了 view 在 mViews 中但却不在 mDyingViews 中的情况。</p><p>经过分析，我可能找到了一种原因。先来看 WindowManagerGlobal#addView 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">            Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        ViewRootImpl root;</span><br><span class="line">        View panelParentView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDyingViews.contains(view)) &#123;</span><br><span class="line">                    <span class="comment">// Don't wait for MSG_DIE to make it's way through root's queue.</span></span><br><span class="line">                    mRoots.get(index).doDie();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view</span><br><span class="line">                            + <span class="string">" has already been added to the window manager."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// The previous removeView() had not completed executing. Now it has.</span></span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</span><br><span class="line"></span><br><span class="line">            view.setLayoutParams(wparams);</span><br><span class="line"></span><br><span class="line">            mViews.add(view);</span><br><span class="line">            mRoots.add(root);</span><br><span class="line">            mParams.add(wparams);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// do this last because it fires off messages to start doing things</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                root.setView(view, wparams, panelParentView);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                <span class="comment">// BadTokenException or InvalidDisplayException, clean up.</span></span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    removeViewLocked(index, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先上面代码可能存在一处漏洞。假设 view 之前从未添加过，那么低 9 行返回 -1，第 25 至 27 行把 view 添加到了 mViews 中，然后假设此 view 添加过程中失败了，即第 31 行抛出了异常，可是此时 index 是 -1，所以第 15 行企图移除此 view 是做不到的，于是此 view 就留在了 mViews 中，这可能是系统的移除漏洞。另一种情况，假设第 9 行返回非负值，那么此 view 在第 13 行会立即移除，第 25 行重新添加到 mView 中时，此 view 新的 index 已经不是第 9 行的值了，然后如果第 31 行添加失败，那么第 35 行将会被执行，可是 index 是错误的，这将会导致错误的 view 被移除！</p><p>上面可能的漏洞要发生，需要第 35 行抛出异常，而查看 <code>ViewRootImpl#setView</code> 方法可知，如果异常抛出，那么 view 的 parent 将尚未设置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (res &lt; WindowManagerGlobal.ADD_OKAY) &#123;</span><br><span class="line">                mAttachInfo.mRootView = <span class="keyword">null</span>;</span><br><span class="line">                mAdded = <span class="keyword">false</span>;</span><br><span class="line">                mFallbackEventHandler.setView(<span class="keyword">null</span>);</span><br><span class="line">                unscheduleTraversals();</span><br><span class="line">                setAccessibilityFocus(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN:</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is not valid; is your activity running?"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_NOT_APP_TOKEN:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is not for an application"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_APP_EXITING:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- app for token "</span> + attrs.token</span><br><span class="line">                                + <span class="string">" is exiting"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_DUPLICATE_ADD:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                <span class="string">"Unable to add window -- window "</span> + mWindow</span><br><span class="line">                                + <span class="string">" has already been added"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_STARTING_NOT_NEEDED:</span><br><span class="line">                        <span class="comment">// Silently ignore -- we would have just removed it</span></span><br><span class="line">                        <span class="comment">// right away, anyway.</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_MULTIPLE_SINGLETON:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- another window of type "</span></span><br><span class="line">                                + mWindowAttributes.type + <span class="string">" already exists"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_PERMISSION_DENIED:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- permission denied for window type "</span></span><br><span class="line">                                + mWindowAttributes.type);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_INVALID_DISPLAY:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.InvalidDisplayException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- the specified display can not be found"</span>);</span><br><span class="line">                    <span class="keyword">case</span> WindowManagerGlobal.ADD_INVALID_TYPE:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.InvalidDisplayException(<span class="string">"Unable to add window "</span></span><br><span class="line">                                + mWindow + <span class="string">" -- the specified window type "</span></span><br><span class="line">                                + mWindowAttributes.type + <span class="string">" is not valid"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Unable to add window -- unknown error code "</span> + res);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            view.assignParent(<span class="keyword">this</span>);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可知，如果抛出异常，<code>view.assignParent(this)</code> 将未被调用。</p><p>至此，可将我的猜测总结为：当使用同一个 view 多次显示 toast 时，可能某一次添加失败，导致 view 留在 mViews 中，可是 view 的 parent 又因为添加失败而为空，所以 Toast#TN#handleShow 方法没有调用从 WindowManager 移除此 view 的代码，所以 WindowManagerGlobal#addView 被调用时，view 不在 mDyingViews 中，所以 crash 发生了。</p><p>可是这只是猜测，无法验证猜测是否正确。</p><p>----- 以下是 2019 年 1 月 11 日的更新 ------</p><p>现已发现复现第二种 crash (IllegalStateException: view has already been added to the window manager) 的方法，也就是如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> View toastLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        toastLayout = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.connection_toast, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast toast = <span class="keyword">new</span> Toast(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">                toast.setView(toastLayout);</span><br><span class="line">                toast.show();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1980</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，点击几次按钮来执行 onClick 方法，就可以复现 crash。复现思路是，先让前一个 toast 把 view 添加到 WindowManager，但要让它添加失败，然后第二次另一个 toast 再添加此 view，此次发生 crash，这个思路也是按照前面的猜想来的。首先，上面的代码是将同一个 view 添加到不同的 toast 对象去 show，当添加到第一个 toast 调用 show 方法后，主线程 sleep 1980 毫秒，这个时间是很微妙的，接近 2000 毫秒但是却略少。这个时间可以使得主线程醒来时，toast 的 token 即将失效。不能用更长的 sleep 时间是因为那样的话，主线程还在 sleep 中 token 已失效，token 的失效是在 NotificationManagerService 中产生的，失效后，NotificationManagerService 会处理 MESSAGE_DURATION_REACHED 消息，最终会跨进程调用到 Toast#TN#hide 方法，而这个方法会让我们 app 的主线程消息队列增加一个 HIDE 消息：</p><p><img src="http://tao93.top/images/2019/01/11/1547217156.png" alt=""></p><p>如此一来，当主线程 sleep 结束执行 Toast#TN#handleShow 方法时，就会因消息队列已有 HIDE 消息而提前返回:</p><p><img src="http://tao93.top/images/2019/01/11/1547217419.png" alt=""></p><p>既然都提前返回了，view 也就不会被第一个 toast 添加到 WindowManager，那么也就不符合我们的思路中「让第一个 toast 把 view 添加到 WindowManager 是发生异常」的想法。</p><p>所以，需要 1980 毫秒这样一个时间，这个时间使得主线程醒来执行到第一个 toast 的 Toast#TN#handleShow 时，token 还没失效，所以 handleShow 方法不会提前返回，所以 view 会继续往 WindowManager 添加，但是 20 毫秒不足以让这个添加顺利完成，相反，很可能添加时 token 失效了， 于是添加失败，发生第一种 crash 的 BadTokenException (Anddroid 8 以上此异常会被捕获，前文已描述)，这样就符合我们的思路了。下面截图证明了确实发生了 BadTokenException：</p><p><img src="http://tao93.top/images/2019/01/11/1547217762.png" alt=""></p><p>至此，按照前面的思路，此 view 将会无 parent，但是却留在了 WindowManagerGlobal 的 mViews 中，却又不在 mDyingViews 中，于是，当再次按下按钮，执行另一个 toast 添加此 view 的代码时，WindowManagerGlobal#addView 中将发生 IllegalStateException，crash 也就复现了，截图为证：</p><p><img src="http://tao93.top/images/2019/01/11/1547217909.png" alt=""></p><p>至此，toast crash 的分析算是有了一个比较完满的结尾。对于本文中 2019 年 1 月 11 日更新的部分，在此感谢刘成同学提供的帮助，他本来用来复现问题的方式是「先调一个 toast 的 show，sleep 三四秒，然后再用同一个 view 调另一个 toast 的 show」，这个方式因为前面讲的原因而无法复现 crash，但却给了我灵感，让我想到了 1980 毫秒这个时间，最终成功复现了 crash。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Toast 是 Android 系统一种非常简单的提示性小工具，最近我尝试修复 Toast 相关的两种 Crash，所以把相关的原委和过程记录了下来。先来看一下第一种 Crash 的 log:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java Comparable Contracts</title>
    <link href="https://tao93.top/2018/12/22/Java%20Comparable%20Contracts/"/>
    <id>https://tao93.top/2018/12/22/Java Comparable Contracts/</id>
    <published>2018-12-22T13:10:08.148Z</published>
    <updated>2019-07-05T14:02:09.750Z</updated>
    
    <content type="html"><![CDATA[<p>实现 Java 中的 Comparable 接口的对象，可以用在 Collections#sort 等方法中进行排序等。通常来说，Comparable 接口的 compareTo 方法都是写起来比较简单的。不过，偶尔还是可能翻车的。比如下面的 crash log，就是翻车的现场：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.IllegalArgumentException</span>: Comparison method violates its general contract! </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeHi</span>(TimSort<span class="selector-class">.java</span>:<span class="number">868</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeAt</span>(TimSort<span class="selector-class">.java</span>:<span class="number">485</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.mergeCollapse</span>(TimSort<span class="selector-class">.java</span>:<span class="number">408</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.sort</span>(TimSort<span class="selector-class">.java</span>:<span class="number">214</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.TimSort</span><span class="selector-class">.sort</span>(TimSort<span class="selector-class">.java</span>:<span class="number">173</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.Arrays</span><span class="selector-class">.sort</span>(Arrays<span class="selector-class">.java</span>:<span class="number">659</span>) </span><br><span class="line">  at java<span class="selector-class">.util</span><span class="selector-class">.Collections</span><span class="selector-class">.sort</span>(Collections<span class="selector-class">.java</span>:<span class="number">217</span>)</span><br></pre></td></tr></table></figure><p>异常显示违反了 general contract，这些 contract 其实在 Comparable#compareTo 方法的注释中就讲到了，主要就是相反性、传递性、等价性三条 contract。这些 contract 可以写成下面这样的形式：</p><ol><li><p>$sgn(x.compareTo(y)) = -sgn(y.compareTo(x)) $</p></li><li><p>$sgn(x.compareTo(y)) &gt; 0$ and $sgn(y.compareTo(z)) &gt; 0$ implies $sgn(x.compareTo(z)) &gt; 0$</p></li><li><p>$sgn(x.compareTo(y)) = 0$ implies sgn(x.compareTo(z)) = sgn(y.compareTo(z))$</p></li></ol><p>上面的 $sgn$ 函数就是下面这样的：</p><p><img src="http://tao93.top/images/2018/12/22/1545477555.png" alt=""></p><p>所以第一条的意思是 x 与 y 的比较结果和 y 与 x 的比较结果必须相反；第二条的意思是，比较结果是具有传递性的，第 3 条是如果 x 和 y 的比较结果是相等的，那么它们与任何 z 的比较结果相同。</p><p>简单实现的 compareTo 方法通常不会违背上面的协议，不过，稍微复杂点的，就不一定了。比如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o2)</span> </span>&#123;</span><br><span class="line">    Data d2 = (Data) o2</span><br><span class="line">    <span class="keyword">if</span> (isSortByName()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getName().compareTo(d2.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSortByAge()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getAge() - d2.getAge();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面代码来实现 Comparable 接口的对象，然后进行排序，是可能存在的问题的。在一次完整的排序过程中，上面的 compareTo 方法需要调用多次，但是上面的 isSortByName 和 isSortByAge 方法的返回是可能变化的，比如多线程情况下其他线程可能修改了 isSortByName 方法所使用的变量的值。当 isSortByName 的结果变化时，意味着排序的比较标准也变了，自然非常容易违反前面说到的 contract。</p><p>而下面的代码片段，同样是有问题的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o2)</span> </span>&#123;</span><br><span class="line">    Data d2 = (Data) o2</span><br><span class="line">    <span class="keyword">boolean</span> date1Empty = TextUtils.isEmpty(getDateStr());</span><br><span class="line">    <span class="keyword">boolean</span> date2Empty = TextUtils.isEmpty(d2.getDateStr());</span><br><span class="line">    <span class="keyword">if</span> (date1Empty &amp;&amp; date2Empty) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! date1Empty &amp;&amp; ! date2Empty) &#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"...."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date1 = format.format(getDateStr());</span><br><span class="line">            Date date2 = format.format(d2.getDateStr());</span><br><span class="line">            <span class="keyword">return</span> date1.compareTo(date2);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的问题在于，ParseException 被捕获并且直接返回 0 了。这意味着两个 date string 只要有一个是无法解析的，那么比较结果就是0，也就是相等。加入 a, b, c 三个 date string，只有 b 是无法解析的，那么 a 和 b 比较结果为 0，b 和 c 比较结果也是 0，则根据第 3 条 contract，a 和 c 的比较结果也应该是 0，可是 a 和 c 都是可以正常解析的，它们的比较结果不一定是 0。所以第 3 条 contract 会被违反。</p><p>要改正上面的代码片段，可以直接把异常抛出，以期提前将不可解析的 date string 避免掉。另一种方式更啰嗦点，就是两个不可解析的 date string 认为是相等的，然后可解析和不可解析的字符串的比较约定好大小关系，并确保符合相反性 contract。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现 Java 中的 Comparable 接口的对象，可以用在 Collections#sort 等方法中进行排序等。通常来说，Comparable 接口的 compareTo 方法都是写起来比较简单的。不过，偶尔还是可能翻车的。比如下面的 crash log，就是翻车的
      
    
    </summary>
    
    
      <category term="Java" scheme="https://tao93.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>矩阵运算在 Android 中的简单场景</title>
    <link href="https://tao93.top/2018/12/04/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E5%9C%A8%20Android%20%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%9C%BA%E6%99%AF/"/>
    <id>https://tao93.top/2018/12/04/矩阵运算在 Android 中的简单场景/</id>
    <published>2018-12-04T14:52:16.196Z</published>
    <updated>2019-07-05T14:04:27.118Z</updated>
    
    <content type="html"><![CDATA[<p>让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) 这样一个方法。这个方法中有个矩阵参数，通过传入此矩阵参数，可以将 source Bitmap 经过一定的转换再创建目标 Bitmap。那么这个矩阵是怎么起作用的呢？先看一段示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">matrix.postRotate(<span class="number">90</span>);</span><br><span class="line">Bitmap bitmap2 = Bitmap.createBitmap(bitmap1, <span class="number">0</span>, <span class="number">0</span>, bitmap1.width(), bitmap1.getHeight(), matrix, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>上述代码做的事情是将 bitmap1 顺时针旋转 90° 得到 bitmap2，起关键作用的就是这个 matrix。第一行代码会得到一个 3×3 的单位矩阵，而第二行代码之后，矩阵将会变成下面这样：</p><script type="math/tex; mode=display">  \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix} ·  \begin{bmatrix}   1 & 0 & 0 \\   0 & 1 & 0 \\   0 & 0 & 1  \end{bmatrix} =  \begin{bmatrix}  0 & -1 & 0 \\  1 & 0 & 0 \\  0 & 0 & 1  \end{bmatrix}</script><p>注意在 xy 平面内顺时针 rotate 90° 的操作对应的矩阵是 </p><script type="math/tex; mode=display">\begin{bmatrix}cos 90° & -sin 90° & 0 \\sin 90° & cos90° & 0 \\0 & 0 & 1\end{bmatrix} = \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>记上面的矩阵为 R90，记上面代码中的 matrix 为 M，记单位矩阵为 I，那么第 2 行的操作则是等同于下面的表达式：</p><script type="math/tex; mode=display">M = R90·M</script><p>也就是:</p><script type="math/tex; mode=display">M = R90·I</script><p>注意上面的点乘顺序是 R90 在前，I 在后（虽然这里 R90·I 和 I·R90 结果是一样，但别的场景未必如此）。原因是 代码中是 <code>postRotate</code> 方法，这里 <code>post</code> 表示是把 rotate 放在变换的最后一步。而变换矩阵作用 R90·M 作用在目标向量 V 时，将会是表达式：</p><script type="math/tex; mode=display">R90·M·V</script><p>这样就可以理解为是先 M·V 然后这个结果再被 R90 乘，所以是先做 M 本来的变换，然后再做 R90 的变换，也就是 rotate 90° 在最后一步。这也就是第 2 行代码的 postRotate 90° 等价于 M = R90·M 也就是 M = R90·I 的原因。</p><p>所以第 3 行代码传入的 matrix 就是：</p><script type="math/tex; mode=display">\begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>现在我们进入前面说的 createBitmap 这个方法中去看看源码是怎么实现这个变换的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Matrix m, <span class="keyword">boolean</span> filter)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Rect srcR = <span class="keyword">new</span> Rect(x, y, x + width, y + height);</span><br><span class="line">    RectF dstR = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    RectF deviceR = <span class="keyword">new</span> RectF();</span><br><span class="line">    m.mapRect(deviceR, dstR);</span><br><span class="line">    neww = Math.round(deviceR.width());</span><br><span class="line">    newh = Math.round(deviceR.height());</span><br><span class="line">    bitmap = createBitmap(neww, newh, transformedConfig, transformed || source.hasAlpha());</span><br><span class="line">    </span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">    canvas.translate(-deviceR.left, -deviceR.top);</span><br><span class="line">    canvas.concat(m);</span><br><span class="line">    canvas.drawBitmap(source, srcR, dstR, paint);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码第 3 行 srcR 将是 source Bitmap 中要被转换的部分。而 dstR 是同样宽高但是左上角在 (0, 0) 的矩形。第 6 行则是将 dstR 变换后得到 deviceR，根据前面所知 的 m 的值，可知deviceR 将会是 left, top, right, bottom 分别是 -height, 0, 0, width:</p><p><img src="http://tao93.top/images/2018/12/04/1543937277.png" alt=""></p><p>即 deviceR 是 dstR 绕原点顺时针旋转 90° 得到的。紧接着代码 7、8 行得到转换后的 Bitmap 的宽高。然后第 9 行以此宽高创建了新的 Bitmap。第 11 行基于此 Bitmap 创建了 canvas。</p><p>重点来了，第 12 行对此 canvas 进行平移变换，平移的目的是让 deviceR 的左上角移动到原点。从而让它位于 x 非负且 y 非负的象限。而第 13 行则将 m 矩阵的变换作用在此 canvas 是。需要注意的是，第 12、13 行的变换，都是 pre 的变换而不是 post 的。所以可以看成 13 行的变换其实是比第 12 行的平移先执行的，也就是整个变换过程可理解为先绕原点顺时针旋转 90°，然后再将左上角平移到原点，这样就成功的完成了将原 Bitmap 旋转 90° 并创建新 Bitmap 的操作，虽然这里除了 rotate，其实还利用了 translation 操作。</p><p>用 3×3 矩阵在 xy 平面内变换，可以分为 translate, rotate, scale, skew 一共 4 种，表示这四种操作的矩阵分别记作：</p><script type="math/tex; mode=display">T(a, b),\ R(\theta),\ S(u, v),\ SKx(\theta), SKy(\theta)</script><p>那么它们分别是：</p><script type="math/tex; mode=display">\begin{bmatrix}   1 & 0 & a \\   0 & 1 & b \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   cos(\theta) & -sin(\theta) & 0 \\   sin(\theta) & cos(\theta) & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   u & 0 & 0 \\   0 & v & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & tan(\theta) & 0 \\   0 & 1 & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & 0 & 0 \\   tan(\theta) & 1 & 0 \\   0 & 0 & 1\end{bmatrix}</script><p>分别表示的含义是：</p><ol><li>向 +x 方向平移 a 且向 +y 方向平移 b；</li><li>以原点为中心在 xy 平面旋转 theta 角度；</li><li>以原点为 pivot，x 方向和 y 方向分别伸缩值为 u 和 v 的比例；</li><li>每个点的 $x$ 坐标变为 $x + y·tan(\theta)$，而 $y$ 坐标不变，视觉表现为图形向 +y 方向倾斜，倾斜角度为 $\theta$;</li><li>每个点的 $y$ 坐标变为 $x·tan(\theta) + y$，而 $x$ 坐标不变，视觉表现为图形向 +x 方向倾斜，倾斜角度为 $\theta$.</li></ol><p>注意, $T(a, 0)$ 和 $T(0, b)$ 组合起来的变换，等价于 $T(a, b)$，且和组合顺序无关，这从矩阵乘法也可以看出来：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & a \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}</script><p>同样的，$S(u, 0)$ 和 $S(0, v)$ 组合起来等价于 $S(u, v)$ 且和组合顺序无关。而 Skew 无此性质。事实上：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & tan(\alpha) & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1+tan(\alpha)tan(\beta) & tan(\alpha) & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}</script><p>而：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & 0 \\tan(\beta) & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & tan(\alpha) & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & tan(\alpha) & 0 \\tan(\beta) & 1+tan(\alpha)tan(\beta) & 0 \\0 & 0 & 1\end{bmatrix}</script><p>接下来说说 Android 中和 3×3 矩阵相关的一些类，也就是 <a href="https://developer.android.com/reference/android/graphics/Matrix" target="_blank" rel="noopener">Matrix</a>, <a href="https://developer.android.com/reference/android/graphics/Canvas" target="_blank" rel="noopener">Canvas</a>, <a href="https://developer.android.com/reference/android/graphics/Camera" target="_blank" rel="noopener">Camera</a> 这 3 个类，注意最后这个  Camera 类是 android.graphics 包中的，而不是 android.hardware 中的。</p><p>Matrix 对象表示一个 3×3 矩阵，常用于指示 x y 平面内的变换，构造函数创建的都是单位矩阵。Matrix 有一系列 set 方法，用于设置矩阵的值，这些方法对应于一些常见的变换操作，比如 setScale(int sx, int sy) 方法，其实就是把矩阵(不管原来是什么值)变成下面的值：</p><script type="math/tex; mode=display">\begin{bmatrix}sx & 0 & 0 \\0 & sy & 0 \\0 & 0 & 1\end{bmatrix}</script><p>上面的缩放是以原点为 pivot 缩放的，此外，还有 setScale(float sx, float sy, float px, float py) 这样以 (px, py) 为 pivot 进行缩放的操作，等价于把矩阵变为下面这样：</p><script type="math/tex; mode=display">\begin{bmatrix}sx & 0 & px(1-sx) \\0 & sy & py(1-sy) \\0 & 0 & 1\end{bmatrix}</script><p>注意以上矩阵是可以分解的，分解为两个矩阵，且这两个矩阵交换位置后的积也是上面的矩阵。其他的 set 方法与此类似，就不多说了。</p><p>Matrix 还有一系列 post 方法和 pre 方法，比如 postRotate(int degrees) 和 preSkew(int kx, int ky) 方法，前者相当于 $M=R(degrees)·M$，后者相当于 $M=M·SK(kx,\ ky)$. 注意这里矩阵相乘的顺序取决于是 post 还是 pre.</p><p>其实 Matrix 也可以在 3 维空间中变换，比如使用它的 setPolyToPoly 方法，可以得到满足指定的映射关系的矩阵。而这种映射关系可能需要 3 为空间的变换才能满足。</p><p>Canvas 类包含一个变换矩阵，这个矩阵可以 get 也可以 set，也可以用 concact(Matrix mat) 来改变 Canvas 的变换矩阵的值，这个过程等价于 $M=M·mat$. 另外，Canvas 的 drawBitmap 方法也可以传入 Matrix 对象来控制 bitmap 被 draw 时需要的施加的变换。Canvas 的 translate 和 rotate 等方法，都是 pre 类型的，并且这种变化，可以理解为是对 canvas 的坐标系进行变化。无变换时，坐标系原点在可见区域的左上角，而 +x 向右，+y 向下。translate(10, 0) 后，canvas 原点向右移动 10，此后绘制在 (0, 0) 位置的东西，其实是位于可见区域的左上角右侧距离为 10 的地方。</p><p>以上说的可见区域，其实是 Canvas 中的 clip 概念，这是一个描述可见区域的矩形。一般 Canvas 的初始 clip 的 ltrb f分别为 0, 0, view width, view height. 当 Canvas 变换时，可理解为其坐标系变换了，那么自然 clip 也会跟着变化，比如 translate(10, 0) 后，clip 的 ltrb 就变为 -10, 0, view width - 10, view height.</p><p>Canvas 出于灵活性考虑，有 save 和 restore 两个方法用于保存和恢复变换的状态，常用做法是，在无变换时 save 一下，然后变换并做绘制，最后restore，以避免影响其它绘制工作。出了translate、rotate、Skew、Scale 这些 2 维变换，Canvas 还有一系列 clip 方法，这些方法将 Canvas 进一步剪裁，并根据剪裁后可见区域是否为空返回布尔值。剪裁操作也是可以 save 和 restore 的，但是注意剪裁操作并不变换坐标系。</p><p>Camera 对象专门用于计算变换，且包含 3 维空间中的变换(相反 Matrix 对象其实只是 xy 平面内的变换)，它的变换计算结果是一个矩阵，可通过 getMatrix 方法得到，一般会将此矩阵用作它用，可以将 Camera 理解为一个变换计算器。出于灵活性的考虑，Camera 对象中有 save 和 restore 操作，这就像是 git 中的 stash 和 pop stash 操作一样，可以把当前的变换保存，并在后面某个时候恢复出来，恢复之前的值将会丢失。不同的是，git stash 后 working tree 将是 clean 的，即已修改的内容都清空了，而 Camera 对象 save 后，它的矩阵还是 save 之前的，并不会变成单位矩阵。</p><p>需要注意的是，Camera 的坐标系，+x 是向右的，+y 是向上的，而 +z 是向屏幕里面的。所以比如 Camera 的 rotateZ(int degrees) 方法和 Matrix 的 [pre|post]Rotate(int degree) 的旋转方向是反过来的。前者等价于逆时针方向转，后者则是顺时针方向转。下面的例子可以说明这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Matrix mat1 = <span class="keyword">new</span> Matrix();</span><br><span class="line">Camera camera = <span class="keyword">new</span> Camera();</span><br><span class="line"></span><br><span class="line">camera.rotateZ(-<span class="number">90</span>);</span><br><span class="line">camera.getMatrix(mat1);</span><br><span class="line"></span><br><span class="line">Matrix mat2 = <span class="keyword">new</span> Matrix();</span><br><span class="line">mat2.preRotate(<span class="number">90</span>);</span><br></pre></td></tr></table></figure><p>上面代码执行后 mat1 和 mat2 都是：</p><script type="math/tex; mode=display">\begin{bmatrix}0 & -1 & 0 \\1 & 0 & 0 \\0 & 0 & 1\end{bmatrix}</script><p>对于 Camera 对象， 调用它的 translate 等方法，会使得它的 matrix 变为 Camera 的坐标系中对应此变换的值，而这样的矩阵，在应用在 Canvas 上进行绘制时，又是作用在 +y 向下的坐标系中。所以比如 Camera translate(10, -20, 0) 后得到的矩阵是：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & 10 \\0 & 1 & 20 \\0 & 0 & 1\end{bmatrix}</script><p>需要注意的是，当 Camera 在 z 方向进行 translate 操作时，变换对象在屏幕上的投影大小发生变化，所以，实际变换效果是一个缩放变换，所以 Camera getMatrix 的结果，也是一个二维缩放变换的矩阵。Camera 的 location 也就是 3D 投影中的 camera 位置（观察者位置），此位置默认是 (0, 0, -8)，注意这个 -8 实际相当于 -576 个像素。当 z 方向 translate 距离为正时，相当于远离观察者，最终就是缩小的变换，反正是放大的变换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean fil
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>微信 Android 版是如何计步的</title>
    <link href="https://tao93.top/2018/11/23/%E5%BE%AE%E4%BF%A1%20Android%20%E7%89%88%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E6%AD%A5%E7%9A%84/"/>
    <id>https://tao93.top/2018/11/23/微信 Android 版是如何计步的/</id>
    <published>2018-11-24T04:54:22.998Z</published>
    <updated>2019-07-05T14:04:04.030Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能比 iOS 系统中的数据更受用户重视，所以就可以把 iOS 系统中的数据替换为手环产生的数据，所以需要允许写入。不过目前而言，Android 系统中，第三方应用似乎无法写入系统的运动数据，而只能读取。</p><p>回到正题，众所周知，微信有个微信运动功能。Android 版微信是怎么计步的呢？我最先是在微信的权限页发现微信声明了 Body Sensors 权限，如下所示：</p><p><img src="http://tao93.top/images/2018/11/23/1542956043.png" alt=""></p><p>这个权限很有迷惑性，让人以为有这个就可以读 Android 系统产生的计步数据了。事实上，把这个权限关了，然后晃动手机 20 次，再进入微信运动，步数很准确的增加了 20 次左右，所以这个权限并不影响读取计步数据。</p><p>那这个权限可以干嘛呢？Body Sensors 权限被列为 dangerous permission，所属的 permission group 仅有这一个权限。不过很遗憾，我在网上查了挺久，没有查到获得这个权限后可以用来写什么代码做什么事情。倘若想要了解此权限的根底，估计需要在 AOSP 中找答案了。可惜我电脑上次升级失败后，目前我电脑中没有完整的 AOSP。</p><p>就目前我在网上了解到的信息而言，此权限似乎没什么用，很多帖子都在询问 Google Play Services 为何要使用此权限以及是否可以关闭该权限。我手中的 Pixel XL 也仅有 Google Play Services 和微信声明了此权限：</p><p><img src="http://tao93.top/images/2018/11/24/1543033517.png" alt=""></p><p>根据网上的帖子，在 Android 7 时代的某个时候，Gmail 有个 bug，即关闭 Google Play Services 的 Body Sensors 权限后，Gmail 疯狂弹框显示「This app won’t work properly unless you allow Google Play Services’ request to access the foloowing: <strong>Body Sensors</strong>」，尽管 Gmail 仍能正常工作。因为此弹框太过怪异，随后谷歌修复了此问题，这说明即使是 Google 自己的应用，也没有严格审查自己是否声明了不必要的权限。</p><p>当然把 Google Play Services 的 Body Sensors 权限关闭后，打开 Google Fit 应用时，弹出和上面类似的消息，并且 Google Fit 不再显示我的步数，乍一看，这似乎说得通。但是，此时微信仍然可以正常计步。这说明但就计步这一功能看，Body Sensors 并非必要的。</p><p>事实上我的计步 Demo 应用如上述微信一样，也还可以计步。计步 Demo 中的代码非常简单，Google 自己也有个展示此功能的简单项目 <a href="https://github.com/googlesamples/android-BatchStepSensor" target="_blank" rel="noopener">android-BatchStepSensor</a>。值得一提的是，Google 的简单项目中 manifest 声明了两项 use-feature，但其实这也不是必要的。第三方应用无需声明任何权限，无需声明任何 use-feature，只需注册一个 android.hardware.SensorEventListener 接口，即可在此接口的 onSensorChanged 方法中源源不断的收到步数更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.sensor.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_DETECTOR:</span><br><span class="line">            stepDetector ++;</span><br><span class="line">            tvDetector.setText(stepDetector + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_COUNTER:</span><br><span class="line">            <span class="comment">// event.values[0] is step count since last reboot of Android device</span></span><br><span class="line">            stepCounter = (<span class="keyword">int</span>) event.values[<span class="number">0</span>];</span><br><span class="line">            tvCounter.setText(stepCounter + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样第三方应用就可以计步了，即使第三方应用进程终止，也可以在应用再次运行时，在 onSensorChanged 方法中得知新的步数。</p><p>值得注意的是，系统返回的步数始终是上次重启设备后的总步数。那么第三方应用使用这种方式计步时，会存在一个问题，即应用进程被杀后，如果用户先运动，然后重启设备，然后才打开第三方应用，那么第三方应用会丢失从应用被杀到设备重启之间的步数，而只知道设备重启后新增了多少步数。</p><p>经过验证，我的 demo、微信还有 Google Fit 均存在此问题。这说明微信和 Google Fit (或者它依赖的 Google Play Services) 都是通过注册 SensorEventListener 接口来获知步数的。这也说明了微信声明 Body Sensors 权限是冗余的。</p><p>那么 Body Sensors 权限到底可以用来做什么？这是一个待填的坑。</p><p>对了，网上还有种方式，通过监听手机加速度感应器的事件来自己计步，至于准确性，那就受自己的算法的科学性和复杂性的限制了。方法也是注册 SensorEventListener，不过注册的 type 是 android.hardware.Sensor.TYPE_ACCELEROMETER 而非前面的 TYPE_STEP_COUNTER。更多细节见<a href="http://www.gadgetsaint.com/android/create-pedometer-step-counter-android/#.W_jYq5MzYkp" target="_blank" rel="noopener">此帖子</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>不一样的 RelativeLayout measure 过程</title>
    <link href="https://tao93.top/2018/11/01/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%20RelativeLayout%20measure%20%E8%BF%87%E7%A8%8B/"/>
    <id>https://tao93.top/2018/11/01/不一样的 RelativeLayout measure 过程/</id>
    <published>2018-11-02T02:59:59.975Z</published>
    <updated>2019-07-05T14:03:32.140Z</updated>
    
    <content type="html"><![CDATA[<p>直接用一个简单的例子展示 RelativeLayout 的不一样之处：</p><p><img src="http://tao93.top/images/2018/11/01/1541079447.png" alt=""></p><p>图中，左边是一个简单的 Android layout 例子，例子中在外侧是一个最大的 horizontal 的 LinearLayout，它有 3 个 child，分别是左部、分割线和右部。左部和右部非常相似，都是外面一个 ViewGroup 内嵌一个 TextView，且 ViewGroup 的高度都是 wrapContent 而内嵌的 TextView 的高度都是 matchParent.</p><p>因为 TextView 背景都是红色，所以从 preview 可以清晰看到，左部的 TextView 等效于 wrapContent，而右部的 TextView 则等效于 matchParent，这就是 RelativeLayout 的不一样。简而言之就是，RelativeLayout 中内嵌的 child tree 的根节点 size 如果是 matchParent，那么此 child tree 测量得到的 size 将会是最大化的，可达到 RelativeLayout size 的上限，而其余常见 ViewGroup 没有此特点，比如 LinearLayout, FrameLayout, ConstraintLayout 等。</p><p>究其原因，可以从 RelativeLayout 中的 onMeasure 方法找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = views[i];</span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">            applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class="line">            measureChild(child, params, myWidth, myHeight);</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 RelativeLayout#onMeasure 的片段，可知对所有 child 调用了 measureChild 方法，而这是个 RelativeLayout 的 private 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Measure a child. The child should have left, top, right and bottom information</span></span><br><span class="line"><span class="comment"> * stored in its LayoutParams. If any of these values is VALUE_NOT_SET it means</span></span><br><span class="line"><span class="comment"> * that the view can extend up to the corresponding edge.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child Child to measure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params LayoutParams associated with child</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myWidth Width of the the RelativeLayout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myHeight Height of the RelativeLayout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, LayoutParams params, <span class="keyword">int</span> myWidth, <span class="keyword">int</span> myHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft,</span><br><span class="line">            params.mRight, params.width,</span><br><span class="line">            params.leftMargin, params.rightMargin,</span><br><span class="line">            mPaddingLeft, mPaddingRight,</span><br><span class="line">            myWidth);</span><br><span class="line">    <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(params.mTop,</span><br><span class="line">            params.mBottom, params.height,</span><br><span class="line">            params.topMargin, params.bottomMargin,</span><br><span class="line">            mPaddingTop, mPaddingBottom,</span><br><span class="line">            myHeight);</span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述方法看，先获取到 child measureSpec，然后依次为参数来 measure 每个 child。再进入到 RelativeLayout#getChildMeasureSpec 这个方法中看看下面的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class="line">    <span class="comment">// Constraints fixed both edges, so child must be an exact size.</span></span><br><span class="line">    childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">    childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (childSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Child wanted an exact size. Give as much as possible.</span></span><br><span class="line">        childSpecMode = MeasureSpec.EXACTLY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecSize = Math.min(maxAvailable, childSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension.</span></span><br><span class="line">            childSpecSize = childSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">        <span class="comment">// Child wanted to be as big as possible. Give all available</span></span><br><span class="line">        <span class="comment">// space.</span></span><br><span class="line">        childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">        childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">        <span class="comment">// Child wants to wrap content. Use AT_MOST to communicate</span></span><br><span class="line">        <span class="comment">// available space if we know our max size.</span></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecMode = MeasureSpec.AT_MOST;</span><br><span class="line">            childSpecSize = maxAvailable;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension. Child can be as big as it</span></span><br><span class="line">            <span class="comment">// wants.</span></span><br><span class="line">            childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            childSpecSize = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，chileSpecMode 赋值为 MeasureSpec.AT_MOST 的地方只有 27 行一个地方，也就是只要 child 声明为 match_parent，那么 child 的 specMode 不出意外就会是 EXACTLY。而 EXACTLY 意味着此 child 为根节点的 view tree 的测量结果将会是此 child 的 specSize，而这个 specSize 显然就是 RelativeLayout 能达到的最大 size (可能需要减去 padding，RelativeLayout 其它 child 占据的空间等)。</p><p>顺便再看看 LinearLayout 等等为啥不是这样的，事实上 LinearLayout 等使用的是 ViewGroup 这个抽象基类中的 getChildMeasureSpec 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可以看到，如果 child 声明为 matchParent 但是 RelativeLayout 的 specMode 是 AT_MOST 的话，那么 child 的 specMode 如第 35 行所示将会是 AT_MOST，这就是和 RelativeLayout 的不同之处。</p><p>总结一下，即使 RelativeLayout 的 specMode 是 AT_MOST，只要它的 child 声明 matchParent，那么 child 的 SpecMode 一般会是 EXACTLY，此 child 为根节点的 viewTree 的测量结果就是最大化的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接用一个简单的例子展示 RelativeLayout 的不一样之处：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/11/01/1541079447.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中，左边是一个简单的 Androi
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一键设置 Android http proxy 的尝试</title>
    <link href="https://tao93.top/2018/10/31/%E4%B8%80%E9%94%AE%E8%AE%BE%E7%BD%AE%20Android%20http%20proxy%20%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>https://tao93.top/2018/10/31/一键设置 Android http proxy 的尝试/</id>
    <published>2018-11-01T03:04:32.507Z</published>
    <updated>2018-11-01T03:04:32.507Z</updated>
    
    <content type="html"><![CDATA[<p>自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&gt; 点击当前 WiFi -&gt; 点击编辑 -&gt; 点击 Advanced options -&gt; proxy 选择 None 或者 Manual -&gt; 上一步如果选了 Manual, 则需要输入 IP 地址和端口号 -&gt; 保存。</p><p>这样一个六七步的步骤，真的很让人烦，而如果电脑的局域网 IP 地址不固定的话，就更加让人不爽了，意味着每次电脑重新联网后，手机都需要重新设置代理的 IP。就算电脑 IP 固定，当手机需要使用 Charles 代理或者关闭代理，都比较麻烦。所以很久前我就想有没有方法可以一键设置代理。</p><p>我的构想是，如果电脑 IP 地址不固定，那么一键设置需要在电脑上操作，不然无法获知电脑的 IP，当然也可以电脑运行个 socket server，然后手机连接，然后电脑把 IP 发给手机。如果电脑 IP 地址固定，最理想的则是手机上一键设置，这样就不需要 adb 连接了。</p><p>经过一番 google 和惨痛的尝试，我得知了两种并不完美的方法。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置代理信息 exclList是添加不用代理的网址用的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHttpProxySetting</span><span class="params">(Context context, String host, <span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">        WifiManager wifiManager =(WifiManager)context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration config = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(host,port);</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">            Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">            Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">            method.invoke(config,mInfo);</span><br><span class="line">            Object mIpConfiguration = getDeclaredFieldObject(config,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line"></span><br><span class="line">            setEnumField(mIpConfiguration, <span class="string">"STATIC"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">            setDeclardFildObject(config,<span class="string">"mIpConfiguration"</span>, mIpConfiguration);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// save the settings</span></span><br><span class="line">            wifiManager.updateNetwork(config);</span><br><span class="line">            wifiManager.disconnect();</span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消代理设置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSetHttpProxy</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration configuration = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (configuration != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                configuration.setHttpProxy(mInfo);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">                Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">                Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">                method.invoke(configuration,mInfo);</span><br><span class="line">                Object mIpConfiguration = getDeclaredFieldObject(configuration,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line">                setEnumField(mIpConfiguration, <span class="string">"NONE"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">                setDeclardFildObject(configuration,<span class="string">"mIpConfiguration"</span>,mIpConfiguration);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            wifiManager.updateNetwork(configuration);</span><br><span class="line">            wifiManager.disconnect(); </span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的方法直接获取到当前连接的 WiFi configuration，然后把它的 http proxy 类型 (枚举变量，主要是 NONE 和 STATIC 两个值)，和值 (即 IP 和 port) 用反射的方法设置进去，然后更新 WiFi configuration，并断开 WiFi 并重新连接 WiFi。以上设置代理和关闭代理的动作，全部由上面的代码一键完成，直接在手机上运行即可，并且代码运行结果和手机 Settings 中的 UI 结果是一致的，感觉相当完美。</p><p>然而方法一不支持 API 23 以上的 Android 系统，而所用 API 21 测试是可以完美运行的，在如今 API 28 都发布了的时候，不支持 API 23 以上可以说让实用性大打折扣。不过这是可以理解的，毕竟处于安全考虑，不能让用户的手机随便被第三方 app 默默修改了代理，这太危险了。</p><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>执行以上命令后，Settings 中的 UI 并未更改，但是代理已经生效。这一方法实际是新增了 Settings Provider 中的 key value，有两种方式可以查看到这一新增 key value:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get global http_proxy</span><br><span class="line">adb shell settings get global global_http_proxy_host</span><br><span class="line">adb shell settings get global global_http_proxy_port</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String httpProxy = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.HTTP_PROXY);</span><br><span class="line">String httpProxyHost = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST);</span><br><span class="line">String httpProxyPort = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT);</span><br></pre></td></tr></table></figure><p>Android 不运行第三方应用新增这样的属性值，而只有 read 的权限，所以需要 adb 来新增这些属性值，除了这个缺点，还有更致命的缺陷。方法二的 reset proxy 的方法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是的，目前我已知的方法，只有重启才能让上述 delete 生效，当然手动重启都可以。</span></span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p>要 reset proxy，删除 key value 和重启 (目前我只知道重启可以) 缺一不可，否则设备只能通过 proxy 使用 http。也就是连别的 wifi 或者使用数据流量都不能使用 http！要想不重启，除非在将 key value 设置为另一个有效的 proxy 配置，这个缺陷可以说非常致命了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&amp;gt; 点击当前 WiFi -&amp;gt; 点击编辑 -&amp;gt; 点击 Advanced options -&amp;gt; prox
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ShadowSocks for Gradle &amp; Shell</title>
    <link href="https://tao93.top/2018/10/18/%E6%B3%A8%E6%84%8F%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%201086/"/>
    <id>https://tao93.top/2018/10/18/注意下面的端口号不一定是 1086/</id>
    <published>2018-10-18T07:11:58.403Z</published>
    <updated>2019-07-05T14:04:20.267Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://shadowsocks.org/" target="_blank" rel="noopener">ShadowSocks</a> 是个很好的工具，它自带 PAC 模式和全局模式。</p><p>不过这个全局模式并不能完全让整台电脑的所有网络访问全部通过代理进行，比如终端命令就不可以。我打开全局代理后，然后在终端执行 curl ip.cn 命令，结果显示检查到的 IP 地址依然是本机真实的公网 IP:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="selector-tag">curl</span> <span class="selector-tag">ip</span><span class="selector-class">.cn</span></span><br><span class="line">当前 <span class="selector-tag">IP</span>：122<span class="selector-class">.225</span><span class="selector-class">.224</span><span class="selector-class">.218</span> 来自：浙江省杭州市 电信</span><br></pre></td></tr></table></figure><p>要让 shell 也使用代理，可以执行一下命令来设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意下面的端口号不一定是 1086</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><p>上面我使用的端口号是 1086，这是因为我的 ShadowSocks 客户端的偏好设置中如下所示的设置项是 1086:</p><p><img src="http://tao93.top/images/2018/10/18/1539842647.png" alt=""></p><p>但是每次都执行上面的 export 命令很麻烦，那么可以在 shell 的配置文件中设置 alias：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable proxy</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">"export ALL_PROXY=socks5://127.0.0.1:1086"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable proxy</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">"unset ALL_PROXY"</span></span><br></pre></td></tr></table></figure><p>前两天我发现在家的时候，Android Studio 无法访问 Google 的 maven 仓库，即使我开全局代理也不行，即使我在 terminal 中按前面方法设置 proxy 并且使用 gradle 命令来构建也不行。</p><p>为此，我找到了向 gradle 设置 proxy 的方法，那就是在项目的 local.properties 文件（之所以选这个文件是因为这个文件一般是不纳入 git 管理的，所以我可以随便自定义地修改）加入下面的设置，即可让 gradle 使用代理：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.<span class="attribute">jvmargs</span>=-Xmx4536m <span class="attribute">-DsocksProxyHost</span>=127.0.0.1 <span class="attribute">-DsocksProxyPort</span>=1086</span><br></pre></td></tr></table></figure><p>上面的端口号和前面的方法中是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://shadowsocks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowSocks&lt;/a&gt; 是个很好的工具，它自带 PAC 模式和全局模式。&lt;/p&gt;
&lt;p&gt;不过这个全局模式并不能完全让整台电脑的所有网络
      
    
    </summary>
    
    
      <category term="ShadowSocks" scheme="https://tao93.top/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t let Your App Drain your Users&#39; Battery</title>
    <link href="https://tao93.top/2018/10/10/Don&#39;t%20let%20Your%20App%20Drain%20your%20Users&#39;%20Battery/"/>
    <id>https://tao93.top/2018/10/10/Don&#39;t let Your App Drain your Users&#39; Battery/</id>
    <published>2018-10-10T08:52:40.506Z</published>
    <updated>2019-07-05T14:01:39.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-drives-battery-Life"><a href="#What-drives-battery-Life" class="headerlink" title="What drives battery Life?"></a>What drives battery Life?</h3><ol><li>Hardware (Screen etc.)</li><li>Operating System</li><li>Apps &amp; Services</li><li>User Interaction</li></ol><h3 id="Efforts-to-improve-battery"><a href="#Efforts-to-improve-battery" class="headerlink" title="Efforts to improve battery"></a>Efforts to improve battery</h3><ol><li><a href="https://developer.android.google.cn/reference/android/app/job/JobScheduler" target="_blank" rel="noopener">Job Scheduler</a> (Since API 21)</li><li>Doze &amp; App Standby(Since API 23)</li><li>Doze on-the-go (Since API 24)</li><li>Background Limits (Since API 26)</li><li>Adaptive Battery, Background Restrictions etc. (Since API 28)</li></ol><p>Among the above <strong>only Job Scheduler</strong> could be directly leveraged by app developers in the code.</p><h4 id="Job-Scheduler-Since-API-21"><a href="#Job-Scheduler-Since-API-21" class="headerlink" title="Job Scheduler (Since API 21)"></a>Job Scheduler (Since API 21)</h4><p>Job Scheduler is suitable when we want to do something in a specified circumstance, such as:</p><blockquote><p>Batterry is not Low</p><p>With specified Netwoek Status</p><p>Is Charging</p><p>Storage is not Low</p><p>Device is Idle</p></blockquote><p>Without Job Scheduler, we may need to keep a service running to monitor specified system broadcast and then do what we want, which is not optimized for battery comparing to Job Scheduler. </p><p>Here is a simple example of Job Scheduler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(<span class="keyword">final</span> JobParameters params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// stuffs that consumes a lot of time like making a backup to the cloud</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// tell scheduler our job is done</span></span><br><span class="line">                jobFinished(params, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return true to tell scheduler our job is not finished.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sJobId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> JobScheduler mJobScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mJobScheduler = (JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.schedule_btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                scheduleAJob();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleAJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (JobInfo info : mJobScheduler.getAllPendingJobs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info.getId() == sJobId) &#123;</span><br><span class="line">                <span class="comment">// the last scheduled job is not finished yet</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build the jobInfo that requires charging, idle and network that won't charge.</span></span><br><span class="line">        JobInfo jobInfo = <span class="keyword">new</span> JobInfo.Builder(++ sJobId, <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MyJobService.class))</span><br><span class="line">                .setRequiresCharging(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiresDeviceIdle(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        mJobScheduler.schedule(jobInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Doze-Since-API-23"><a href="#Doze-Since-API-23" class="headerlink" title="Doze (Since API 23)"></a>Doze (Since API 23)</h4><p>Unplugged and stationary for a period of time, a device would be in doze mode, which restricts all apps regardless whether they targets api 23. However, the OS periodically exits Doze for a brief time to let apps complete their deferred jobs. The bried time slot is called Maintenance window. Below is a figure showing the mode changing:</p><p><img src="http://tao93.top/images/2018/10/10/1539151703.png" alt=""></p><p>In doze mode, the following are restricted:</p><ol><li>Network access is suspended</li><li>WakeLock is ignored</li><li>Standard AlarmManager alarms (setExact() and setWindow()) are deferred to the next maintenance window</li><li>No Wi-Fi scaning</li><li>No <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html" target="_blank" rel="noopener">Sync Adapters</a></li><li>No JobScheduler jobs</li></ol><p>Stuffs not restricted by Doze:</p><ol><li>FCM high priority msg</li><li>Alarms set with setAndAllowWhileIdle() and setExactAndAllowWhileIdle()</li></ol><p>Testing Doze:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the system into Doze mode</span></span><br><span class="line">adb shell dumpsys deviceidle force-idle</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit idle mode &amp; reactivate the device</span></span><br><span class="line">adb shell dumpsys deviceidle unforce</span><br><span class="line">adb shell dumpsys battery reset <span class="comment"># this also recovers charging</span></span><br></pre></td></tr></table></figure><h4 id="App-Standby-Since-API-23"><a href="#App-Standby-Since-API-23" class="headerlink" title="App Standby (Since API 23)"></a>App Standby (Since API 23)</h4><p>An app is idle if the followings are satisfies:</p><ol><li>No user touching for a certain period of time</li><li>No processes in the foreground (either as an activity or foreground service)</li><li>No notifications showing on the lock screen or in the notification center.</li><li>Not charging</li></ol><p>Testing App Standby:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># check whether your app is in standby mode. A 'Idle=false' output means not in standby mode</span></span><br><span class="line">adb shell am get-inactive &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the app into App Standby mode</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit Standby mode for your app</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Doze-on-the-go-Since-API-24"><a href="#Doze-on-the-go-Since-API-24" class="headerlink" title="Doze on-the-go (Since API 24)"></a>Doze on-the-go (Since API 24)</h3><p>A lighter Doze mode which activates when the phone is moving in our pockets or hands. Doze on-the-go allows WakeLock, Wifi Scaning and GPS etc, that’s why it’s lighter than former Doze mode introduced in API 23.</p><p>Ignore Doze configuration:</p><p><img src="http://tao93.top/images/2018/10/10/1539154768.png" alt=""></p><h4 id="Background-Limits-Since-API-26"><a href="#Background-Limits-Since-API-26" class="headerlink" title="Background Limits (Since API 26)"></a>Background Limits (Since API 26)</h4><p>Background Limits affects apps that targets API 26 or higher and includes Background Service Limitations and Broadcast Limitations.</p><h5 id="Background-Service-Limitations"><a href="#Background-Service-Limitations" class="headerlink" title="Background Service Limitations"></a>Background Service Limitations</h5><p>For an app that targets API 26 or higher, it’s in background if:</p><ol><li>No visible Activity</li><li>No foreground Service</li><li>Not InputMethod Service, Wallpaper service etc.</li></ol><p>After several minutes of being in background, background services are stopped by the OS. Replacing background services with Scheduler Jobs is fine in many cases.</p><h5 id="Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26"><a href="#Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26" class="headerlink" title="Broadcast Limitations (Introduced in API 25 and strengthened in API 26)"></a>Broadcast Limitations (Introduced in API 25 and strengthened in API 26)</h5><p>For an app that targets API 26 or higher, it:</p><ol><li>can’t register receivers for implicit broadcasts in Manifest file</li><li>can register receivers for explicit broadcasts in Manifest file</li><li>can register receivers for any broadcasts runtimely</li></ol><p>Broadcasts that require a <a href="https://developer.android.com/guide/topics/manifest/permission-element.html#plevel" target="_blank" rel="noopener">signature permission</a> are exempted from this restriction.</p><p>In some cases, registering system broadcasts could be replaced by Scheduler Jobs, such as if we want to do something when the device is charging.</p><h3 id="Adaptive-Battery-Since-API-29"><a href="#Adaptive-Battery-Since-API-29" class="headerlink" title="Adaptive Battery (Since API 29)"></a>Adaptive Battery (Since API 29)</h3><p>A new feature based on Machine Learning.</p><ol><li>Limit battery for apps that are not used often.</li><li>Apps should be able to run quickly when they are needed.</li><li>Don’t bother users to manage manually.</li></ol><p>Apps are arranged into 4 standby buckets: <code>Active</code>, <code>Working set</code>, <code>Frequent</code> and <code>Rare</code>. Limits are increased from <code>Active</code> to <code>Rare</code>:</p><p><img src="http://tao93.top/images/2018/10/10/1539157914.png" alt=""></p><p>An app is in <code>Active</code> if it:</p><ol><li>has launched an activity</li><li>is running a foreground service</li><li>has a sync adapter associated with a content provider used by a foreground app</li><li>has a notification clicked by the user</li></ol><p>An app is in <code>Working set</code> if it runs often but isn’t active.</p><p>An app is in <code>Frequent</code> if it is used regularly, but not necessarily every day.</p><p>An app is in <code>Rare</code> if it is not often used.</p><p>Find out what bucket the app is currently in programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsageStatsManager.getAppStandbyBucket()</span><br></pre></td></tr></table></figure><p>Test Standby Buckets:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assgin your app into a specified bucket</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-standby-bucket &lt;packagename&gt; active|working_set|frequent|rare</span><br><span class="line"></span><br><span class="line"><span class="comment"># check bucket assignments for one app or all apps</span></span><br><span class="line"><span class="comment"># the output '10 20 30 40' mean Active, Working set, Frequent, Rare respectively</span></span><br><span class="line">adb shell am get-standby-bucket [&lt;packagename&gt;]</span><br></pre></td></tr></table></figure><h3 id="Battery-Saver"><a href="#Battery-Saver" class="headerlink" title="Battery Saver"></a>Battery Saver</h3><p>New battery saver in API 29:</p><ol><li>No red status bar and has animation</li><li>Location service is off when screen is off</li><li>Battery level threshold is adjustable</li></ol><p>Apps are encouraged to switch to dark theme when battery saver is on.</p><p>Check whether battery saver is on programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((PowerManager)getSystemService(Context.POWER_SERVICE)).isPowerSaveMode()</span><br></pre></td></tr></table></figure><p>Test battery saver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pretend to be in low battery status</span></span><br><span class="line">adb shell settings put global low_power 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset all configurations</span></span><br><span class="line">adb shell dumpsys battery reset</span><br></pre></td></tr></table></figure><h3 id="Background-Restrictions-Since-API-29"><a href="#Background-Restrictions-Since-API-29" class="headerlink" title="Background Restrictions (Since API 29)"></a>Background Restrictions (Since API 29)</h3><p>Two criterias:</p><ol><li>Apps targeting pre-Oreo and using background services</li><li>Excessive WakeLocks (&gt; 1hr in background)</li></ol><p>Background restrictions are decided by the users:</p><p><img src="http://tao93.top/images/2018/10/10/1539156945.png" alt=""></p><p>When Background Restrictions is enabled for an app, fllowings are restricted:</p><ol><li>Background jobs, alarms, services and network accessing</li><li>Location related updates </li><li>Foreground services</li></ol><p>Except GUI operation, Background restrictions could alse be finished via adb:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND allow</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-drives-battery-Life&quot;&gt;&lt;a href=&quot;#What-drives-battery-Life&quot; class=&quot;headerlink&quot; title=&quot;What drives battery Life?&quot;&gt;&lt;/a&gt;What drives b
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>通过 wifi 连接 adb</title>
    <link href="https://tao93.top/2018/09/26/%E9%80%9A%E8%BF%87%20wifi%20%E8%BF%9E%E6%8E%A5%20adb/"/>
    <id>https://tao93.top/2018/09/26/通过 wifi 连接 adb/</id>
    <published>2018-09-26T07:47:46.693Z</published>
    <updated>2018-09-26T07:47:46.694Z</updated>
    
    <content type="html"><![CDATA[<p>Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 类型的 native 库，并且也还会有一些其他局限性。</p><p>其实，真机也是可以用局域网无线连接的，只需要电脑和 Android 设备在同一个局域网内。大致步骤就是下面几条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先用数据线连接，确保 adb devices 可以看到设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 adb server 重新以 tcp 模式启动，端口指定为 5555</span></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑和手机之间建立无线连接</span></span><br><span class="line">adb connect &lt;IP address of your Computer&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拔掉数据线，此时再检查一遍是否无线连接成功</span></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>每次都想上面这样执行两三条命令显然太繁杂，尤其是其中还有一步要替换为电脑的当前内网 IP，所以应该写一个脚本来把上面的东西一键搞定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先断开一下</span></span><br><span class="line">adb disconnect</span><br><span class="line"></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep 两秒，不然的话因为刚执行 adb tcpip 5555 那么后续的命令会找不到 devices</span></span><br><span class="line">sleep 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装了黑域</span></span><br><span class="line">adb shell pm list packages | grep <span class="string">'me\.piebridge\.brevent'</span></span><br><span class="line">has_brevent=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$has_brevent</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 重新启动黑阈</span></span><br><span class="line">    adb -d shell sh /data/data/me.piebridge.brevent/brevent.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 android 设备的 IP 地址</span></span><br><span class="line">android_ip=`adb shell <span class="string">"ifconfig"</span> | grep <span class="string">'inet.*cast'</span> | awk <span class="string">'&#123;print $2&#125;'</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Android device IP: '</span> <span class="variable">$android_ip</span></span><br><span class="line">adb connect <span class="variable">$android_ip</span></span><br></pre></td></tr></table></figure><p>上面的脚本中，会检查是否安装了<a href="https://play.google.com/store/apps/details?id=me.piebridge.brevent&amp;hl=zh" target="_blank" rel="noopener">黑阈</a>，如果安装了，就会重新启动黑阈。黑阈是一款管理 Android 应用运行状态的应用，用来限制应用唤醒和常驻后台。Android 8.0 以上的系统，只要 USB 调试选项发生变更，黑阈就会停止起作用，所以此处需要重新让它运行起来。另外上面的脚本中还通过 ifconfig 命令来获取到电脑的内网 IP，用于执行 adb connect 命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
      <category term="adb" scheme="https://tao93.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>记一次混淆问题导致的 bug</title>
    <link href="https://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E7%9A%84%20bug/"/>
    <id>https://tao93.top/2018/09/26/记一次混淆问题导致的 bug/</id>
    <published>2018-09-26T07:47:46.691Z</published>
    <updated>2019-07-05T14:04:42.596Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 <a href="https://github.com/card-io/card.io-Android-SDK" target="_blank" rel="noopener">Card.IO</a> 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用了几个 so 库。只不过没有提供 armeabi 类型的 so 库，而只有 armeabi-v7a 和 armeabi-v8a 之类的 so 库。所以初次提供给公司项目使用时，出现了找不到 so 的错误，也就是 UnsatisfiedLinkError 错误。也就是下面这样的提示：</p><p><img src="http://tao93.top/images/2018/09/01/1535807292.png" alt=""></p><p>后面我想尽办法提供了 armeabi 类型的 so 库，这个问题就算告一段落了，然后这还不是结束。今天，测试又发了一段崩溃日志，也就是下面这样的日志：</p><p><img src="http://tao93.top/images/2018/09/01/1535807316.png" alt=""></p><p>因为之前出现过找不到 so 库的问题，所以乍一看上面的日志，我们都以为又是找不到 so 库 (为我们的菜表示羞愧 🤩)。然后经过上网查找，并和 native 的代码对比，我才意识到，上面的日志其实是 so 库是找到了的，只不过是加载 so 库时，调用 JNI_onLoad 这个 native 方法时出错了。此外，向测试要了 debug 包，发现没有问题，所以初步断定是混淆的问题，然后就是排查了。</p><p>我把测试提供给我的 release 包反编译，然后和 JNI_onLoad 方法中的 native 代码对比，终于找到原因了：release 包中，我提供的库的某个方法被混淆掉了，但是这个方法是需要被 JNI_onLoad 方法调用的。所以问题就是：一个需要被 so 库调用的 Java 方法被混淆了！其实，很多时候我们的项目引入一些著名的第三方包 (比如 Knife 之类的) 时，都会在我们的项目的 Proguard 配置文件中声明不要混淆这些三方包的代码，为的就是避免上面这个问题。说一句显得有点废话的话：第三方包发布混淆包时，他们的 Proguard 配置文件只能在他们的 aar 包构建时生效，而在他们的 aar 构建到我们的项目中时，他们的 Proguard 早已鞭长莫及不起作用了。</p><p>回到我遇到的这个问题，我们本地自测时，很少会进行混淆，本地的 release 默认都是未混淆的 (minifyEnabled 是 false)，所以自测的时候根本没有注意到这个问题。这次这个 bug 的解决办法之一是，在最终使用我的 aar 的项目中，显示声明不要混淆我这个 aar 中的某些代码，这就和上一段说的声明不混淆第三方包的代码是一样的。But，还有一种更好的方法，那就是使用 com.android.support.support-annotations 支持库中的 @Keep 注解，此注解可以标记哪些方法或者类在最终构建 apk 时不会被混淆掉 (当然在前面的 aar 构建等过程自然也不会混淆)。</p><p>总结一下，当前项目的 Proguard 配置文件只能在当前项目构建输出产物时起作用，而无法确保输出的产物交给其他项目集成时不被混淆。若要确保后者，那就可以用 support-annotations 支持库中的注解了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近把 &lt;a href=&quot;https://github.com/card-io/card.io-Android-SDK&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Card.IO&lt;/a&gt; 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记一个简单的递归问题与解法</title>
    <link href="https://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E6%B3%95/"/>
    <id>https://tao93.top/2018/09/26/记一个简单的递归问题与解法/</id>
    <published>2018-09-26T07:47:46.682Z</published>
    <updated>2019-07-05T14:04:38.082Z</updated>
    
    <content type="html"><![CDATA[<p>递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。</p><p>前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：</p><p><img src="http://tao93.top/images/2018/09/01/1535807089.png" alt=""></p><p>这个问题很明显是个递归问题。我当时就夸下海口说，10分钟给你写个 Python 脚本。虽然实际上用了接近 30 分钟。。。</p><p>言归正传，这个问题的递归关系包含两种，<strong>嵌套关系</strong>和<strong>并列关系</strong>。比如 2[a]3[c] 最外层是并列关系，即 2[a] 和 3[c] 是两个互相并列的子问题，他们的解答串起来就是 2[a]3[c] 的解答。而 2[2[a]] 最外层则是一个嵌套关系，即要求 2[2[a]] 的解答需要先求子问题 2[a] 的解答 (这个解答显示就是 aa)，所以问题化解为 2[aa]。</p><p>所以思路就是，对于一个问题 X，先按并列关系划分为若干个子问题 X1, X2, …, Xn；如果 n 大于 1，那么各个子问题的答案串起来就是答案了；如果 n 等于 1，那么说明 X 最外层并不是并列关系而是嵌套关系或者根本就是单个字母，如果 X 是单个字母，那么答案就是它本身，反之，那么 X 一定是 s[Y] 的形式，答案就是 s 个 Y 的答案串起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_loc</span><span class="params">(input, left)</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    i = left</span><br><span class="line">    <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> input[i] == <span class="string">']'</span>:</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> input[i] == <span class="string">'['</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'['</span> <span class="keyword">not</span> <span class="keyword">in</span> input:</span><br><span class="line">        <span class="keyword">return</span> input</span><br><span class="line">    first = input.find(<span class="string">'['</span>)</span><br><span class="line">    i = p_loc(input, first)</span><br><span class="line">    <span class="keyword">if</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">        parts = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">            parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">            input = input[i+<span class="number">1</span>:]</span><br><span class="line">            first = input.find(<span class="string">'['</span>)</span><br><span class="line">            i = p_loc(input, first)</span><br><span class="line">        parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">            res += do(part)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = p_loc(input, first)</span><br><span class="line">        sub_res = do(input[first+<span class="number">1</span>:right])</span><br><span class="line">        <span class="keyword">return</span> int(input[:first]) * sub_res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(do(<span class="string">'2[a]3[c]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]3[c]'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。&lt;/p&gt;
&lt;p&gt;前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/153580
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://tao93.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>日常修 Bug</title>
    <link href="https://tao93.top/2018/09/26/%E6%97%A5%E5%B8%B8%E4%BF%AE%20Bug/"/>
    <id>https://tao93.top/2018/09/26/日常修 Bug/</id>
    <published>2018-09-26T07:47:46.680Z</published>
    <updated>2019-07-05T14:04:13.348Z</updated>
    
    <content type="html"><![CDATA[<p>前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。</p><p><img src="http://tao93.top/images/2018/09/01/1535790364.png" alt=""></p><p>鉴于报告人没提具体的版本号，也没提怎么出现的，也没提是什么机型出现的，我就和报告人说沟通了一番。报告人说应该是小米 6 出现这个问题，我遂借了一部小米 6，然后运行 demo 并没有复现。现在就有两种可能，第一是只有报告人那台小米 6 有问题，第二是 demo 没问题但是集成到巴西版本后就有问题了。经过艰苦交涉，终于从对方那里要到了一个安装包后，我手里手机复现了此问题，事实很快就清楚了：demo 没问题但是集成后有问题，也就是和机型压根没关系。</p><p>先直接给出最后修复的方法，修复方法是在我的扫卡库的 activity 中，调用以下一行就 OK 了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 PhoneWindow 设置一个背景 </span></span><br><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br></pre></td></tr></table></figure><p>嗯，修复方法很简单，但是为什么这样做就 work 了呢？接下来就是调试的过程了.</p><p>首先获取一下这个界面的 layout 信息，尝试看看右侧白色细线是不是额外塞进去的视图，结果并不是。然后我再看是否是设置了什么 padding 导致了这个问题。事实上，正式这样的，可惜我可能是瞎了眼，居然没有看到下面的线索，即 DecorView 的右侧 padding 是 2：</p><p><img src="http://tao93.top/images/2018/09/01/1535790424.png" alt=""></p><p>我只看到了下面的 LinearLayout 的宽度是1438，比我的手机屏幕宽度1440少了2个像素，显然就是右侧的白线了。</p><p><img src="http://tao93.top/images/2018/09/01/1535790483.png" alt=""></p><p>所以我怎么办呢，我开始调试 measure 和 layout 的过程。因为 DecorView 的宽度是 1440 没错，可是它的 Child LinearLayout 宽度只有 1438，所以我先条件断点在 LinearLayout 类中的 onMeasure 方法。断点的条件我本来想写 getParent() instance DecorView，结果发现无法应用 DecorView，于是我就改成了 getParent() != null &amp;&amp; getParent().getParent() == null，其实这是不对的，DecorView 同样有 Parent，也就是 ViewRootImpl 对象，我把这个给忘了。所以断点条件就成了下面这样臃肿的了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent().getParent() == <span class="keyword">null</span> </span><br><span class="line"><span class="comment">// 当然其实还有更简洁的方式，比如下面这样 </span></span><br><span class="line">getClass().getName.endswith(<span class="string">"DecorView"</span>)</span><br></pre></td></tr></table></figure><p>然后发现不管是 measure 还是 layout 的过程，LinearLayout 宽度始终就是 1438，DecorView 就只给它留了这个大空间。然后我开始调试到 DecorView 的测量过程中，最后发现在 ViewGroup (这里仅仅是由于 DecorView 是继承自 ViewGroup 的) 的 measureChildWithMargins 方法中，找到了关键线索：</p><p><img src="http://tao93.top/images/2018/09/01/1535790538.png" alt=""></p><p>也就是上面的 mPaddingRight 的值居然是 2 而不是 0，这意味着 DecorView 的右侧 padding 是2，这样就能解释通为啥 DecorView 的 child 宽度小了 2 了。这是我赶紧回去看 layout 信息，然后就发现了我本来早就该发现的线索了。</p><p>OK，接下来是要知道，谁把 DecorView 的右侧 padding 加了 2 的。我对 View 类的 mPaddingRight 属性加了下图所示的断点：</p><p><img src="http://tao93.top/images/2018/09/01/1535790585.png" alt=""></p><p>果然，不一会儿，我就有了收获，得到了下面的堆栈：</p><p><img src="http://tao93.top/images/2018/09/01/1535790614.png" alt=""></p><p>上面堆栈清晰了展示了右侧 padding 是怎么被设置为 2 的，概括来说，就是 PhoneWindow 在准备 DecorView 时，检查到有一个 Drawable，然后在设置这个 Drawable 时，去设置了 padding。那么为什么设置 Drawable 需要设置 padding 呢？看下图就明白了：</p><p><img src="http://tao93.top/images/2018/09/01/1535790640.png" alt=""></p><p>原来，这是个自带 padding 的 NinePatchDrawable。接下来，我就查找了一下，发现这个 drawable 就是 PhoneWindow 中的 mBackgroundsource 属性解析而来。这个属性是从应用主题中指定的。现在回到前面我提前贴出的解决方法之一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT))</span><br></pre></td></tr></table></figure><p>上面的代码调用 PhoneWindow 的 setBackgroundDrawable 方法，这个调用除了设置 bg drawable 外，还直接让 mBackgroundsource 变为 0，所以后面就轮不到那个 NinePatchDrawable 了。</p><p>其实，上面的解决方法还是有点突兀，另一种方法是，在扫卡的库中设置一个主题，这样的话，就不会应用巴西版本乘客端项目中声明的主题了，自然也就不会把那个 NinePatchDrawable 设置进来。</p><p>再说点别的。这个扫卡的库，被集成到另一个库中，然后另一个库再集成到巴西版本中。中间这个库，我是没有涉足的。所以为么验证我有没有修复成功，我只能在最终的项目中再引用一下我的库经过改动后的版本，当然版本号也要增加一下。这样的话，就可以新的覆盖旧的，把中间那个库对扫卡库的引用给覆盖的。唉，真是折腾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/1535790364.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;鉴于报告人没
      
    
    </summary>
    
    
      <category term="Android" scheme="https://tao93.top/tags/Android/"/>
    
  </entry>
  
</feed>
