<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu Tao</title>
  
  <subtitle>A little older, a little wiser, but happy to see you.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tao93.top/"/>
  <updated>2018-12-05T06:10:54.342Z</updated>
  <id>http://tao93.top/</id>
  
  <author>
    <name>Liu Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>矩阵运算在 Android 中的简单场景</title>
    <link href="http://tao93.top/2018/12/04/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E5%9C%A8%20Android%20%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%9C%BA%E6%99%AF/"/>
    <id>http://tao93.top/2018/12/04/矩阵运算在 Android 中的简单场景/</id>
    <published>2018-12-04T14:52:16.196Z</published>
    <updated>2018-12-05T06:10:54.342Z</updated>
    
    <content type="html"><![CDATA[<p>让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) 这样一个方法。这个方法中有个矩阵参数，通过传入此矩阵参数，可以将 source Bitmap 经过一定的转换再创建目标 Bitmap。那么这个矩阵是怎么起作用的呢？先看一段示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">matrix.postRotate(<span class="number">90</span>);</span><br><span class="line">Bitmap bitmap2 = Bitmap.createBitmap(bitmap1, <span class="number">0</span>, <span class="number">0</span>, bitmap1.width(), bitmap1.getHeight(), matrix, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>上述代码做的事情是将 bitmap1 顺时针旋转 90° 得到 bitmap2，起关键作用的就是这个 matrix。第一行代码会得到一个 3×3 的单位矩阵，而第二行代码之后，矩阵将会变成下面这样：</p><script type="math/tex; mode=display">  \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix} ·  \begin{bmatrix}   1 & 0 & 0 \\   0 & 1 & 0 \\   0 & 0 & 1  \end{bmatrix} =  \begin{bmatrix}  0 & -1 & 0 \\  1 & 0 & 0 \\  0 & 0 & 1  \end{bmatrix}</script><p>注意在 xy 平面内顺时针 rotate 90° 的操作对应的矩阵是 </p><script type="math/tex; mode=display">\begin{bmatrix}cos 90° & -sin 90° & 0 \\sin 90° & cos90° & 0 \\0 & 0 & 1\end{bmatrix} = \begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>记上面的矩阵为 R90，记上面代码中的 matrix 为 M，记单位矩阵为 I，那么第 2 行的操作则是等同于下面的表达式：</p><script type="math/tex; mode=display">M = R90·M</script><p>也就是:</p><script type="math/tex; mode=display">M = R90·I</script><p>注意上面的点乘顺序是 R90 在前，I 在后（虽然这里 R90·I 和 I·R90 结果是一样，但别的场景未必如此）。原因是 代码中是 <code>postRotate</code> 方法，这里 <code>post</code> 表示是把 rotate 放在变换的最后一步。而变换矩阵作用 R90·M 作用在目标向量 V 时，将会是表达式：</p><script type="math/tex; mode=display">R90·M·V</script><p>这样就可以理解为是先 M·V 然后这个结果再被 R90 乘，所以是先做 M 本来的变换，然后再做 R90 的变换，也就是 rotate 90° 在最后一步。这也就是第 2 行代码的 postRotate 90° 等价于 M = R90·M 也就是 M = R90·I 的原因。</p><p>所以第 3 行代码传入的 matrix 就是：</p><script type="math/tex; mode=display">\begin{bmatrix}   0 & -1 & 0 \\   1 & 0 & 0 \\   0 & 0 & 1  \end{bmatrix}</script><p>现在我们进入前面说的 createBitmap 这个方法中去看看源码是怎么实现这个变换的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Matrix m, <span class="keyword">boolean</span> filter)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Rect srcR = <span class="keyword">new</span> Rect(x, y, x + width, y + height);</span><br><span class="line">    RectF dstR = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    RectF deviceR = <span class="keyword">new</span> RectF();</span><br><span class="line">    m.mapRect(deviceR, dstR);</span><br><span class="line">    neww = Math.round(deviceR.width());</span><br><span class="line">    newh = Math.round(deviceR.height());</span><br><span class="line">    bitmap = createBitmap(neww, newh, transformedConfig, transformed || source.hasAlpha());</span><br><span class="line">    </span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">    canvas.translate(-deviceR.left, -deviceR.top);</span><br><span class="line">    canvas.concat(m);</span><br><span class="line">    canvas.drawBitmap(source, srcR, dstR, paint);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码第 3 行 srcR 将是 source Bitmap 中要被转换的部分。而 dstR 是同样宽高但是左上角在 (0, 0) 的矩形。第 6 行则是将 dstR 变换后得到 deviceR，根据前面所知 的 m 的值，可知deviceR 将会是 left, top, right, bottom 分别是 -height, 0, 0, width:</p><p><img src="http://tao93.top/images/2018/12/04/1543937277.png" alt=""></p><p>即 deviceR 是 dstR 绕原点顺时针旋转 90° 得到的。紧接着代码 7、8 行得到转换后的 Bitmap 的宽高。然后第 9 行以此宽高创建了新的 Bitmap。第 11 行基于此 Bitmap 创建了 canvas。</p><p>重点来了，第 12 行对此 canvas 进行平移变换，平移的目的是让 deviceR 的左上角移动到原点。从而让它位于 x 非负且 y 非负的象限。而第 13 行则将 m 矩阵的变换作用在此 canvas 是。需要注意的是，第 12、13 行的变换，都是 pre 的变换而不是 post 的。所以可以看成 13 行的变换其实是比第 12 行的平移先执行的，也就是整个变换过程可理解为先绕原点顺时针旋转 90°，然后再将左上角平移到原点，这样就成功的完成了将原 Bitmap 旋转 90° 并创建新 Bitmap 的操作，虽然这里除了 rotate，其实还利用了 translation 操作。</p><p>用 3×3 矩阵在 xy 平面内变换，可以分为 translate, rotate, scale, skew 一共 4 种，表示这四种操作的矩阵分别记作：</p><script type="math/tex; mode=display">T(a, b),\ R(\theta),\ S(u, v),\ SKx(\theta), SKy(\theta)</script><p>那么它们分别是：</p><script type="math/tex; mode=display">\begin{bmatrix}   1 & 0 & a \\   0 & 1 & b \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   cos(\theta) & -sin(\theta) & 0 \\   sin(\theta) & cos(\theta) & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   u & 0 & 0 \\   0 & v & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & tan(\theta) & 0 \\   tan(q) & 1 & 0 \\   0 & 0 & 1\end{bmatrix},\ \begin{bmatrix}   1 & 0 & 0 \\   tan(\theta) & 1 & 0 \\   0 & 0 & 1\end{bmatrix}</script><p>分别表示的含义是：</p><ol><li>向 +x 方向平移 a 且向 +y 方向平移 b；</li><li>以原点为中心在 xy 平面旋转 theta 角度；</li><li>以原点为 pivot，x 方向和 y 方向分别伸缩值为 u 和 v 的比例；</li><li>每个点的 $x$ 坐标变为 $x + y·tan(\theta)$，而 $y$ 坐标不变，视觉表现为图形向 +y 方向倾斜，倾斜角度为 $\theta$;</li><li>每个点的 $y$ 坐标变为 $x·tan(\theta) + y$，而 $x$ 坐标不变，视觉表现为图形向 +x 方向倾斜，倾斜角度为 $\theta$.</li></ol><p>注意, $T(a, 0)$ 和 $T(0, b)$ 组合起来的变换，等价于 $T(a, b)$，且和组合顺序无关，这从矩阵乘法也可以看出来：</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & 0 \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}·\begin{bmatrix}1 & 0 & a \\0 & 1 & 0 \\0 & 0 & 1\end{bmatrix}=\begin{bmatrix}1 & 0 & a \\0 & 1 & b \\0 & 0 & 1\end{bmatrix}</script><p>同样的，$S(u, 0)$ 和 $S(0, v)$ 组合起来等价于 $S(u, v)$ 且和组合顺序无关。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让我们先从位于 android.graphics 包中的 Bitmap 类的一个方法开始说起，也就是 createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean fil
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>微信 Android 版是如何计步的</title>
    <link href="http://tao93.top/2018/11/24/%E5%BE%AE%E4%BF%A1%20Android%20%E7%89%88%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E6%AD%A5%E7%9A%84/"/>
    <id>http://tao93.top/2018/11/24/微信 Android 版是如何计步的/</id>
    <published>2018-11-24T04:54:22.998Z</published>
    <updated>2018-11-24T04:54:22.998Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能比 iOS 系统中的数据更受用户重视，所以就可以把 iOS 系统中的数据替换为手环产生的数据，所以需要允许写入。不过目前而言，Android 系统中，第三方应用似乎无法写入系统的运动数据，而只能读取。</p><p>回到正题，众所周知，微信有个微信运动功能。Android 版微信是怎么计步的呢？我最先是在微信的权限页发现微信声明了 Body Sensors 权限，如下所示：</p><p><img src="http://tao93.top/images/2018/11/23/1542956043.png" alt=""></p><p>这个权限很有迷惑性，让人以为有这个就可以读 Android 系统产生的计步数据了。事实上，把这个权限关了，然后晃动手机 20 次，再进入微信运动，步数很准确的增加了 20 次左右，所以这个权限并不影响读取计步数据。</p><p>那这个权限可以干嘛呢？Body Sensors 权限被列为 dangerous permission，所属的 permission group 仅有这一个权限。不过很遗憾，我在网上查了挺久，没有查到获得这个权限后可以用来写什么代码做什么事情。倘若想要了解此权限的根底，估计需要在 AOSP 中找答案了。可惜我电脑上次升级失败后，目前我电脑中没有完整的 AOSP。</p><p>就目前我在网上了解到的信息而言，此权限似乎没什么用，很多帖子都在询问 Google Play Services 为何要使用此权限以及是否可以关闭该权限。我手中的 Pixel XL 也仅有 Google Play Services 和微信声明了此权限：</p><p><img src="http://tao93.top/images/2018/11/24/1543033517.png" alt=""></p><p>根据网上的帖子，在 Android 7 时代的某个时候，Gmail 有个 bug，即关闭 Google Play Services 的 Body Sensors 权限后，Gmail 疯狂弹框显示「This app won’t work properly unless you allow Google Play Services’ request to access the foloowing: <strong>Body Sensors</strong>」，尽管 Gmail 仍能正常工作。因为此弹框太过怪异，随后谷歌修复了此问题，这说明即使是 Google 自己的应用，也没有严格审查自己是否声明了不必要的权限。</p><p>当然把 Google Play Services 的 Body Sensors 权限关闭后，打开 Google Fit 应用时，弹出和上面类似的消息，并且 Google Fit 不再显示我的步数，乍一看，这似乎说得通。但是，此时微信仍然可以正常计步。这说明但就计步这一功能看，Body Sensors 并非必要的。</p><p>事实上我的计步 Demo 应用如上述微信一样，也还可以计步。计步 Demo 中的代码非常简单，Google 自己也有个展示此功能的简单项目 <a href="https://github.com/googlesamples/android-BatchStepSensor" target="_blank" rel="noopener">android-BatchStepSensor</a>。值得一提的是，Google 的简单项目中 manifest 声明了两项 use-feature，但其实这也不是必要的。第三方应用无需声明任何权限，无需声明任何 use-feature，只需注册一个 android.hardware.SensorEventListener 接口，即可在此接口的 onSensorChanged 方法中源源不断的收到步数更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.sensor.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_DETECTOR:</span><br><span class="line">            stepDetector ++;</span><br><span class="line">            tvDetector.setText(stepDetector + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Sensor.TYPE_STEP_COUNTER:</span><br><span class="line">            <span class="comment">// event.values[0] is step count since last reboot of Android device</span></span><br><span class="line">            stepCounter = (<span class="keyword">int</span>) event.values[<span class="number">0</span>];</span><br><span class="line">            tvCounter.setText(stepCounter + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样第三方应用就可以计步了，即使第三方应用进程终止，也可以在应用再次运行时，在 onSensorChanged 方法中得知新的步数。</p><p>值得注意的是，系统返回的步数始终是上次重启设备后的总步数。那么第三方应用使用这种方式计步时，会存在一个问题，即应用进程被杀后，如果用户先运动，然后重启设备，然后才打开第三方应用，那么第三方应用会丢失从应用被杀到设备重启之间的步数，而只知道设备重启后新增了多少步数。</p><p>经过验证，我的 demo、微信还有 Google Fit 均存在此问题。这说明微信和 Google Fit (或者它依赖的 Google Play Services) 都是通过注册 SensorEventListener 接口来获知步数的。这也说明了微信声明 Body Sensors 权限是冗余的。</p><p>那么 Body Sensors 权限到底可以用来做什么？这是一个待填的坑。</p><p>对了，网上还有种方式，通过监听手机加速度感应器的事件来自己计步，至于准确性，那就受自己的算法的科学性和复杂性的限制了。方法也是注册 SensorEventListener，不过注册的 type 是 android.hardware.Sensor.TYPE_ACCELEROMETER 而非前面的 TYPE_STEP_COUNTER。更多细节见<a href="http://www.gadgetsaint.com/android/create-pedometer-step-counter-android/#.W_jYq5MzYkp" target="_blank" rel="noopener">此帖子</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很早以前，我使用一部 iPhone 5S 手机，这是第一款带有计步功能的 iPhone 机型，苹果称之为搭载运动协处理器。如果我没记错，iOS 的运动数据，既可以被第三方 app 读取，也可以被写入。读取好说，写入是因为用户可能使用手环之类的东西来记录数据，那么这些数据可能
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>不一样的 RelativeLayout measure 过程</title>
    <link href="http://tao93.top/2018/11/02/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%20RelativeLayout%20measure%20%E8%BF%87%E7%A8%8B/"/>
    <id>http://tao93.top/2018/11/02/不一样的 RelativeLayout measure 过程/</id>
    <published>2018-11-02T02:59:59.975Z</published>
    <updated>2018-11-02T03:58:13.425Z</updated>
    
    <content type="html"><![CDATA[<p>直接用一个简单的例子展示 RelativeLayout 的不一样之处：</p><p><img src="http://tao93.top/images/2018/11/01/1541079447.png" alt=""></p><p>图中，左边是一个简单的 Android layout 例子，例子中在外侧是一个最大的 horizontal 的 LinearLayout，它有 3 个 child，分别是左部、分割线和右部。左部和右部非常相似，都是外面一个 ViewGroup 内嵌一个 TextView，且 ViewGroup 的高度都是 wrapContent 而内嵌的 TextView 的高度都是 matchParent.</p><p>因为 TextView 背景都是红色，所以从 preview 可以清晰看到，左部的 TextView 等效于 wrapContent，而右部的 TextView 则等效于 matchParent，这就是 RelativeLayout 的不一样。简而言之就是，RelativeLayout 中内嵌的 child tree 的根节点 size 如果是 matchParent，那么此 child tree 测量得到的 size 将会是最大化的，可达到 RelativeLayout size 的上限，而其余常见 ViewGroup 没有此特点，比如 LinearLayout, FrameLayout, ConstraintLayout 等。</p><p>究其原因，可以从 RelativeLayout 中的 onMeasure 方法找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = views[i];</span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">            applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class="line">            measureChild(child, params, myWidth, myHeight);</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 RelativeLayout#onMeasure 的片段，可知对所有 child 调用了 measureChild 方法，而这是个 RelativeLayout 的 private 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Measure a child. The child should have left, top, right and bottom information</span></span><br><span class="line"><span class="comment"> * stored in its LayoutParams. If any of these values is VALUE_NOT_SET it means</span></span><br><span class="line"><span class="comment"> * that the view can extend up to the corresponding edge.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child Child to measure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params LayoutParams associated with child</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myWidth Width of the the RelativeLayout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myHeight Height of the RelativeLayout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, LayoutParams params, <span class="keyword">int</span> myWidth, <span class="keyword">int</span> myHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(params.mLeft,</span><br><span class="line">            params.mRight, params.width,</span><br><span class="line">            params.leftMargin, params.rightMargin,</span><br><span class="line">            mPaddingLeft, mPaddingRight,</span><br><span class="line">            myWidth);</span><br><span class="line">    <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(params.mTop,</span><br><span class="line">            params.mBottom, params.height,</span><br><span class="line">            params.topMargin, params.bottomMargin,</span><br><span class="line">            mPaddingTop, mPaddingBottom,</span><br><span class="line">            myHeight);</span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述方法看，先获取到 child measureSpec，然后依次为参数来 measure 每个 child。再进入到 RelativeLayout#getChildMeasureSpec 这个方法中看看下面的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (childStart != VALUE_NOT_SET &amp;&amp; childEnd != VALUE_NOT_SET) &#123;</span><br><span class="line">    <span class="comment">// Constraints fixed both edges, so child must be an exact size.</span></span><br><span class="line">    childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">    childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (childSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Child wanted an exact size. Give as much as possible.</span></span><br><span class="line">        childSpecMode = MeasureSpec.EXACTLY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecSize = Math.min(maxAvailable, childSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension.</span></span><br><span class="line">            childSpecSize = childSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">        <span class="comment">// Child wanted to be as big as possible. Give all available</span></span><br><span class="line">        <span class="comment">// space.</span></span><br><span class="line">        childSpecMode = isUnspecified ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;</span><br><span class="line">        childSpecSize = Math.max(<span class="number">0</span>, maxAvailable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childSize == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">        <span class="comment">// Child wants to wrap content. Use AT_MOST to communicate</span></span><br><span class="line">        <span class="comment">// available space if we know our max size.</span></span><br><span class="line">        <span class="keyword">if</span> (maxAvailable &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We have a maximum size in this dimension.</span></span><br><span class="line">            childSpecMode = MeasureSpec.AT_MOST;</span><br><span class="line">            childSpecSize = maxAvailable;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We can grow in this dimension. Child can be as big as it</span></span><br><span class="line">            <span class="comment">// wants.</span></span><br><span class="line">            childSpecMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            childSpecSize = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，chileSpecMode 赋值为 MeasureSpec.AT_MOST 的地方只有 27 行一个地方，也就是只要 child 声明为 match_parent，那么 child 的 specMode 不出意外就会是 EXACTLY。而 EXACTLY 意味着此 child 为根节点的 view tree 的测量结果将会是此 child 的 specSize，而这个 specSize 显然就是 RelativeLayout 能达到的最大 size (可能需要减去 padding，RelativeLayout 其它 child 占据的空间等)。</p><p>顺便再看看 LinearLayout 等等为啥不是这样的，事实上 LinearLayout 等使用的是 ViewGroup 这个抽象基类中的 getChildMeasureSpec 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可以看到，如果 child 声明为 matchParent 但是 RelativeLayout 的 specMode 是 AT_MOST 的话，那么 child 的 specMode 如第 35 行所示将会是 AT_MOST，这就是和 RelativeLayout 的不同之处。</p><p>总结一下，即使 RelativeLayout 的 specMode 是 AT_MOST，只要它的 child 声明 matchParent，那么 child 的 SpecMode 一般会是 EXACTLY，此 child 为根节点的 viewTree 的测量结果就是最大化的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接用一个简单的例子展示 RelativeLayout 的不一样之处：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/11/01/1541079447.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中，左边是一个简单的 Androi
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一键设置 Android http proxy 的尝试</title>
    <link href="http://tao93.top/2018/11/01/%E4%B8%80%E9%94%AE%E8%AE%BE%E7%BD%AE%20Android%20http%20proxy%20%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://tao93.top/2018/11/01/一键设置 Android http proxy 的尝试/</id>
    <published>2018-11-01T03:04:32.507Z</published>
    <updated>2018-11-01T03:04:32.507Z</updated>
    
    <content type="html"><![CDATA[<p>自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&gt; 点击当前 WiFi -&gt; 点击编辑 -&gt; 点击 Advanced options -&gt; proxy 选择 None 或者 Manual -&gt; 上一步如果选了 Manual, 则需要输入 IP 地址和端口号 -&gt; 保存。</p><p>这样一个六七步的步骤，真的很让人烦，而如果电脑的局域网 IP 地址不固定的话，就更加让人不爽了，意味着每次电脑重新联网后，手机都需要重新设置代理的 IP。就算电脑 IP 固定，当手机需要使用 Charles 代理或者关闭代理，都比较麻烦。所以很久前我就想有没有方法可以一键设置代理。</p><p>我的构想是，如果电脑 IP 地址不固定，那么一键设置需要在电脑上操作，不然无法获知电脑的 IP，当然也可以电脑运行个 socket server，然后手机连接，然后电脑把 IP 发给手机。如果电脑 IP 地址固定，最理想的则是手机上一键设置，这样就不需要 adb 连接了。</p><p>经过一番 google 和惨痛的尝试，我得知了两种并不完美的方法。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置代理信息 exclList是添加不用代理的网址用的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHttpProxySetting</span><span class="params">(Context context, String host, <span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">        WifiManager wifiManager =(WifiManager)context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration config = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(host,port);</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">            Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">            Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">            method.invoke(config,mInfo);</span><br><span class="line">            Object mIpConfiguration = getDeclaredFieldObject(config,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line"></span><br><span class="line">            setEnumField(mIpConfiguration, <span class="string">"STATIC"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">            setDeclardFildObject(config,<span class="string">"mIpConfiguration"</span>, mIpConfiguration);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// save the settings</span></span><br><span class="line">            wifiManager.updateNetwork(config);</span><br><span class="line">            wifiManager.disconnect();</span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消代理设置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSetHttpProxy</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, InvocationTargetException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        WifiConfiguration configuration = getCurrentWifiConfiguration(wifiManager);</span><br><span class="line">        ProxyInfo mInfo = ProxyInfo.buildDirectProxy(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (configuration != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                configuration.setHttpProxy(mInfo);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class clazz = Class.forName(<span class="string">"android.net.wifi.WifiConfiguration"</span>);</span><br><span class="line">                Class parmars = Class.forName(<span class="string">"android.net.ProxyInfo"</span>);</span><br><span class="line">                Method method = clazz.getMethod(<span class="string">"setHttpProxy"</span>,parmars);</span><br><span class="line">                method.invoke(configuration,mInfo);</span><br><span class="line">                Object mIpConfiguration = getDeclaredFieldObject(configuration,<span class="string">"mIpConfiguration"</span>);</span><br><span class="line">                setEnumField(mIpConfiguration, <span class="string">"NONE"</span>, <span class="string">"proxySettings"</span>);</span><br><span class="line">                setDeclardFildObject(configuration,<span class="string">"mIpConfiguration"</span>,mIpConfiguration);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            wifiManager.updateNetwork(configuration);</span><br><span class="line">            wifiManager.disconnect(); </span><br><span class="line">            wifiManager.reconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的方法直接获取到当前连接的 WiFi configuration，然后把它的 http proxy 类型 (枚举变量，主要是 NONE 和 STATIC 两个值)，和值 (即 IP 和 port) 用反射的方法设置进去，然后更新 WiFi configuration，并断开 WiFi 并重新连接 WiFi。以上设置代理和关闭代理的动作，全部由上面的代码一键完成，直接在手机上运行即可，并且代码运行结果和手机 Settings 中的 UI 结果是一致的，感觉相当完美。</p><p>然而方法一不支持 API 23 以上的 Android 系统，而所用 API 21 测试是可以完美运行的，在如今 API 28 都发布了的时候，不支持 API 23 以上可以说让实用性大打折扣。不过这是可以理解的，毕竟处于安全考虑，不能让用户的手机随便被第三方 app 默默修改了代理，这太危险了。</p><p>方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>执行以上命令后，Settings 中的 UI 并未更改，但是代理已经生效。这一方法实际是新增了 Settings Provider 中的 key value，有两种方式可以查看到这一新增 key value:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get global http_proxy</span><br><span class="line">adb shell settings get global global_http_proxy_host</span><br><span class="line">adb shell settings get global global_http_proxy_port</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String httpProxy = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.HTTP_PROXY);</span><br><span class="line">String httpProxyHost = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST);</span><br><span class="line">String httpProxyPort = android.provider.Settings.Global.getString(contentResolver, android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT);</span><br></pre></td></tr></table></figure><p>Android 不运行第三方应用新增这样的属性值，而只有 read 的权限，所以需要 adb 来新增这些属性值，除了这个缺点，还有更致命的缺陷。方法二的 reset proxy 的方法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是的，目前我已知的方法，只有重启才能让上述 delete 生效，当然手动重启都可以。</span></span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p>要 reset proxy，删除 key value 和重启 (目前我只知道重启可以) 缺一不可，否则设备只能通过 proxy 使用 http。也就是连别的 wifi 或者使用数据流量都不能使用 http！要想不重启，除非在将 key value 设置为另一个有效的 proxy 配置，这个缺陷可以说非常致命了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自打来到杭州后，调试 Android app 时用 Charles 做代理的场景成了非常常见的操作，而让人烦恼的是，每次都需要进入手机的 WiFi -&amp;gt; 点击当前 WiFi -&amp;gt; 点击编辑 -&amp;gt; 点击 Advanced options -&amp;gt; prox
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ShadowSocks for Gradle &amp; Shell</title>
    <link href="http://tao93.top/2018/10/18/%E6%B3%A8%E6%84%8F%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%201086/"/>
    <id>http://tao93.top/2018/10/18/注意下面的端口号不一定是 1086/</id>
    <published>2018-10-18T07:11:58.403Z</published>
    <updated>2018-10-18T07:11:58.403Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://shadowsocks.org/" target="_blank" rel="noopener">ShadowSocks</a> 是个很好的工具，它自带 PAC 模式和全局模式。</p><p>不过这个全局模式并不能完全让整台电脑的所有网络访问全部通过代理进行，比如终端命令就不可以。我打开全局代理后，然后在终端执行 curl ip.cn 命令，结果显示检查到的 IP 地址依然是本机真实的公网 IP:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="selector-tag">curl</span> <span class="selector-tag">ip</span><span class="selector-class">.cn</span></span><br><span class="line">当前 <span class="selector-tag">IP</span>：122<span class="selector-class">.225</span><span class="selector-class">.224</span><span class="selector-class">.218</span> 来自：浙江省杭州市 电信</span><br></pre></td></tr></table></figure><p>要让 shell 也使用代理，可以执行一下命令来设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意下面的端口号不一定是 1086</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><p>上面我使用的端口号是 1086，这是因为我的 ShadowSocks 客户端的偏好设置中如下所示的设置项是 1086:</p><p><img src="http://tao93.top/images/2018/10/18/1539842647.png" alt=""></p><p>但是每次都执行上面的 export 命令很麻烦，那么可以在 shell 的配置文件中设置 alias：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable proxy</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">"export ALL_PROXY=socks5://127.0.0.1:1086"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable proxy</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">"unset ALL_PROXY"</span></span><br></pre></td></tr></table></figure><p>前两天我发现在家的时候，Android Studio 无法访问 Google 的 maven 仓库，即使我开全局代理也不行，即使我在 terminal 中按前面方法设置 proxy 并且使用 gradle 命令来构建也不行。</p><p>为此，我找到了向 gradle 设置 proxy 的方法，那就是在项目的 local.properties 文件（之所以选这个文件是因为这个文件一般是不纳入 git 管理的，所以我可以随便自定义地修改）加入下面的设置，即可让 gradle 使用代理：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.<span class="attribute">jvmargs</span>=-Xmx4536m <span class="attribute">-DsocksProxyHost</span>=127.0.0.1 <span class="attribute">-DsocksProxyPort</span>=1086</span><br></pre></td></tr></table></figure><p>上面的端口号和前面的方法中是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://shadowsocks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowSocks&lt;/a&gt; 是个很好的工具，它自带 PAC 模式和全局模式。&lt;/p&gt;
&lt;p&gt;不过这个全局模式并不能完全让整台电脑的所有网络
      
    
    </summary>
    
    
      <category term="ShadowSocks" scheme="http://tao93.top/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t let Your App Drain your Users&#39; Battery</title>
    <link href="http://tao93.top/2018/10/10/Don&#39;t%20let%20Your%20App%20Drain%20your%20Users&#39;%20Battery/"/>
    <id>http://tao93.top/2018/10/10/Don&#39;t let Your App Drain your Users&#39; Battery/</id>
    <published>2018-10-10T08:52:40.506Z</published>
    <updated>2018-10-10T10:12:02.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-drives-battery-Life"><a href="#What-drives-battery-Life" class="headerlink" title="What drives battery Life?"></a>What drives battery Life?</h3><ol><li>Hardware (Screen etc.)</li><li>Operating System</li><li>Apps &amp; Services</li><li>User Interaction</li></ol><h3 id="Efforts-to-improve-battery"><a href="#Efforts-to-improve-battery" class="headerlink" title="Efforts to improve battery"></a>Efforts to improve battery</h3><ol><li><a href="https://developer.android.google.cn/reference/android/app/job/JobScheduler" target="_blank" rel="noopener">Job Scheduler</a> (Since API 21)</li><li>Doze &amp; App Standby(Since API 23)</li><li>Doze on-the-go (Since API 24)</li><li>Background Limits (Since API 26)</li><li>Adaptive Battery, Background Restrictions etc. (Since API 28)</li></ol><p>Among the above <strong>only Job Scheduler</strong> could be directly leveraged by app developers in the code.</p><h4 id="Job-Scheduler-Since-API-21"><a href="#Job-Scheduler-Since-API-21" class="headerlink" title="Job Scheduler (Since API 21)"></a>Job Scheduler (Since API 21)</h4><p>Job Scheduler is suitable when we want to do something in a specified circumstance, such as:</p><blockquote><p>Batterry is not Low</p><p>With specified Netwoek Status</p><p>Is Charging</p><p>Storage is not Low</p><p>Device is Idle</p></blockquote><p>Without Job Scheduler, we may need to keep a service running to monitor specified system broadcast and then do what we want, which is not optimized for battery comparing to Job Scheduler. </p><p>Here is a simple example of Job Scheduler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(<span class="keyword">final</span> JobParameters params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// stuffs that consumes a lot of time like making a backup to the cloud</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// tell scheduler our job is done</span></span><br><span class="line">                jobFinished(params, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return true to tell scheduler our job is not finished.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sJobId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> JobScheduler mJobScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mJobScheduler = (JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.schedule_btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                scheduleAJob();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleAJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (JobInfo info : mJobScheduler.getAllPendingJobs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info.getId() == sJobId) &#123;</span><br><span class="line">                <span class="comment">// the last scheduled job is not finished yet</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build the jobInfo that requires charging, idle and network that won't charge.</span></span><br><span class="line">        JobInfo jobInfo = <span class="keyword">new</span> JobInfo.Builder(++ sJobId, <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MyJobService.class))</span><br><span class="line">                .setRequiresCharging(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiresDeviceIdle(<span class="keyword">true</span>)</span><br><span class="line">                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        mJobScheduler.schedule(jobInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Doze-Since-API-23"><a href="#Doze-Since-API-23" class="headerlink" title="Doze (Since API 23)"></a>Doze (Since API 23)</h4><p>Unplugged and stationary for a period of time, a device would be in doze mode, which restricts all apps regardless whether they targets api 23. However, the OS periodically exits Doze for a brief time to let apps complete their deferred jobs. The bried time slot is called Maintenance window. Below is a figure showing the mode changing:</p><p><img src="http://tao93.top/images/2018/10/10/1539151703.png" alt=""></p><p>In doze mode, the following are restricted:</p><ol><li>Network access is suspended</li><li>WakeLock is ignored</li><li>Standard AlarmManager alarms (setExact() and setWindow()) are deferred to the next maintenance window</li><li>No Wi-Fi scaning</li><li>No <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html" target="_blank" rel="noopener">Sync Adapters</a></li><li>No JobScheduler jobs</li></ol><p>Stuffs not restricted by Doze:</p><ol><li>FCM high priority msg</li><li>Alarms set with setAndAllowWhileIdle() and setExactAndAllowWhileIdle()</li></ol><p>Testing Doze:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the system into Doze mode</span></span><br><span class="line">adb shell dumpsys deviceidle force-idle</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit idle mode &amp; reactivate the device</span></span><br><span class="line">adb shell dumpsys deviceidle unforce</span><br><span class="line">adb shell dumpsys battery reset <span class="comment"># this also recovers charging</span></span><br></pre></td></tr></table></figure><h4 id="App-Standby-Since-API-23"><a href="#App-Standby-Since-API-23" class="headerlink" title="App Standby (Since API 23)"></a>App Standby (Since API 23)</h4><p>An app is idle if the followings are satisfies:</p><ol><li>No user touching for a certain period of time</li><li>No processes in the foreground (either as an activity or foreground service)</li><li>No notifications showing on the lock screen or in the notification center.</li><li>Not charging</li></ol><p>Testing App Standby:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if your device is connected with a cable, use the following to disable charging</span></span><br><span class="line">adb shell dumpsys battery unplug</span><br><span class="line"></span><br><span class="line"><span class="comment"># check whether your app is in standby mode. A 'Idle=false' output means not in standby mode</span></span><br><span class="line">adb shell am get-inactive &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force the app into App Standby mode</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit Standby mode for your app</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-inactive &lt;packageName&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Doze-on-the-go-Since-API-24"><a href="#Doze-on-the-go-Since-API-24" class="headerlink" title="Doze on-the-go (Since API 24)"></a>Doze on-the-go (Since API 24)</h3><p>A lighter Doze mode which activates when the phone is moving in our pockets or hands. Doze on-the-go allows WakeLock, Wifi Scaning and GPS etc, that’s why it’s lighter than former Doze mode introduced in API 23.</p><p>Ignore Doze configuration:</p><p><img src="http://tao93.top/images/2018/10/10/1539154768.png" alt=""></p><h4 id="Background-Limits-Since-API-26"><a href="#Background-Limits-Since-API-26" class="headerlink" title="Background Limits (Since API 26)"></a>Background Limits (Since API 26)</h4><p>Background Limits affects apps that targets API 26 or higher and includes Background Service Limitations and Broadcast Limitations.</p><h5 id="Background-Service-Limitations"><a href="#Background-Service-Limitations" class="headerlink" title="Background Service Limitations"></a>Background Service Limitations</h5><p>For an app that targets API 26 or higher, it’s in background if:</p><ol><li>No visible Activity</li><li>No foreground Service</li><li>Not InputMethod Service, Wallpaper service etc.</li></ol><p>After several minutes of being in background, background services are stopped by the OS. Replacing background services with Scheduler Jobs is fine in many cases.</p><h5 id="Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26"><a href="#Broadcast-Limitations-Introduced-in-API-25-and-strengthened-in-API-26" class="headerlink" title="Broadcast Limitations (Introduced in API 25 and strengthened in API 26)"></a>Broadcast Limitations (Introduced in API 25 and strengthened in API 26)</h5><p>For an app that targets API 26 or higher, it:</p><ol><li>can’t register receivers for implicit broadcasts in Manifest file</li><li>can register receivers for explicit broadcasts in Manifest file</li><li>can register receivers for any broadcasts runtimely</li></ol><p>Broadcasts that require a <a href="https://developer.android.com/guide/topics/manifest/permission-element.html#plevel" target="_blank" rel="noopener">signature permission</a> are exempted from this restriction.</p><p>In some cases, registering system broadcasts could be replaced by Scheduler Jobs, such as if we want to do something when the device is charging.</p><h3 id="Adaptive-Battery-Since-API-29"><a href="#Adaptive-Battery-Since-API-29" class="headerlink" title="Adaptive Battery (Since API 29)"></a>Adaptive Battery (Since API 29)</h3><p>A new feature based on Machine Learning.</p><ol><li>Limit battery for apps that are not used often.</li><li>Apps should be able to run quickly when they are needed.</li><li>Don’t bother users to manage manually.</li></ol><p>Apps are arranged into 4 standby buckets: <code>Active</code>, <code>Working set</code>, <code>Frequent</code> and <code>Rare</code>. Limits are increased from <code>Active</code> to <code>Rare</code>:</p><p><img src="http://tao93.top/images/2018/10/10/1539157914.png" alt=""></p><p>An app is in <code>Active</code> if it:</p><ol><li>has launched an activity</li><li>is running a foreground service</li><li>has a sync adapter associated with a content provider used by a foreground app</li><li>has a notification clicked by the user</li></ol><p>An app is in <code>Working set</code> if it runs often but isn’t active.</p><p>An app is in <code>Frequent</code> if it is used regularly, but not necessarily every day.</p><p>An app is in <code>Rare</code> if it is not often used.</p><p>Find out what bucket the app is currently in programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsageStatsManager.getAppStandbyBucket()</span><br></pre></td></tr></table></figure><p>Test Standby Buckets:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assgin your app into a specified bucket</span></span><br><span class="line">adb shell am <span class="built_in">set</span>-standby-bucket &lt;packagename&gt; active|working_set|frequent|rare</span><br><span class="line"></span><br><span class="line"><span class="comment"># check bucket assignments for one app or all apps</span></span><br><span class="line"><span class="comment"># the output '10 20 30 40' mean Active, Working set, Frequent, Rare respectively</span></span><br><span class="line">adb shell am get-standby-bucket [&lt;packagename&gt;]</span><br></pre></td></tr></table></figure><h3 id="Battery-Saver"><a href="#Battery-Saver" class="headerlink" title="Battery Saver"></a>Battery Saver</h3><p>New battery saver in API 29:</p><ol><li>No red status bar and has animation</li><li>Location service is off when screen is off</li><li>Battery level threshold is adjustable</li></ol><p>Apps are encouraged to switch to dark theme when battery saver is on.</p><p>Check whether battery saver is on programmatically:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((PowerManager)getSystemService(Context.POWER_SERVICE)).isPowerSaveMode()</span><br></pre></td></tr></table></figure><p>Test battery saver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pretend to be in low battery status</span></span><br><span class="line">adb shell settings put global low_power 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset all configurations</span></span><br><span class="line">adb shell dumpsys battery reset</span><br></pre></td></tr></table></figure><h3 id="Background-Restrictions-Since-API-29"><a href="#Background-Restrictions-Since-API-29" class="headerlink" title="Background Restrictions (Since API 29)"></a>Background Restrictions (Since API 29)</h3><p>Two criterias:</p><ol><li>Apps targeting pre-Oreo and using background services</li><li>Excessive WakeLocks (&gt; 1hr in background)</li></ol><p>Background restrictions are decided by the users:</p><p><img src="http://tao93.top/images/2018/10/10/1539156945.png" alt=""></p><p>When Background Restrictions is enabled for an app, fllowings are restricted:</p><ol><li>Background jobs, alarms, services and network accessing</li><li>Location related updates </li><li>Foreground services</li></ol><p>Except GUI operation, Background restrictions could alse be finished via adb:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable background restrictions</span></span><br><span class="line">adb shell appops <span class="built_in">set</span> &lt;package_name&gt; RUN_ANY_IN_BACKGROUND allow</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-drives-battery-Life&quot;&gt;&lt;a href=&quot;#What-drives-battery-Life&quot; class=&quot;headerlink&quot; title=&quot;What drives battery Life?&quot;&gt;&lt;/a&gt;What drives b
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>通过 wifi 连接 adb</title>
    <link href="http://tao93.top/2018/09/26/%E9%80%9A%E8%BF%87%20wifi%20%E8%BF%9E%E6%8E%A5%20adb/"/>
    <id>http://tao93.top/2018/09/26/通过 wifi 连接 adb/</id>
    <published>2018-09-26T07:47:46.693Z</published>
    <updated>2018-09-26T07:47:46.694Z</updated>
    
    <content type="html"><![CDATA[<p>Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 类型的 native 库，并且也还会有一些其他局限性。</p><p>其实，真机也是可以用局域网无线连接的，只需要电脑和 Android 设备在同一个局域网内。大致步骤就是下面几条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先用数据线连接，确保 adb devices 可以看到设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 adb server 重新以 tcp 模式启动，端口指定为 5555</span></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑和手机之间建立无线连接</span></span><br><span class="line">adb connect &lt;IP address of your Computer&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拔掉数据线，此时再检查一遍是否无线连接成功</span></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>每次都想上面这样执行两三条命令显然太繁杂，尤其是其中还有一步要替换为电脑的当前内网 IP，所以应该写一个脚本来把上面的东西一键搞定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先断开一下</span></span><br><span class="line">adb disconnect</span><br><span class="line"></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep 两秒，不然的话因为刚执行 adb tcpip 5555 那么后续的命令会找不到 devices</span></span><br><span class="line">sleep 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装了黑域</span></span><br><span class="line">adb shell pm list packages | grep <span class="string">'me\.piebridge\.brevent'</span></span><br><span class="line">has_brevent=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$has_brevent</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 重新启动黑阈</span></span><br><span class="line">    adb -d shell sh /data/data/me.piebridge.brevent/brevent.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 android 设备的 IP 地址</span></span><br><span class="line">android_ip=`adb shell <span class="string">"ifconfig"</span> | grep <span class="string">'inet.*cast'</span> | awk <span class="string">'&#123;print $2&#125;'</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Android device IP: '</span> <span class="variable">$android_ip</span></span><br><span class="line">adb connect <span class="variable">$android_ip</span></span><br></pre></td></tr></table></figure><p>上面的脚本中，会检查是否安装了<a href="https://play.google.com/store/apps/details?id=me.piebridge.brevent&amp;hl=zh" target="_blank" rel="noopener">黑阈</a>，如果安装了，就会重新启动黑阈。黑阈是一款管理 Android 应用运行状态的应用，用来限制应用唤醒和常驻后台。Android 8.0 以上的系统，只要 USB 调试选项发生变更，黑阈就会停止起作用，所以此处需要重新让它运行起来。另外上面的脚本中还通过 ifconfig 命令来获取到电脑的内网 IP，用于执行 adb connect 命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android 调试有个让人不开心的地方，那就是如果用真机调试，需要用数据线连接到 Android 设备，而对于 type C 接口的 MacBook，如果没有双端 type C 数据线，那么还得用转接器才行。相比较真机调试，其实还可以用模拟器，不过模拟器只能支持 x86 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
      <category term="adb" scheme="http://tao93.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>记一次混淆问题导致的 bug</title>
    <link href="http://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E7%9A%84%20bug/"/>
    <id>http://tao93.top/2018/09/26/记一次混淆问题导致的 bug/</id>
    <published>2018-09-26T07:47:46.691Z</published>
    <updated>2018-09-26T07:47:46.692Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 <a href="https://github.com/card-io/card.io-Android-SDK" target="_blank" rel="noopener">Card.IO</a> 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用了几个 so 库。只不过没有提供 armeabi 类型的 so 库，而只有 armeabi-v7a 和 armeabi-v8a 之类的 so 库。所以初次提供给公司项目使用时，出现了找不到 so 的错误，也就是 UnsatisfiedLinkError 错误。也就是下面这样的提示：</p><p><img src="http://tao93.top/images/2018/09/01/1535807292.png" alt=""></p><p>后面我想尽办法提供了 armeabi 类型的 so 库，这个问题就算告一段落了，然后这还不是结束。今天，测试又发了一段崩溃日志，也就是下面这样的日志：</p><p><img src="http://tao93.top/images/2018/09/01/1535807316.png" alt=""></p><p>因为之前出现过找不到 so 库的问题，所以乍一看上面的日志，我们都以为又是找不到 so 库 (为我们的菜表示羞愧 🤩)。然后经过上网查找，并和 native 的代码对比，我才意识到，上面的日志其实是 so 库是找到了的，只不过是加载 so 库时，调用 JNI_onLoad 这个 native 方法时出错了。此外，向测试要了 debug 包，发现没有问题，所以初步断定是混淆的问题，然后就是排查了。</p><p>我把测试提供给我的 release 包反编译，然后和 JNI_onLoad 方法中的 native 代码对比，终于找到原因了：release 包中，我提供的库的某个方法被混淆掉了，但是这个方法是需要被 JNI_onLoad 方法调用的。所以问题就是：一个需要被 so 库调用的 Java 方法被混淆了！其实，很多时候我们的项目引入一些著名的第三方包 (比如 Knife 之类的) 时，都会在我们的项目的 Proguard 配置文件中声明不要混淆这些三方包的代码，为的就是避免上面这个问题。说一句显得有点废话的话：第三方包发布混淆包时，他们的 Proguard 配置文件只能在他们的 aar 包构建时生效，而在他们的 aar 构建到我们的项目中时，他们的 Proguard 早已鞭长莫及不起作用了。</p><p>回到我遇到的这个问题，我们本地自测时，很少会进行混淆，本地的 release 默认都是未混淆的 (minifyEnabled 是 false)，所以自测的时候根本没有注意到这个问题。这次这个 bug 的解决办法之一是，在最终使用我的 aar 的项目中，显示声明不要混淆我这个 aar 中的某些代码，这就和上一段说的声明不混淆第三方包的代码是一样的。But，还有一种更好的方法，那就是使用 com.android.support.support-annotations 支持库中的 @Keep 注解，此注解可以标记哪些方法或者类在最终构建 apk 时不会被混淆掉 (当然在前面的 aar 构建等过程自然也不会混淆)。</p><p>总结一下，当前项目的 Proguard 配置文件只能在当前项目构建输出产物时起作用，而无法确保输出的产物交给其他项目集成时不被混淆。若要确保后者，那就可以用 support-annotations 支持库中的注解了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近把 &lt;a href=&quot;https://github.com/card-io/card.io-Android-SDK&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Card.IO&lt;/a&gt; 改造成一个 aar 依赖提供给公司的项目使用。这个 aar 中使用
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记一个简单的递归问题与解法</title>
    <link href="http://tao93.top/2018/09/26/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E6%B3%95/"/>
    <id>http://tao93.top/2018/09/26/记一个简单的递归问题与解法/</id>
    <published>2018-09-26T07:47:46.682Z</published>
    <updated>2018-09-26T07:47:46.691Z</updated>
    
    <content type="html"><![CDATA[<p>递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。</p><p>前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：</p><p><img src="http://tao93.top/images/2018/09/01/1535807089.png" alt=""></p><p>这个问题很明显是个递归问题。我当时就夸下海口说，10分钟给你写个 Python 脚本。虽然实际上用了接近 30 分钟。。。</p><p>言归正传，这个问题的递归关系包含两种，<strong>嵌套关系</strong>和<strong>并列关系</strong>。比如 2[a]3[c] 最外层是并列关系，即 2[a] 和 3[c] 是两个互相并列的子问题，他们的解答串起来就是 2[a]3[c] 的解答。而 2[2[a]] 最外层则是一个嵌套关系，即要求 2[2[a]] 的解答需要先求子问题 2[a] 的解答 (这个解答显示就是 aa)，所以问题化解为 2[aa]。</p><p>所以思路就是，对于一个问题 X，先按并列关系划分为若干个子问题 X1, X2, …, Xn；如果 n 大于 1，那么各个子问题的答案串起来就是答案了；如果 n 等于 1，那么说明 X 最外层并不是并列关系而是嵌套关系或者根本就是单个字母，如果 X 是单个字母，那么答案就是它本身，反之，那么 X 一定是 s[Y] 的形式，答案就是 s 个 Y 的答案串起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_loc</span><span class="params">(input, left)</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    i = left</span><br><span class="line">    <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> input[i] == <span class="string">']'</span>:</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> input[i] == <span class="string">'['</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'['</span> <span class="keyword">not</span> <span class="keyword">in</span> input:</span><br><span class="line">        <span class="keyword">return</span> input</span><br><span class="line">    first = input.find(<span class="string">'['</span>)</span><br><span class="line">    i = p_loc(input, first)</span><br><span class="line">    <span class="keyword">if</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">        parts = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(input) <span class="number">-1</span>:</span><br><span class="line">            parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">            input = input[i+<span class="number">1</span>:]</span><br><span class="line">            first = input.find(<span class="string">'['</span>)</span><br><span class="line">            i = p_loc(input, first)</span><br><span class="line">        parts.append(input[:i+<span class="number">1</span>])</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">            res += do(part)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = p_loc(input, first)</span><br><span class="line">        sub_res = do(input[first+<span class="number">1</span>:right])</span><br><span class="line">        <span class="keyword">return</span> int(input[:first]) * sub_res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(do(<span class="string">'2[a]3[c]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]'</span>))</span><br><span class="line">print(do(<span class="string">'2[2[a]]3[c]'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归问题就像是俄罗斯套娃一样精妙，大的套小的，一层一层套在一起。&lt;/p&gt;
&lt;p&gt;前些日子，一个朋友说看到一个算法题目，然后问我有思路吗？问题就是下面这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/153580
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://tao93.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>日常修 Bug</title>
    <link href="http://tao93.top/2018/09/26/%E6%97%A5%E5%B8%B8%E4%BF%AE%20Bug/"/>
    <id>http://tao93.top/2018/09/26/日常修 Bug/</id>
    <published>2018-09-26T07:47:46.680Z</published>
    <updated>2018-09-26T07:47:46.681Z</updated>
    
    <content type="html"><![CDATA[<p>前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。</p><p><img src="http://tao93.top/images/2018/09/01/1535790364.png" alt=""></p><p>鉴于报告人没提具体的版本号，也没提怎么出现的，也没提是什么机型出现的，我就和报告人说沟通了一番。报告人说应该是小米 6 出现这个问题，我遂借了一部小米 6，然后运行 demo 并没有复现。现在就有两种可能，第一是只有报告人那台小米 6 有问题，第二是 demo 没问题但是集成到巴西版本后就有问题了。经过艰苦交涉，终于从对方那里要到了一个安装包后，我手里手机复现了此问题，事实很快就清楚了：demo 没问题但是集成后有问题，也就是和机型压根没关系。</p><p>先直接给出最后修复的方法，修复方法是在我的扫卡库的 activity 中，调用以下一行就 OK 了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 PhoneWindow 设置一个背景 </span></span><br><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br></pre></td></tr></table></figure><p>嗯，修复方法很简单，但是为什么这样做就 work 了呢？接下来就是调试的过程了.</p><p>首先获取一下这个界面的 layout 信息，尝试看看右侧白色细线是不是额外塞进去的视图，结果并不是。然后我再看是否是设置了什么 padding 导致了这个问题。事实上，正式这样的，可惜我可能是瞎了眼，居然没有看到下面的线索，即 DecorView 的右侧 padding 是 2：</p><p><img src="http://tao93.top/images/2018/09/01/1535790424.png" alt=""></p><p>我只看到了下面的 LinearLayout 的宽度是1438，比我的手机屏幕宽度1440少了2个像素，显然就是右侧的白线了。</p><p><img src="http://tao93.top/images/2018/09/01/1535790483.png" alt=""></p><p>所以我怎么办呢，我开始调试 measure 和 layout 的过程。因为 DecorView 的宽度是 1440 没错，可是它的 Child LinearLayout 宽度只有 1438，所以我先条件断点在 LinearLayout 类中的 onMeasure 方法。断点的条件我本来想写 getParent() instance DecorView，结果发现无法应用 DecorView，于是我就改成了 getParent() != null &amp;&amp; getParent().getParent() == null，其实这是不对的，DecorView 同样有 Parent，也就是 ViewRootImpl 对象，我把这个给忘了。所以断点条件就成了下面这样臃肿的了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent() != <span class="keyword">null</span> &amp;&amp; getParent().getParent().getParent() == <span class="keyword">null</span> </span><br><span class="line"><span class="comment">// 当然其实还有更简洁的方式，比如下面这样 </span></span><br><span class="line">getClass().getName.endswith(<span class="string">"DecorView"</span>)</span><br></pre></td></tr></table></figure><p>然后发现不管是 measure 还是 layout 的过程，LinearLayout 宽度始终就是 1438，DecorView 就只给它留了这个大空间。然后我开始调试到 DecorView 的测量过程中，最后发现在 ViewGroup (这里仅仅是由于 DecorView 是继承自 ViewGroup 的) 的 measureChildWithMargins 方法中，找到了关键线索：</p><p><img src="http://tao93.top/images/2018/09/01/1535790538.png" alt=""></p><p>也就是上面的 mPaddingRight 的值居然是 2 而不是 0，这意味着 DecorView 的右侧 padding 是2，这样就能解释通为啥 DecorView 的 child 宽度小了 2 了。这是我赶紧回去看 layout 信息，然后就发现了我本来早就该发现的线索了。</p><p>OK，接下来是要知道，谁把 DecorView 的右侧 padding 加了 2 的。我对 View 类的 mPaddingRight 属性加了下图所示的断点：</p><p><img src="http://tao93.top/images/2018/09/01/1535790585.png" alt=""></p><p>果然，不一会儿，我就有了收获，得到了下面的堆栈：</p><p><img src="http://tao93.top/images/2018/09/01/1535790614.png" alt=""></p><p>上面堆栈清晰了展示了右侧 padding 是怎么被设置为 2 的，概括来说，就是 PhoneWindow 在准备 DecorView 时，检查到有一个 Drawable，然后在设置这个 Drawable 时，去设置了 padding。那么为什么设置 Drawable 需要设置 padding 呢？看下图就明白了：</p><p><img src="http://tao93.top/images/2018/09/01/1535790640.png" alt=""></p><p>原来，这是个自带 padding 的 NinePatchDrawable。接下来，我就查找了一下，发现这个 drawable 就是 PhoneWindow 中的 mBackgroundsource 属性解析而来。这个属性是从应用主题中指定的。现在回到前面我提前贴出的解决方法之一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT))</span><br></pre></td></tr></table></figure><p>上面的代码调用 PhoneWindow 的 setBackgroundDrawable 方法，这个调用除了设置 bg drawable 外，还直接让 mBackgroundsource 变为 0，所以后面就轮不到那个 NinePatchDrawable 了。</p><p>其实，上面的解决方法还是有点突兀，另一种方法是，在扫卡的库中设置一个主题，这样的话，就不会应用巴西版本乘客端项目中声明的主题了，自然也就不会把那个 NinePatchDrawable 设置进来。</p><p>再说点别的。这个扫卡的库，被集成到另一个库中，然后另一个库再集成到巴西版本中。中间这个库，我是没有涉足的。所以为么验证我有没有修复成功，我只能在最终的项目中再引用一下我的库经过改动后的版本，当然版本号也要增加一下。这样的话，就可以新的覆盖旧的，把中间那个库对扫卡库的引用给覆盖的。唉，真是折腾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天有人报告巴西版本乘客端扫描银行卡的界面有 bug，即屏幕右侧有一条白线，也就是下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tao93.top/images/2018/09/01/1535790364.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;鉴于报告人没
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>提高开发效率的各种工具</title>
    <link href="http://tao93.top/2018/09/26/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7/"/>
    <id>http://tao93.top/2018/09/26/提高开发效率的各种工具/</id>
    <published>2018-09-26T07:47:46.677Z</published>
    <updated>2018-09-26T07:47:46.680Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说，工欲善其事必先利其器。好用的开发工具，虽然不会直接改善我们写的代码，但是对于效率的提高和提高舒适度还是很有帮助的。本文意在提供一些不是非常普遍使用，但是对于效率提升可能非常有用的工具。话不多说，开始正文！</p><h4 id="剪贴板工具-—-Clipy"><a href="#剪贴板工具-—-Clipy" class="headerlink" title="剪贴板工具 —- Clipy"></a>剪贴板工具 —- <a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a></h4><p>剪贴板工具实在太实用了，不过似乎大部分程序员都没有用上剪贴板工具。而 Clipy 是一款很合适的剪贴板工具，以至于我想起它时，直接将它插到最前面，并且序号编为 0。Clipy 是一个开源的剪贴板工具，简洁不闹心，复制的图片和文本都可以管理，用起来很爽。</p><p><img src="http://tao93.top/images/2018/09/01/1535789967.png" alt=""></p><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p>这是个终端加强工具，macOS 和 Linux 都可用，把默认 shell 从 bash 改为 zsh，然后再加强一下。我只用的 oh-my-zsh 的 3 个 features，但这 3 个都是很有吸引力的。</p><p>第一、自带识别 git 项目目录的功能，直接显示分支名、有无未提交的本地修改；</p><p>第二、cd 时，直接不停的按 tab，指导选中了你想要的目录，然后回车，就可以进入想进入的目标，减少输入目录名前几个字母的劳累。</p><p>第三、这是个 killer feature，在终端输入任何几个字符，按向上的箭头，就可列出以这些字符开头的所有历史命令，这样很多需重复使用的命令、很久忽然想起需要再次使用的命令的使用方便了非常多，比如忽然想起 10 天前，使用 sed 命令搞了个事情，但是 sed 命令你懂的，压根记不住用法，怎么办？直接终端输入 sed 然后按向上箭头，立马调出 sed 开头的历史命令。</p><h4 id="local-Maven-仓库"><a href="#local-Maven-仓库" class="headerlink" title="local Maven 仓库"></a>local Maven 仓库</h4><p>自打谷歌一手将 Android 的构建工具切换到 Gradle 后，远程依赖变为用由 Gradle 配置从 Maven 仓库获取依赖。而除了 Jcenter、mavenCentral、Google 这样最常见 3 个公开 Maven 仓库外，现在很多公司内部会开发一些 SDK 或者工具包之类的，然后作为依赖放在公司内部的私有 Maven 仓库中，提供给公司内部使用。</p><p>问题来了，对于普通的开发者来说，有时候需要修改某个依赖的源代码并加以验证，但是又不想把修改后的代码马上就构建一个新版本的依赖传输到公司的 Maven 仓库。毕竟，天晓得自己要改多少次，如果一直往公司 Maven 仓库推，被别人看到了好像会感觉自己很菜的样子 ?。这时候，如果有一个本地的 Maven 仓库，那先传到本地 Maven 仓库，然后再从本地仓库获取依赖，就可以避免这个问题了，特别是对于一些文件比较大的依赖，这样速度也会更快。</p><p>这里说的 local Maven 仓库，不是 Gradle 中使用 mavenLocal() 来声明的那个仓库 (通常位于 ~/.m2/repository) 中，而是指自己在个人电脑上搭建一个 Maven 仓库，就和远程仓库一样，只不过域名使用 localhost 来访问即可。</p><p>方法其实比较简单，比如使用 Nexus OSS Maven 的话，在 macOS 系统上简直不要太容易，直接 brew install nexus，然后再 nexus start 就 OK了，此时在浏览器上面打开 <a href="http://localhost:8081/nexus" target="_blank" rel="noopener">http://localhost:8081/nexus</a> 就可以开始登录了，初始用户名和密码分别是 admin 和 admin123，登录之后，里面已经有了一些 repository 了，如下图所示：</p><p><img src="http://tao93.top/images/2018/09/01/1535790041.png" alt=""></p><p>我常用的就是上面 Snapshots 这个 repository，专门用来托管 SNAPSHOT 类型的依赖，关于 SNAPSHOT 类型的依赖，我会写一篇更全面详细的文章来讲怎么使用。</p><p>OK，现在就可以在向本地的 Maven 仓库传依赖包并拉取使用了。其实，局域网内其他同事也是可以访问这个 Maven 仓库的，比如 <a href="http://localhost:8081/nexus/content/repositories/snapshots/" target="_blank" rel="noopener">http://localhost:8081/nexus/content/repositories/snapshots/</a> 这个仓库，别的同事要访问我这个 snapshot 仓库的话，只需要他把 localhost 换成我的私有 IP 地址即可。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>为什么把 Python 列出来呢？因为其实 Python 入门是非常简单的，再加上这年头，不了解一下 Python 都不好意思说自己是程序员。而入门后，可以帮我们做点事情，比如下图中，表达式计算，进制转换:</p><p><img src="http://tao93.top/images/2018/09/01/1535790099.png" alt=""></p><p>其实 Python 可以做的事很多，通过引入 Python 自带的包或者第三方库的包，Python 几乎无所不能。举个例子，去年微信跳一跳小游戏刚出来时，我看这个游戏非常简单，我就想，能不能用 Python 做个自动化脚本来跳呢？当然可以！其实原理也很简单，对于每一跳，可以分为若干步：截图、分析图片得出需要跳跃的距离、根据距离来模拟一个长按事件。这样的三个步骤对于 Android 设备是很容易实现的。所以思路就是，使用 Python 调用 adb 工具来截图、pull 截图到电脑中；然后使用 Python 的照片处理库来分析照片的像素，找到跳的那个东西的位置和下一个方块的位置，这样就知道需要跳跃的距离了；调用 adb 模拟一个长按屏幕的事件，长按的时间和需要跳跃的距离成正比，至于这个比值系数，摸索几次测试一下就可以了。详见我的博客 <a href="http://tao93.top/2018/09/01/Python%20也能玩跳一跳小游戏/">Python 也能玩跳一跳小游戏</a>。</p><h4 id="我改进过的-JD-GUI"><a href="#我改进过的-JD-GUI" class="headerlink" title="我改进过的 JD-GUI"></a>我改进过的 JD-GUI</h4><p>恬不知耻的推荐一下我<a href="https://github.com/Tao93/jd-gui" target="_blank" rel="noopener">更改过的 JD-GUI</a>。<a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener">JD-GUI</a> 本来是一个开源项目，但是已经3年没有维护了。两年前，当时因为工作需要，我要频繁的解压 apk，把 dex 文件转成 jar，然后再用 JD-GUI 反编译查看代码注入效果，所以我就想，这么三个步骤能不能一步搞定。于是经过一个周末的努力，我小改了一下 JD-GUI，使其支持直接拖入 apk 文件，然后自动解压，自动调用 apktool 来将 dex 转成 jar 文件，然后再交给原 JD-GUI 反编译。PS：我非常贴心的提供了 macOS、Windows、Linux 三个平台的 binary 包。</p><h4 id="the-Unarchiver-for-macOS"><a href="#the-Unarchiver-for-macOS" class="headerlink" title="the Unarchiver for macOS"></a><a href="https://itunes.apple.com/cn/app/the-unarchiver/id425424353?mt=12" target="_blank" rel="noopener">the Unarchiver</a> for macOS</h4><p>macOS 自带的解压工具比较弱鸡，比如 jar 文件无法解压，一些别的压缩包解压时也会出幺蛾子。而这款 the Unarchiver for macOS 体积不大，简洁却可以应付几乎所有的解压场景，还能提供选择 charset 的机会，从而解压某些压缩包时避免文件名乱码。</p><h4 id="USTC-Mirror"><a href="#USTC-Mirror" class="headerlink" title="USTC Mirror"></a><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">USTC Mirror</a></h4><p>在此推荐一下中国科大开源镜像，这份镜像可以使得在国内访问很多开源软件的速度飞起来。</p><p>比如<a href="http://mirrors.ustc.edu.cn/help/pypi.html" target="_blank" rel="noopener">给 pip 设置代理</a>，可以让 pip 下载 Python 扩展包的速度快得飞起。</p><p>再比如使用<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp" target="_blank" rel="noopener">中国科大的 AOSP 镜像</a>，获取 AOSP 项目的源码 (几十 GB 大小) 的速度将要加快很多，如果不使用代理，那么从 <a href="https://source.android.com/setup/build/downloading" target="_blank" rel="noopener">Google 官方同步 AOSP 代码</a>，其难度你懂的。</p><p>再再比如，非常流行的 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，是 macOS 平台上使用命令行管理软件包及它们的依赖关系的工具，好比是 Linux 的包管理系统。此外 Homebrew 使用 cask tap 甚至还可以安装 Sublime text，Chrome 等许多的 GUI 软件，并自动建立软链接链接到 GUI 的软件的可执行文件，比如 Sublime text，使用 Homebrew 安装后，就可以在命令行使用 subl 即可打开 Sublime text 了。扯远了，Homebrew 同样存在在国内下载软件速度慢的问题，而同样，中国科大镜像提供了 <a href="http://mirrors.ustc.edu.cn/help/homebrew-bottles.html" target="_blank" rel="noopener">Homebrew 镜像</a>，能让绝大部分包的下载速度快起来。</p><p>最后，先对 USTC Mirror 的维护者表示感谢。然后，我想说这个镜像的内容非常多，绝大部分我也不了解，也就是还有很多可以深入探索的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;俗话说，工欲善其事必先利其器。好用的开发工具，虽然不会直接改善我们写的代码，但是对于效率的提高和提高舒适度还是很有帮助的。本文意在提供一些不是非常普遍使用，但是对于效率提升可能非常有用的工具。话不多说，开始正文！&lt;/p&gt;
&lt;h4 id=&quot;剪贴板工具-—-Clipy&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>常用的 Bash 命令总结</title>
    <link href="http://tao93.top/2018/09/26/%E5%B8%B8%E7%94%A8%E7%9A%84%20Bash%20%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://tao93.top/2018/09/26/常用的 Bash 命令总结/</id>
    <published>2018-09-26T07:47:46.676Z</published>
    <updated>2018-09-26T07:47:46.677Z</updated>
    
    <content type="html"><![CDATA[<p>这篇记录是我看 <a href="http://linuxcommand.org/tlcl.php" target="_blank" rel="noopener">The Linux Command Line</a> 后为了总结而写的，目的是便于自己随时查阅。The Linux Command Line 是我相当喜欢的一本电子书，它是一本值得一页一页看下去的书。</p><p><strong>cp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅复制目标目录不存在或者存在但是更旧的的项。 </span></span><br><span class="line">cp -u </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 file2 已经存在, file2 的内容会被 file1 的内容重写。如果 file2 不存在，则会创建它。 </span></span><br><span class="line">cp file1 file2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录 dir2 不存在，创建目录 dir2，操作完成后，目录 dir2 中的内容和 dir1 中的一样。如果目录 dir2 存在，则目录 dir1 和其中的内容将会被复制到 dir2 中。 </span></span><br><span class="line">cp -r dir1 dir2</span><br></pre></td></tr></table></figure><p><strong>mv</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅移动目标目录不存在或者存在但是更旧的的项。 </span></span><br><span class="line">mv -u </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录 dir2 不存在，创建目录 dir2，并且移动目录 dir1 的内容到目录 dir2 中，同时删除目录 dir1。如果目录 dir2 存在，移动目录 dir1( 它的内容)到目录 dir2 中。 </span></span><br><span class="line">mv dir1 dir2</span><br></pre></td></tr></table></figure><p><strong>rm</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 警惕不小心写出 rm * .html 这样的命令，这会删除当前目录的所有文件。</span></span><br></pre></td></tr></table></figure><p><strong>命令的4中形式</strong></p><ol><li>executable file, 可以是二进制的，也可以是文本形式的脚本；</li><li>builtins, 即 /bin 下面的 [, echo, kill, pwd, test 和 /usr/bin 下面的 alias, bg, cd, command, false, fc, fg, getopts, hash, jobs, printf, read, true, type, ulimit, umask, unalias, wait, which；</li><li>shell 函数</li><li>alias 定义的别名</li></ol><p><strong>type</strong></p><p>type是一个极其有用的命令，能立马找到当前环境能用的命令是源自哪里，是什么类型的。示例：</p><blockquote><p>➜  ~ type Python3<br>Python3 is /Users/didi/.bin/Python3<br>➜  ~ ls -l /Users/didi/.bin/Python3<br>lrwxr-xr-x  1 didi  staff  22  4 25 10:06 /Users/didi/.bin/Python3 -&gt; /usr/local/bin/python3<br>➜  ~ type [<br>[ is a shell builtin<br>➜  ~ type ls<br>ls is an alias for ls -G</p></blockquote><p><strong>where</strong></p><p>where命令的有用之处是它可以列出所有出现的地方，比如电脑里面有两个 git 可执行文件，那么 where git 可以把它们统统列出来。</p><p><strong>man 手册的章节含义</strong></p><ol><li>用户命令</li><li>程序接口内核系统调用</li><li>库函数程序接口</li><li>特殊文件，比如说设备结点和驱动程序</li><li>文件格式</li><li>游戏娱乐，如屏幕保护程序</li><li>其他方面</li><li>系统管理员命令</li></ol><p><strong>&gt; file_name</strong></p><p>巧妙的使用重定向，可以将文本文件的内容清空，也可以新建一个空文件。</p><p><strong>重定向的常见用法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖型重定向 stdout，可以省略那个 1 </span></span><br><span class="line">ls ~ 1&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加性重定向 stdout，可以省略那个 1 </span></span><br><span class="line">ls ~ 1&gt;&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖型重定向 stderr </span></span><br><span class="line">ls ~ 2&gt; out.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加性重定向 stdout </span></span><br><span class="line">ls ~ 2&gt;&gt; out.txt</span><br></pre></td></tr></table></figure><p><strong>/dev/null</strong></p><p>随意放东西进去的垃圾箱</p><p><strong>花括号展开</strong></p><p>echo Front-{A..D}–Back 将会输出四项内容，即 {A..D} 表示从 A 到 D 一共四个情况。</p><p><strong>将命令执行结果展开</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只需要把命令放在 $() 里面即可，旧版 shell 也使用把命令放在 `` 中间的方式 </span></span><br><span class="line"><span class="built_in">echo</span> $(ls)</span><br></pre></td></tr></table></figure><p><strong>引号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双引号中，参数展开，算术表达式展开，和命令替换仍然有效，比如 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$USER</span> <span class="variable">$((2+2)</span>) <span class="variable">$(cal)</span>"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号中，所有展开都无效</span></span><br></pre></td></tr></table></figure><p><strong>命令行移动光标</strong></p><blockquote><p>ctrl a # 移动到行首</p><p>ctrl e # 移动到行末</p><p>alt &lt;- # 左移一个 word</p><p>alt -&gt; # 右移一个 word</p><p>ctrl u # 剪切整行内容</p><p>ctrl k # 剪切光标后面的内容</p><p>ctrl y # 粘贴</p></blockquote><p><strong>管理进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出终端相关进程</span></span><br><span class="line">ps </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有进程</span></span><br><span class="line">ps x </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有进程的详细信息</span></span><br><span class="line">ps aux </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示从终端启动的后台进程</span></span><br><span class="line"><span class="built_in">jobs</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 让指定序号的从终端启动的进程返回到前台</span></span><br><span class="line"><span class="built_in">fg</span> %JOB_SPEC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 让指定序号的从终端启动的进程返回到后台</span></span><br><span class="line"><span class="built_in">bg</span> %JOB_SPEC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给进程发送信号，最常见的信号是：</span></span><br><span class="line"><span class="built_in">kill</span> -SIG_NUM PID </span><br><span class="line">    1  HUP  挂起</span><br><span class="line">    2  INT  中断，和 ctrl c 的作用一样</span><br><span class="line">    9  KILL 杀死，这个信号并不会发给进程号是 PID 的进程，而是立即强制停止此进程，被杀进程就没有机会保存数据</span><br><span class="line">    15 TERM <span class="built_in">kill</span> 命令的默认信号，终止进程，被中止的进程有机会保存数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇记录是我看 &lt;a href=&quot;http://linuxcommand.org/tlcl.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Linux Command Line&lt;/a&gt; 后为了总结而写的，目的是便于自己随时查阅。The Lin
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://tao93.top/tags/Linux/"/>
    
      <category term="Bash" scheme="http://tao93.top/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>博客系统迁移记录</title>
    <link href="http://tao93.top/2018/09/26/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://tao93.top/2018/09/26/博客系统迁移记录/</id>
    <published>2018-09-26T07:47:46.674Z</published>
    <updated>2018-09-26T07:47:46.675Z</updated>
    
    <content type="html"><![CDATA[<p>此前我用的是 <a href="http://www.zblogcn.com/" target="_blank" rel="noopener">Z-blog 系统</a>，这个系统上手简单，不过仅支持在网页在线编写文章。这种方式弊端是比较死板，如果将来需要把文章移动到别的地方会很麻烦，而如果是用 MarkDown 来写文章就不会有这个麻烦了。本文就详细记录这次博客系统迁移的细节，包含 Linux 系统配置、Nginx 的配置、<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a> 的配置和 deploy 脚本等内容。</p><p>首先是，这次又把 VPS 的 Server 硬盘重置了，每次重置后都需要重新设置配置一遍 Linux 系统（我的 VPS 是 Ubuntu 16.04），所以这次记录一下配置的过程，也就是各种配置命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">adduser liutao <span class="comment"># add user, with root user</span></span><br><span class="line">usermod -aG sudo liutao <span class="comment"># add sudo permission, with root user</span></span><br><span class="line">su - liutao <span class="comment"># switch to user liutao</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update repository info</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure shadowsocks</span></span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">sudo mkdir /etc/shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># create config file</span></span><br><span class="line">sudo vim /etc/shadowsocks/ss.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:22222,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"your pass word"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:1000,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add service configuration info,.</span></span><br><span class="line">sudo vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># start shadowsocks service</span></span><br><span class="line">sudo systemctl start shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># start shadowsocks on startup</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># install linuxbrew</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># install oh my zsh, this dependends on zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line">vim .zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Nginx, MySQL, Php</span></span><br><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.5-full.tar.gz</span><br><span class="line">gunzip lnmp1.5-full.tar.gz</span><br><span class="line">tar xf lnmp1.5-full.tar</span><br><span class="line"><span class="built_in">cd</span> lnmp1.5-full</span><br><span class="line">sudo ./install.sh lnmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># install word-press</span></span><br><span class="line">wget https://wordpress.org/latest.zip</span><br><span class="line">unzip latest.zip -d wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment"># set root to be/home/liutao/wordpress</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">sudo nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后本地浏览器打开 http://tao93.top/ 开始设置 WordPress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create database named wordpress</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">&gt; create database wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在浏览器中填入刚刚的 database 名字，及其他信息</span></span><br><span class="line"><span class="comment"># 在 server 中的 WordPress 根目录中创建 wp-config.php 并填入浏览器页面显示的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 nginx 使用的 config 文件</span></span><br><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了解决一些权限问题，www 是 nginx 配置文件中声明的 web server 的 user name</span></span><br><span class="line"><span class="comment"># 这样就把 group 改为了 www，并且 group 用户都有 write 的权限</span></span><br><span class="line">sudo chgrp -R www &lt;root_dir_of_wordpress&gt;</span><br><span class="line">sudo chmod -R g+w &lt;root_dir_of_wordpress&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外还在 &lt;root_dir_of_wordpress&gt; 中的 wp-config.php 文件中插入了 define('FS_METHOD','direct'); 这样一行，不知道是不是必要的</span></span><br></pre></td></tr></table></figure><p>以上就是最终配置到 WordPress 的过程。之所以配置 WordPress，是因为我查到 WordPress 可以使用 Markdown，另外 WordPress 自带评论功能，插件和主题也非常丰富，所以就先使用 WordPress。结果发现 WordPress 的 Markdown 还需要安装插件才能支持，另外支持也不是很好，比如代码块会把比较长的行转行显示（即不是可以左右滑动），代码行号与高亮都没要。</p><p>所以，我还是痛下决心，换回到 hexo。hexo 比较简单，本地安装 hexo 后，在空目录中执行 hexo init 即可生成一堆相关文件，其中的 public 用来存放从当前 theme 和 markdown 文件生成的 static web 文件；而 source 目录用来存放 markdown 文件。简单使用步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in hexo root directory</span></span><br><span class="line">hexo g <span class="comment"># generate static web files</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment"># start local web server, then browse http://localhost:4000 to preview web pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy files in public to server's directory, therefore updated pages can be browsed at http://tao93.top/</span></span><br></pre></td></tr></table></figure><p>以上就是简单的用法，不过实际上我做了一些额外工作。例如为了避免 markdown 文件意外丢失，我们需要把它们备份到 server 上，server 和 local 同时丢失的可能性极小。另外，markdown 中插入图片时，可以先把图片放在本地，然后 markdown 中指向图片的本地路径，这样生成的 web 文件会把图片拷贝到 public 目录中某处，然后 html 文件引用 public 目录中的 image，这时的引用其实就是一个 url 了。但是我不是这样做的，我是先把要插入的图片拷贝到 Server 的 public 目录某处，这样就会得到一个指向次图片的 url，然后再 markdown 中直接使用这个 url。这样的话，只要 server 的图片库保持稳定，markdown 文件就不用和本地图片库绑定在一起。同样的，server 的图片库也需要备份到 local，以确保安全。下面就开始介绍以上两点。</p><p>首先是本地 source 目录需要备份到 server 上，我的方式是本地 source 目录使用 git 来追踪，然后 server 上简历一个 bare repository source.git，这样本地的每次 commit 都 push 到 server 上的 source.git，就可以作为备份了。相应的本地的 public 目录也要 push 到 server 上的 public.git 这样一个 bare repository，然后在 server 上的 public 中，从 public.git 这个 remote git pull 一下，这样 server 中的 public 就有了最新的 web 文件。</p><p>接下来是图片上传到 server 中，为了方便，我写了一个 Python 脚本，用来把本地图片上传到 server，或者把剪贴板的图片 (便于复制图片的情景) 上传到 server，然后将对应的 url 粘贴到剪贴板，这样的话，只需要执行这个 Python 脚本，就可以上传本地图片或者剪贴板上的图片，并把得到的 url 复制到剪贴板，然后就可以直接粘贴到 markdown 中。以下是这个 upload_pic.py 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab, Image</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># store image files in date format directory path in server</span></span><br><span class="line">date_path = now.strftime(<span class="string">'%Y/%m/%d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use timestamp as image file name in server</span></span><br><span class="line">f_name = str(int(now.timestamp()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># get picture in clipboard</span></span><br><span class="line">    im = ImageGrab.grabclipboard()</span><br><span class="line">    <span class="comment"># check whether it's a picture</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, Image.Image):</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># file name in server</span></span><br><span class="line">        f_name = str(int(datetime.datetime.now().timestamp())) + <span class="string">'.png'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># save in local</span></span><br><span class="line">        im.save(f_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># the url of the image</span></span><br><span class="line">        url = <span class="string">'http://tao93.top/images/'</span> + date_path + <span class="string">'/'</span> + f_name</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># copy the url to clipboard</span></span><br><span class="line">        os.system(<span class="string">"echo '%s' | pbcopy"</span> % url)</span><br><span class="line">        print(<span class="string">'url has been copied'</span>)</span><br><span class="line">        print(<span class="string">'copying...'</span>)</span><br><span class="line">        dest_path = <span class="string">'/home/liutao/hexo_blog/public/images/'</span> + date_path</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># mkdir in server and copy the image</span></span><br><span class="line">        os.system(<span class="string">"ssh liutao@tao93.top 'mkdir -p "</span> + dest_path + <span class="string">"'"</span>)</span><br><span class="line">        os.system(<span class="string">'scp '</span> + f_name + <span class="string">' liutao@tao93.top:'</span> + dest_path)</span><br><span class="line">        print(<span class="string">'copy finished'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># remove local image file</span></span><br><span class="line">        os.remove(f_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'clipboard content is not a image!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(sys.argv[<span class="number">1</span>]):</span><br><span class="line">        <span class="comment"># file name in server</span></span><br><span class="line">        f_name = str(int(datetime.datetime.now().timestamp()))</span><br><span class="line">        dot_loc = sys.argv[<span class="number">1</span>].rfind(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">if</span> dot_loc &gt;= <span class="number">0</span>:</span><br><span class="line">            f_name += sys.argv[<span class="number">1</span>][dot_loc:] <span class="comment"># append the file extension</span></span><br><span class="line">        </span><br><span class="line">        url = <span class="string">'http://tao93.top/images/'</span> + date_path + <span class="string">'/'</span> + f_name</span><br><span class="line">        os.system(<span class="string">"echo '%s' | pbcopy"</span> % url)</span><br><span class="line">        print(<span class="string">'url has been copied'</span>)</span><br><span class="line">        print(<span class="string">'copying...'</span>)</span><br><span class="line">        dest_path = <span class="string">'/home/liutao/hexo_blog/public/images/'</span> + date_path</span><br><span class="line">        os.system(<span class="string">"ssh liutao@tao93.top 'mkdir -p "</span> + dest_path + <span class="string">"'"</span>)</span><br><span class="line">        os.system(<span class="string">'scp '</span> + sys.argv[<span class="number">1</span>] + <span class="string">' liutao@tao93.top:'</span> + dest_path + <span class="string">'/'</span> + f_name)</span><br><span class="line">        print(<span class="string">'copy finished'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(sys.argv[<span class="number">1</span>] + <span class="string">' is not a file!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'too much arguments'</span>)</span><br></pre></td></tr></table></figure><p>为了简化步骤，我写了一个 deploy.sh 脚本放在本地 hexo blog 根目录中，这样只需要在 source 目录中编辑 markdown 文件，然后 commit，再调用 deploy.sh 脚本即可。此脚本把其他要做的事情都做了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># into source </span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure it's commited in source directory</span></span><br><span class="line">status=$(git status -s)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$status</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># git push in source</span></span><br><span class="line">    git push</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'not commited in source directory!'</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># back into parent directory</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate static web files</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># git push in local public directory</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update web files'</span></span><br><span class="line">git push</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull in server's public directory</span></span><br><span class="line">ssh liutao@tao93.top <span class="string">'cd /home/liutao/hexo_blog/public; git pull'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git commit in server's images directory</span></span><br><span class="line">ssh liutao@tao93.top <span class="string">'cd /home/liutao/hexo_blog/public/images; git add .; git commit -m "add images"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull in local's images directory</span></span><br><span class="line"><span class="built_in">cd</span> images</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'========='</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Finished!'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'========='</span></span><br></pre></td></tr></table></figure><p>这样上面的脚本就把生成 web 文件，拷贝 public 中的 web 文件拷贝到 server，把 server 中的 image 目录中的信息更新到 local 的 images 目录这样几个事情。</p><p>附：</p><p>如果要本地 git repo 没有 commit，remote repo 有 commit，现在需要本地的 master 分支 track remote 的 master 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先添加 origin，设置好 url</span></span><br><span class="line">git remote add origin liutao@tao93.top:/home/liutao/hexo_blog/public/images/.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后 fetch 一下 远程的状态</span></span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果 git pull --set-upstream-to 是不行的，会说本地 master 分支不存在，而需要下面这样才行</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此前我用的是 &lt;a href=&quot;http://www.zblogcn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Z-blog 系统&lt;/a&gt;，这个系统上手简单，不过仅支持在网页在线编写文章。这种方式弊端是比较死板，如果将来需要把文章移动到别的地
      
    
    </summary>
    
    
      <category term="Other" scheme="http://tao93.top/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>修车小能手上线</title>
    <link href="http://tao93.top/2018/09/26/%E4%BF%AE%E8%BD%A6%E5%B0%8F%E8%83%BD%E6%89%8B%E4%B8%8A%E7%BA%BF/"/>
    <id>http://tao93.top/2018/09/26/修车小能手上线/</id>
    <published>2018-09-26T07:47:46.673Z</published>
    <updated>2018-09-26T07:47:46.674Z</updated>
    
    <content type="html"><![CDATA[<p>修车技术也是技术，所以关于修车的博客也是技术博客啦 😝</p><p>事情要从两个月前说起，当时在京东买了一辆粉色的比德文电动车给女朋友上下班用。这辆电动车比较便宜，当时我们也不怎么注意预防电动车被雨淋，因为潜意识觉得经常看到别人的电动车被雨淋，所以应该没事。事情坏就坏在这辆电动车防水性真不好，所以几场大雨之后，还没到一个月，电动车就坏了，拧车把上的旋钮车子没反应，也就是电机不转了。</p><p>本着应该有专业人员 (后面事实证明修车的真不是个好东西) 修理的态度，大热天我费尽力气把电动车推到了修车铺。等了半天修车的才姗姗来迟的过来了。然后修车的打开电动车后盖瞧了瞧，说是控制器坏了，需要更换，他店里的控制器 80 块钱一个。这时候我和女朋友就和厂家联系，厂家称要么给我们50块钱，要么我们把旧控制器寄回去然后他们寄一个新的回来。我们心想，快递寄控制器一来一回要好多天，这些天我们的车子就要这么晾在离家几公里的地方，这怎么能忍！所以我们和厂家撕逼，最终厂家答应给我们 80 块，于是我们就在店里换了个控制器。坑爹的修车的，帮我们换控制器时慢慢腾腾，中途还停下来帮两个女的配钥匙！当时真的是很气愤，换个控制器换了接近两小时，期间修车的还不停用一种傲慢的态度数落我们不应该再网上图便宜买了个质量差的电动车，他店里卖的车怎么怎么好怎么怎么地。而当女朋友对修车的说：”你的意思是这个电动车各方面质量很差吗？” 修车的又开始含糊其辞。</p><p><img src="http://tao93.top/images/2018/09/01/1535789639.png" alt=""></p><p>换完之后，本来想这事就算结束了，该去找厂家要 80 块钱了。谁知道，事情才刚刚开始。当天，女朋友就说车子有问题，她把车子从地下车库推出来时，上一个很陡的坡时，车子动力不足上不去，上到一般就猛地往回退！最后还是一个男生好心把她推上来了。然后隔了两天，女朋友又去修车铺那里，询问为什么动力不行了。修车的骑着电动车走了一圈，给了这么句话「电机坏了」。本来我对修车的就没好印象，所以听到这里我是不信的，控制器坏了我信，电机也同时坏这也太扯淡了。所以我推断是控制器的适配性 (或者说和电动车的兼容性) 比较差，所以才会动力不足。不就我还发现别的问题，当拧着车把旋钮再捏刹车闸时，电机居然还在发力，这个最基本的安全机制都没了。此外，智能控制器在启动时噪音比较大。</p><p>抱着对控制器适配性的质疑，我找到了杭州一家比德文车店，从车店那里我算搞清楚了缘由。原来，修车的给我换的是所谓智能控制器，也就是基本啥电动车都能用，但是并不能对每种电动车都有最好的适配性，自然也远不如原装控制器。而原装控制器只能厂家寄过来，这个比德文车店也没有。另外，从厂家拿到原装控制器后，来这个店里安装的话，他们需要收 三四十块钱。</p><p>之后我就像厂家联系，表示不要 80 块钱了，我把坏了的原装控制器寄回去，厂家给我寄一个新的控制器。不得不吐槽，厂家动作非常慢，总共两三个星期我才拿到新的原装控制器。我才不像跑到比德文车店出几十块钱让他们帮我安装，所以接下来，我直接自己动手安装，其实安装很简单，就是把那些借口对应插上就好了。安装好后，我试着骑了骑，没了噪音，启动更快，后面两天女朋友也表示上坡时不会动力不足了。</p><p>到此好像已经结束了。不过如果就这样结束了，我还能称作修车小能手么！</p><p>才两三天，就出现拧旋钮后车轮 (电机) 不转的问题，但是又会忽然好了。又一次女朋友去上班骑到半路，忽然车轮不转了，把她吓一跳，后面的日子她就再也不敢骑了，她说还是要去修车店修一下才行。这样过了一个多星期，到了今天这个周六。我终于有时间去处理一下这件事了。</p><p>我有两个选择，一个是弄到修车店去，另一个是自己动手，我选择了后者，原因是间歇性的出问题，说明无法稳定复现，冉义弄到修车店，修车的搞半天说没毛病，那不就尴尬了嘛。今天我还特意骑着电动车绕小区一圈，问题依然没复现，这就很麻烦了。不过，我早就怀疑，这种间歇性的电机不转应该是接触不良的问题。所以今天我打算试试用排除法来看能否验证我的猜测。我打开后盖：</p><p><img src="http://tao93.top/images/2018/09/01/1535789679.png" alt=""></p><p>如上图所示，银白色铁盒子就是新的原装控制器，箭头所指的就是它连接到电动车的一些接口。都是那种带倒钩、直接插上就可以的接口。</p><p>修车也要讲安全，毕竟电池的电压有几十伏，可能会触电，所以我是这样来判断接口是否有问题的：断开电池和电动车的连接，拔开一个接口，连接上电池，最后转动旋钮看电机是否旋转，是的话说明这个接口压根不影响电机是否转动，否的话说明这个接口关键接口之一，会影响电机的旋转。</p><p>用上面的方法挨个接口尝试，我找到3个关键接口。如果问题真的是接触不良的话，很可能就是这 3 个接口之一接触不良，所以接下来我把这 3 个接口进行下一轮测试。测试方法是，把接口往外拔一点 (但是依然在倒钩锁定范围内)，这样就可以模拟现实中接口松动的情况了。如下图所示，左边是接口插很紧，图中箭头指的就是倒钩；右边是接口往外拔一点点，可以看到倒钩和一个凸起物之间已经没有间隙了。</p><p><img src="http://tao93.top/images/2018/09/01/1535789719.png" alt=""></p><p>通过模拟接口松动的情况，然后测试是否会导致电机不转，很快我就找到了一个接口，这个接口往外拔一点点，电机就无法转，往里插紧一点，电机就能转动了。</p><p>发现了问题所在，接下来就很好办了，用东西把这个接口固定紧就好了，让它一直保持插紧的状态。最好的材料应该细铁丝，用细铁丝扎紧然后用钳子拧紧就好。可是我明白细铁丝，所以我用绳子把它绑紧来，也就是下面图中这样：</p><p><img src="http://tao93.top/images/2018/09/01/1535789742.png" alt=""></p><p>为什么我前面说细铁丝更好呢，因为细铁丝拧紧后不会逆转变松，但是绳子是会的。用绳子帮硬的东西，总是会有那么写松动，无法彻底绑紧。所以在绑完后，我还用一根牙签挑过绳子，然后转两圈，这样绳子就会被绷得很紧了，就是下面这样的：</p><p><img src="http://tao93.top/images/2018/09/01/1535789781.png" alt=""></p><p>上图中牙签顺时针旋转越多，绳子就绷得越紧。</p><p>OK，大功告成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修车技术也是技术，所以关于修车的博客也是技术博客啦 😝&lt;/p&gt;
&lt;p&gt;事情要从两个月前说起，当时在京东买了一辆粉色的比德文电动车给女朋友上下班用。这辆电动车比较便宜，当时我们也不怎么注意预防电动车被雨淋，因为潜意识觉得经常看到别人的电动车被雨淋，所以应该没事。事情坏就坏在
      
    
    </summary>
    
    
      <category term="Other" scheme="http://tao93.top/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>从阿里云服务器到个人博客</title>
    <link href="http://tao93.top/2018/09/26/%E4%BB%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://tao93.top/2018/09/26/从阿里云服务器到个人博客/</id>
    <published>2018-09-26T07:47:46.671Z</published>
    <updated>2018-09-26T07:47:46.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>(友情提示，想看步骤的话，下面的前言可以跳过不看)</p><p>为什么我现在要买阿里云的 VPS (Virtual Private Server) 搞博客系统呢？我也说不上为什么，不过可以讲一下事情的经过。</p><p>2016年刚开始工作那会儿，从<a href="http://ewind.us/" target="_blank" rel="noopener">王译锋</a>那里知道了租 VPS、搭建某 socks、nginx 驱动 hexo 博客这样一套东西。当时觉得很新鲜，立马也买了搬瓦工的 VPS，然后一同瞎搞，算是搞成了一个 hexo 静态博客系统了，不过有点尴尬的小插曲，我把 hexo 安装在了 VPS 上面 ，然后把 Markdown 文件推到 VPS 上面，然后再 VPS 再用 hexo 生成静态页面的文件。。。 实际上更合适的是把 hexo 安装在本地，然后本地生成的页面文件推到 nginx 的 web root 目录中去。</p><p>后来嘛，搬瓦工，Vultr，Linode 阿里云我都试了个遍，发现除了阿里云意外，虽然都不贵，但是网速稳定性真的很捉急，有时候在终端 ssh 到服务器上面时，输入命令真的是一卡一卡的，这样的网速带来的科学上网体验只能用「能用」两个字来形容。直觉告诉我，可能部署在香港的 VPS 网速会比较快，因为香港离大陆近。我就开始找香港的 VPS 了，一番找呀找，中间也交了些学费，最后找到了一个叫枫叶主机的，速度挺不错，轻松达到 500 KB/S，就是贵了点，我就和某同事一起平摊费用了。这个枫叶主机我一口气买了一年的，不过中间依然因为某些原因而出现网速不稳定的情况。等到枫叶主机过期后，因为穷，我忽然想试试老早就听别人推荐的一个叫云梯的 VPN。这个云梯我曾经使用过，但是的速度确实还不错，哪想到我一口气买了一年的 VPN 后，发现用不了，整个云梯团队都跑路了！！！就留下个网站还在运行，不断的吸钱，真他们坑！吃了大亏的我，开始蹭大学同学的 VPS 的某 socks 服务，挺长时间都没再买过 VPS了，期间，我把静态博客放到了 github.io 页面。然而，自始至终，我其实没写几篇博客，真为自己的懒惰感到惭愧。</p><p>直到最近，再次看到珂神和王译锋的博客、掘金搞得风生水起，感叹自己没有能拿的出手的东西，所以就买阿里云 VPS → 注册域名 → 搭博客系统了，期待自己能多写一些有价值的东西，加油！</p><h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><h4 id="租阿里云-VPS"><a href="#租阿里云-VPS" class="headerlink" title="租阿里云 VPS"></a>租阿里云 VPS</h4><p>在阿里云官网，这个叫做「云服务器 ECS」，这个其实很简单了，花几百块钱就能租一年，我是 290 几块钱租的 1GB 内存、1Mbps 带宽、40GB 非 SSD 的香港 VPS。其实，对我们而言最敏感的性能指标就是内存和带宽了，硬盘一般是不会用光的，CPU 性能也没多大影响。这里解释一下，为什么选阿里云。有鉴于前面试用了一大波 VPS 服务，我发现只有阿里云算是最稳定的，虽然带宽只有 1Mbps (指从我们个人电脑访问 VPS 的网速，而在 VPS 上面安软件时，下载软件包的速度其实是很快的，因为用的是阿里云的镜像，所以相当于内网传输数据)，但是胜在稳，终端输入命令基本不会有任何延迟。</p><p>租完 VPS，ssh 连接到它，然后就是搭建某 socks 服务了，网上资料非常多。需要注意的是，阿里云服务器需要配置安全组规则的，不然无法提供服务。假设某 socks 使用 23333 号端口来提供服务，那么需要下图那样配置一条入方向的规则：</p><p><img src="http://tao93.top/images/2018/09/01/1535789407.png" alt=""></p><p>入方向表示数据流向 VPS 的，协议类型选 TCP，对绝大部分服务来说，都是 TCP 协议，端口范围就是 VPS 上面提供的服务所使用的端口了。如果没有这个配置，那么我们个人电脑将无法向 23333 号端口发起请求。另外出方向默认全开了，所以不需配置。</p><h4 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h4><p>我挑了个很便宜的，36块钱 3 年，域名就是 tao93.top，也算是和我的名字和出生年份有些关联吧。</p><h4 id="域名绑定-IP"><a href="#域名绑定-IP" class="headerlink" title="域名绑定 IP"></a>域名绑定 IP</h4><p>这个还是要提一下的。在阿里云注册的域名，需要实名认证 (上传单面身份证照片) 才行，一开始我不知道，傻乎乎的总等，一边等，一边 ping 和 nslook 我的域名，好在实名认证很快，基本上提交认证后，1小时内就有人处理。我认证时有点搞笑，我传了一张 jpeg 后缀的图片，然后审核者回复说，需要 jpg 或 bmp 后缀的图片。我有点吃鲸，然后把同一张图片后缀改成了 jpg，上传，然后认证就成功了。。。认证结束后，就可以设置解析规则了：</p><p><img src="http://tao93.top/images/2018/09/01/1535789454.png" alt=""></p><p>只需要上面红框中的一条规则就可以把 tao93.top 解析了，mail 的那条规则，我现在还用不上。添加规则的时候，如果拿不准，可以在下图中只在记录值填公网 IP 地址即可：</p><p><img src="http://tao93.top/images/2018/09/01/1535789477.png" alt=""></p><p>我当时也是有点傻，觉得香港的 VPS 算是境外，就在解析线路选了境外，然后傻等了好久，后面换成默认后，基本几分钟就可以解析了。</p><h4 id="搭博客系统"><a href="#搭博客系统" class="headerlink" title="搭博客系统"></a>搭博客系统</h4><p>先说下为什么我没用 hexo 静态博客，因为静态博客无法评论，我觉得评论还是挺有必要的，虽然可以嵌入第三方评论服务，但是这种需要评论者用社交账号登录，麻烦，另外评论的数据全在别人手里，我觉得不好。所以我就要自己搭一个有后台的博客了。珂神使用的 zblog 是一个，国产的，看起来不那么华丽；WordPress 是另一个。我两个都装了，先装了 zblog，觉得有点点简单粗糙，然后就删的一干二净，装了 WordPress，然后发现 WordPress 复杂的让我有点迷失，我就想简单的写写东西，不想要那么多东西。然后我就在保留 WordPress 的基础上，又装了 zblog。</p><p>zblog 有个 php 版本，和 WordPress 的技术组合一模一样，就是 php + 数据库 + nginx 等 web server，其中 zblog 的数据库还可以用 sqlite，虽然我没成功过。我第一次装 zblog 时，手动安装了 MySQL，php，nginx，然后摸索着各种配置，搞了蛮久才搞定的。而 WordPress 的安装就很简单了，网上有 LNMP (Linux Nginx MySQL PHP) 组合包，等于一键就能装好环境，剩下的就是搞个 WordPress，并且替换掉 LNMP 原有的 web root 目录，就好了。</p><p>所以，无论 WordPress 还是 zblog，最简单的方式是，先装 LNMP 环境，然后就快了。需要记住一点的是，LNMP 环境会新建一个 www:www 用户(组) 来用于驱动 web 服务。务必需要让此 www 用户对于 web root 有 rwx 权限。比如 LNMP 默认的 web root 是 /home/wwwroot/default，那么一句 sudo chown -R www:www /home/wwwroot/default 即可。</p><h4 id="直接安装-z-blog-的过程"><a href="#直接安装-z-blog-的过程" class="headerlink" title="直接安装 z_blog 的过程"></a>直接安装 z_blog 的过程</h4><p>此过程配置比较麻烦，所以只是记录一下，不建议使用此方式。</p><p>装 nginx，设置开机自启，运行起来，然后别急着进浏览器验证，先到阿里云网站增加一下 80 号端口的安全规则，然后验证 nginx 是否可用。</p><p>建议更改一下 nginx 配置文件中的 root，即更改 web root 的位置，比如改为自己 home 中的某个目录，这样的话 chown web root 时不会有烦人的警告。</p><p>注意，nginx 需要重新加载配置文件，才能让配置文件的修改生效，方法是 sudo nginx -s reload 即可。</p><p>安装 Mysql，记得别忘记了 root 密码。</p><p>安装 Php，然后就是在 Php.ini 配置文件中，把各种 extension=php_mysql.dll 之类的语句解除注释，意思是 php 需要和 MySQL 数据库连接。但是这样的配置还不够，还需要 sudo apt-get install php7.0-mysql</p><p>这时候，可以下载 zblog 的压缩包，解压到 web root 中，然后浏览器打开 <a href="http://tao93.top，就可以开始安装" target="_blank" rel="noopener">http://tao93.top，就可以开始安装</a> zblog 了，安装好后就是各种 GUI 配置方式了。再次强调一下，需要 nginx 对应的 Linux 用户对于 web root 目录递归的有 rwx 权限。我第一次装 zblog 就是没设置权限，然后在后台首页中，「清空缓存并重新编译模板」一直转圈圈。</p><h4 id="配置主题，样式自定义，然后开始写博客。"><a href="#配置主题，样式自定义，然后开始写博客。" class="headerlink" title="配置主题，样式自定义，然后开始写博客。"></a>配置主题，样式自定义，然后开始写博客。</h4><p>略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;(友情提示，想看步骤的话，下面的前言可以跳过不看)&lt;/p&gt;
&lt;p&gt;为什么我现在要买阿里云的 VPS (Virtual Private
      
    
    </summary>
    
    
      <category term="VPS" scheme="http://tao93.top/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起</title>
    <link href="http://tao93.top/2018/09/26/%E4%BB%8E%20Android%20%E4%B8%AD%20Message%20%E7%9A%84%20obj%20%E6%97%A0%E6%B3%95%E8%B7%A8%E8%BF%9B%E7%A8%8B%E4%BC%A0%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%20Parcelable%20%E8%AF%B4%E8%B5%B7/"/>
    <id>http://tao93.top/2018/09/26/从 Android 中 Message 的 obj 无法跨进程传送自定义 Parcelable 说起/</id>
    <published>2018-09-26T07:47:46.669Z</published>
    <updated>2018-09-26T07:47:46.670Z</updated>
    
    <content type="html"><![CDATA[<p>今天温习《Android 开发艺术探索》一书时，看到类似下面这么一句话：「使用 Messenger 将 Message 对象跨进程传输时，obj 属性无法传输自定义的 Parcelable，而只能传输 framework 已有的 Parcelable，比如 Bitmap 等」。然后也翻了源码注释，注释也是这么说的：Froyo 之后，才能用 obj 传输 framework 的 Parcelable，且 obj 不能为 null。下面是注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An arbitrary object to send to the recipient.  When using</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Messenger&#125; to send the message across processes this can only</span></span><br><span class="line"><span class="comment"> * be non-null if it contains a Parcelable of a framework class (not one</span></span><br><span class="line"><span class="comment"> * implemented by the application).   For other data transfer use</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #setData&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that Parcelable objects here are not supported prior to</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#FROYO&#125; release.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object obj;</span><br></pre></td></tr></table></figure><p>当然，Message 还有 setData(Bundle b) 方法可用，而这个方法中是可以放入自定义的 Parcelable，不过此处需要埋下伏笔。</p><p>下面我们继续说 obj 为什么不能传自定义 Parcelable。理论上说，只有能加载到自定义类，那么就应该能反序列化出自定义类的对象。带着这个想法，我浏览了 Message 的 writeToParcel 和 readFromParcel 两个方法。发现了玄机就是下面的 readFromParcel 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">    what = source.readInt();</span><br><span class="line">    arg1 = source.readInt();</span><br><span class="line">    arg2 = source.readInt();</span><br><span class="line">    <span class="keyword">if</span> (source.readInt() != <span class="number">0</span>) &#123;</span><br><span class="line">        obj = source.readParcelable(getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    when = source.readLong();</span><br><span class="line">    data = source.readBundle();</span><br><span class="line">    replyTo = Messenger.readMessengerOrNullFromParcel(source);</span><br><span class="line">    sendingUid = source.readInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用 getClass().getClassLoader 来反序列化 obj 所要引用的对象，如果这个 ClassLoader 无法找到自定义类，那么问题肯定就是出在这里了。</p><p>下面我就开始一步一步验证。首先建立一个项目，项目中添加一个自定义的 Parcelable 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mId;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        mId = in.readInt();</span><br><span class="line">        mName = in.readString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        mId = id;</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后项目中开启两个进程，分别称为 client 进程和 server 进程好了。然后 client 进程的 activity 中绑定 server 进程中的 server，绑定后，client 进程使用 Messenger 向 server 进程发送一个 Message 对象，此 Message 对象的 obj 引用一个 Book 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ServiceConnection mMsgConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        mMessenger = <span class="keyword">new</span> Messenger(service);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Book book = <span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"name"</span>);</span><br><span class="line">            mMessenger.send(Message.obtain(<span class="keyword">null</span>, <span class="number">101</span>, book));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我在 Message 类的 readFromParcel 方法中打上断点，当代码执行到断点处时，先验证 getClass().getClassLoader() 无法加载到自定义的 Book 类：</p><p><img src="http://tao93.top/images/2018/09/01/1535789126.png" alt=""></p><p>然后验证主线程的 Thread.getContextClassLoader 可以加载到 Book 类：</p><p><img src="http://tao93.top/images/2018/09/01/1535789156.png" alt=""></p><p>最后验证使用可以加载到 Book 类的 ClassLoader 的话，是可以成功反序列化得到 Book 对象的：</p><p><img src="http://tao93.top/images/2018/09/01/1535789190.png" alt=""></p><p>插一句，这个 readFromParcel 不是运行在主线程，而是运行在 server 进程的 Binder 线程池中的。线程池中的线程的 getContextClassLoader() 结果是 null。</p><p>OK，上面的测试准确的验证了我的想法，现在回到前面说的 Message 的 setData(Bundle b) 方法的伏笔。显然这里的 Bundle 如果要跨进程传输自定义 Parcelable，我们也需要确定 Bundle 在反序列化时不会重蹈 Message.obj 的覆辙。实际上，Bundle 自己做不到这点，还需要我们帮它一把忙，那就是在 server 进程中，从 Message 拿到 Bundle 后再给 Bundle 设置一个 ClassLoader 即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">101</span>:</span><br><span class="line">                Bundle b = msg.getData();</span><br><span class="line">                b.setClassLoader(Thread.currentThread().getContextClassLoader());</span><br><span class="line">                Book book = b.getParcelable(<span class="string">"book"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，上面de  handleMessage 方法是在主线程，所以我直接使用 Thread.currentThread().getContextClassLoader() 就可以。</p><p>到此，我得出一个结论，那就是我的对于 Java 的 ClassLoader 一无所知，惭愧惭愧，还有很长的路要走。所以，后续我会加强这方面的学习，然后可能会继续加长这篇文章，毕竟这篇的标题是「从 XXX 说起」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天温习《Android 开发艺术探索》一书时，看到类似下面这么一句话：「使用 Messenger 将 Message 对象跨进程传输时，obj 属性无法传输自定义的 Parcelable，而只能传输 framework 已有的 Parcelable，比如 Bitmap 等
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>The Linux Command Line digest</title>
    <link href="http://tao93.top/2018/09/26/The%20Linux%20Command%20Line%20digest/"/>
    <id>http://tao93.top/2018/09/26/The Linux Command Line digest/</id>
    <published>2018-09-26T07:47:46.656Z</published>
    <updated>2018-09-26T07:47:46.669Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读 <a href="http://linuxcommand.org/tlcl.php" target="_blank" rel="noopener">The Linux Command Line</a> 后写成的摘要，用于自己需要用到时回忆和参考。</p><h2 id="Learning-The-Shell"><a href="#Learning-The-Shell" class="headerlink" title="Learning The Shell"></a>Learning The Shell</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是阅读 &lt;a href=&quot;http://linuxcommand.org/tlcl.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Linux Command Line&lt;/a&gt; 后写成的摘要，用于自己需要用到时回忆和参考。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://tao93.top/tags/Shell/"/>
    
      <category term="Linux" scheme="http://tao93.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>targetSdkVersion 杂谈</title>
    <link href="http://tao93.top/2018/09/26/targetSdkVersion%20%E6%9D%82/"/>
    <id>http://tao93.top/2018/09/26/targetSdkVersion 杂/</id>
    <published>2018-09-26T07:47:46.655Z</published>
    <updated>2018-09-26T07:47:46.656Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写新的博客了，原因是这一个多月以来都没想到什么合适的主题，今天就来杂谈一下 targetSdkVersion 相关的东西吧。</p><p>在我工作的第一年里，其实我并不知道 targetSdkVersion 有什么含义，查资料，看到的是类似于「代表应用针对某个 api level 完成适配了」这样的描述，这样的描述其实让我摸不着头脑。后来，我把一个小应用项目的 targetSdkVersion 升高到 api 27，这个过程才让我对 targetSdkVersion 理解比较到位了。而这时候，我发现 targetSdkVersion 的的确确如我先前查到的资料所言，表示针对某个 api level 完成适配了，这个信息是会传递给 android 系统的，android 系统依据这一信息来对应用做区别对待。</p><p>首先，需要明确 Android 系统在大版本更新时，总会加入一些新的 feature，而这些新 feature 可能会让老的应用无法完美兼容。典型的例子是 api 23 新增的运行时动态申请权限机制。在 api 23 以上的 android 系统中，系统期待代码先申请权限 (或者检查权限是已有的) 后才运行需要权限的代码 (例如拍照)。但是老应用的代码，则是只需要在 manifest 文件中申请拍照权限，就可以直接执行拍照的代码。所以，targetSdkVersion 的作用就是，如果 targetSdkVersion 大于等于 23，那么代码必须按新机制来 (即先申请权限，然后才能执行需要权限的代码)，否则，android 系统就认为这是个没有针对 api 23 进行适配的老应用 (比如可能是一个 2012 年就停止更新的应用）。对这种老应用，android 系统需要兼容，兼容的方式就是，这种应用一经安装，就自动获得了所有 manifest 中申明的权限，这样它就能在新系统中正常运行。</p><p>在新系统 (api 23 及以上) 中，对于上述的老应用，安装时会列出所有权限，告诉用户这个应用一经安装就有了下面的权限 (如同老系统安装所有应用时一样)。这就是系统的兼容机制。新系统中安装的这样的老应用后，我们在应用详情中可以看到它自动有了所有权限，可是新系统是可以手动关闭某个应用的权限的，如果我们关闭这个老应用的某个权限，会怎么样呢？如下图所示：</p><p><img src="http://tao93.top/images/2018/09/03/1535985225.png" alt=""></p><p>系统会提示用户，关掉权限的话应用可能无法正常运转。这是对的，因为假设老应用中有直接执行拍照逻辑的代码，拍照权限现在被用户手动关闭，那么执行到这样的代码时就会崩溃 (without permission)！</p><p>问题是，许多应用明明一直在更新，但是为了尽量获取到各种权限，会故意将 targetSdkVersion 停留在 22 及以下，这样用户一经安装，这样的应用就自动有了它想要的任何权限，例如 Android 版手机 QQ 现在的 targetSdkVersion 依然是 17：</p><p><img src="http://tao93.top/images/2018/09/03/1535985675.png" alt=""></p><p>对于这样的比较无赖的应用，其实可以放心把不想授予的权限关闭掉，它是不会崩溃的，因为其代码中其实已经做了权限检查，毕竟它一直在更新和维护。另外，对于这种现象，Google 也有措施，今年谷歌声明了对在 Google Play 更新的应用和上架的新应用都在今年必须将 targetSdkVersion 升至 27 (步子有点大)。虽然 Google Play 对国内还有点鞭长莫及，不过这一倡导应该还是会让许多大厂的应用更快的提高 targetSdkVersion。</p><p>另外，假如用户本来安装了 targetSdkVersion 为 22 的老应用，且老应用有所有想要的权限，此时如果更新到 targetSdkVersion 为 23 的新版本应用，那么新应用将「继承」所有的权限。反过来，新版本的应用的 targetSdkVersion 是不能比已安装的老版本应用还更低的，因为这不光兼容起来很麻烦，而且于情于理都不应该。 </p><p>动态申请权限大概算是最典型的一个无法完美兼容的 feature 了，除此之外，还有 api 26 引入的 adaptive icon 这个 feature。adaptive icon 使得应用可以根据 launcher 的偏好，显示圆形、圆角方形、正方形等各种形状的图标。许多老应用是直接自己裁剪一个圆角方形的图标，这显然无法完美满足 adaptive icon，所以是不完美兼容。targetSdkVersion 为 26 及以上的应用，应该且需要将 launcher icon 分为 foreground 和 background 两层，foreground 是图标中心的若干元素，比如<a href="https://www.coolapk.com/apk/me.piebridge.brevent" target="_blank" rel="noopener">黑阈</a> 的 launcher icon 的 foreground 是下面这样一张图片：</p><p><img src="http://tao93.top/images/2018/09/03/1535986448.png" alt=""></p><p>这个图片绝大部分都是透明的，只有那 3 条弧线是灰白色的。这样一个 foreground 作为黑阈应用图标的中心元素。而 background 则是 #FF353535 这样一个纯色。事实上，黑阈的在新系统的图标是如下所示的 xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">adaptive-icon</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">background</span> <span class="attr">android:drawable</span>=<span class="string">"@color/ic_brevent_background"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreground</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/ic_brevent_foreground"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">adaptive-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样一个文件声明了 foreground 和 background。当时黑阈也是可能在 api 25 及以下的 android 系统运行的，这样的系统没有 adaptive icon 这个 feature，所以，当应用的 minSdkVersion 不到 26 时，应用中还需要为老系统准备图标资源。其实做法就是上述 xml 文件命名为 ic_launcher.xml 之类的名字，置于 drawable-anydpi-v26 这样的资源目录中，而其他用于老系统的图标资源 ic_launcher.png 文件置于 drawable-xdpi 等资源目录中，即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没有写新的博客了，原因是这一个多月以来都没想到什么合适的主题，今天就来杂谈一下 targetSdkVersion 相关的东西吧。&lt;/p&gt;
&lt;p&gt;在我工作的第一年里，其实我并不知道 targetSdkVersion 有什么含义，查资料，看到的是类似于「代表应用针对某个 a
      
    
    </summary>
    
    
      <category term="Android" scheme="http://tao93.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python 也能玩跳一跳小游戏</title>
    <link href="http://tao93.top/2018/09/26/Python%20%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%B7%B3%E4%B8%80%E8%B7%B3%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://tao93.top/2018/09/26/Python 也能玩跳一跳小游戏/</id>
    <published>2018-09-26T07:47:46.654Z</published>
    <updated>2018-09-26T07:47:46.654Z</updated>
    
    <content type="html"><![CDATA[<p>2017年12月微信发布的跳一跳小游戏，简单却又考验人，借着腾讯一贯的好友排名机制对用户的刺激，几乎是瞬间就火起来了。手残的我，玩这个游戏最多也只有几十分。看着这款小游戏，极其简单的操作 (长按就够了)、极其简单的背景 (几乎是纯色，没有任何背景装饰物)、极其简单的元素 (长方体、圆柱体等)，让我觉得应该可以用一个脚本来自动化玩这个游戏，说干就干。</p><p>对于 Android 设备，需要解决的问题其实只有：模拟长按事件、截图并获取图片、分析图片像素，分析得到每一步需要跳动的距离。下面一样一样来看。</p><p>模拟长按事件，我首先想到了 adb，查了一下，找到了 adb shell input swipe x y time 这样一条命令，swipe 本来是用来做滑动操作的，但是这里只需要长按，所以只提供了一对坐标，最后一个参数 time 表示长按的时间，OK。</p><p>截图并获取图片。获取图片好办，adb pull 一下就好了。截图的话，我也是想到了 adb，查了一下，找到了 adb shell /system/bin/screencap -p /sdcard/screenshot.png 这样的命令，用于截图并放到 sdcard 中的某个位置。</p><p>分析图片像素这一步，就仅仅剩下算法的问题啦，毕竟前面已经拿到了截图了。我是用 Python 的 PIL 图片处理库来做的。我们先来看一张跳一跳的截图：</p><p><img src="http://tao93.top/images/2018/09/01/1535787465.png" alt=""></p><p>首先可以明确一个问题，其实我们不需要求两个落点之间的距离，而只要求上图中两条红色竖线之间的距离就好了，原因是不管往左上跳，还是往有上跳，这两种跳法左右对称，所以每一次跳动的距离，其实正比于两个底座的中心的 x 坐标的距离，也就是上图两条竖直红线的距离。</p><p>假设第一条红色竖线为跳之前位置，第二条竖线为下一个底座中心线。第一条竖线的 x 坐标，可以通过从上到下从左到右扫描图片每一个像素，直到找到了颜色和跳动的棋子颜色相同的颜色 (一种比较深的紫色)。然后就可以找到第一条红线的 x 坐标了。第二条竖线，可以在首次扫描到和背景颜色不一致的颜色时，此时应该就是下一个底座的最靠上的像素，并且由于底座要么是圆柱形要么是长方体，所以这个像素也就是左右方向上是居中的，也就是我们要找的第 2 条竖线的位置。</p><p>最后通过测试和调校，可以找到长按的时长和两条红色竖线距离的比值。</p><p>到此为止，思路都理清了，接下来就是写代码加细节优化了。代码中最外层是个循环，循环的每一步都是这样几步：截图、分析图片确定长按的时长、模拟长按、等待几秒等跳跃完成以免下一次循环过早开始截取到中间态的图片。</p><p>代码如下所示，下面是一个按照 1080P 屏幕写的脚本，还是我去年写的，也不知道是否还适用于现在的跳一跳，我现在也不想玩跳一跳了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_ball_color(r, g, b):</span><br><span class="line">    <span class="comment"># 判断是否是棋子顶部小球的颜色</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; 50 or r &gt; 70:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> g &lt; 50 or g &gt; 70:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> b &lt; 50 or b &gt; 70:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_base_color(r, g, b):</span><br><span class="line">    <span class="comment"># 判断是否是棋子底座的颜色</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; 50 or r &gt; 70:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> g &lt; 50 or g &gt; 70:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> b &lt; 90 or b &gt; 100:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_similar_color(c1, c2):</span><br><span class="line">    <span class="comment"># 判断是否是相近的颜色</span></span><br><span class="line">    <span class="keyword">if</span> abs(c1[0] - c2[0]) &gt; 20:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> abs(c1[1] - c2[1]) &gt; 20:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">if</span> abs(c1[2] - c2[2]) &gt; 20:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    os.system(<span class="string">'adb shell /system/bin/screencap -p /sdcard/screenshot.png'</span>)</span><br><span class="line">    os.system(<span class="string">'adb pull /sdcard/screenshot.png .'</span>)</span><br><span class="line">    img = Image.open(<span class="string">'screenshot.png'</span>)</span><br><span class="line">    w = img.size[0]</span><br><span class="line">    h = img.size[1]</span><br><span class="line">    <span class="keyword">if</span> w == 0 or h == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'w, h:'</span>, w, h)</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="comment"># print img.getpixel((310, 933))</span></span><br><span class="line">    <span class="comment">#  print img.getpixel((311, 933))</span></span><br><span class="line">    <span class="comment">#  首先是扫描来找棋子</span></span><br><span class="line">    base_x = base_y = 0</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(400, h):</span><br><span class="line">        <span class="comment"># y 坐标从 400 开始，避免扫描到图片顶部的按钮</span></span><br><span class="line">        x = 0</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(0, w):</span><br><span class="line">            px = img.getpixel((x, y))</span><br><span class="line">            <span class="keyword">if</span> is_ball_color(px[0], px[1], px[2]):</span><br><span class="line">                px = img.getpixel((x, y + 192))</span><br><span class="line">                <span class="keyword">if</span> is_base_color(px[0], px[1], px[2]):</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; w - 1:</span><br><span class="line">            base_x = x</span><br><span class="line">            base_y = y</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    base_y += 192</span><br><span class="line">    <span class="keyword">if</span> base_x == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'base_x == 0'</span>)</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'base:'</span>, base_x, base_y)</span><br><span class="line">    bg_px = img.getpixel((0, 400))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 然后是扫描来找下一个底座的位置</span></span><br><span class="line">    dest_x = dest_y = 0</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(400, h):</span><br><span class="line">        x = 0</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(0, w):</span><br><span class="line">            <span class="keyword">if</span> x % 50 == 0 and x &gt; 0:</span><br><span class="line">                px = img.getpixel((x - 50, y))</span><br><span class="line">                <span class="keyword">if</span> is_similar_color(bg_px[0 : 3], px[0 : 3]):</span><br><span class="line">                    bg_px = px</span><br><span class="line">                px = img.getpixel((x, y))</span><br><span class="line">                <span class="keyword">if</span> abs(px[0] - bg_px[0]) &gt; 20 or abs(px[1] - bg_px[1]) &gt; 20 or abs(px[2] - bg_px[2]) &gt; 20:</span><br><span class="line">                    <span class="keyword">if</span> abs(x - base_x) &gt; 100:</span><br><span class="line">                        y += 10</span><br><span class="line">                        left = right = x</span><br><span class="line">                        <span class="keyword">while</span> not is_similar_color(bg_px[0 : 3], img.getpixel((left, y))[0 : 3]):</span><br><span class="line">                            left -= 1</span><br><span class="line">                        <span class="keyword">while</span> not is_similar_color(bg_px[0 : 3], img.getpixel((right, y))[0 : 3]):</span><br><span class="line">                            right -= 1</span><br><span class="line">                        <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; w - 1:</span><br><span class="line">            dest_x = (left + right) / 2</span><br><span class="line">            dest_y = y</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">    distance = abs(dest_x - base_x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'dest:'</span>, dest_x, dest_y)</span><br><span class="line">    x = (int)(random.random() * 200 + 600)</span><br><span class="line">    y = (int)(random.random() * 200 + 600)</span><br><span class="line">    <span class="comment"># t 是长按的时间</span></span><br><span class="line">    t = distance * 600 / 383</span><br><span class="line">    loc = <span class="string">' '</span> + str(x) + <span class="string">' '</span> + str(y) + <span class="string">' '</span></span><br><span class="line">    os.system(<span class="string">'adb shell input swipe '</span> + loc + loc + str(t))</span><br><span class="line">    os.system(<span class="string">'rm screenshot.png'</span>)</span><br><span class="line">    time.sleep(3)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年12月微信发布的跳一跳小游戏，简单却又考验人，借着腾讯一贯的好友排名机制对用户的刺激，几乎是瞬间就火起来了。手残的我，玩这个游戏最多也只有几十分。看着这款小游戏，极其简单的操作 (长按就够了)、极其简单的背景 (几乎是纯色，没有任何背景装饰物)、极其简单的元素 (
      
    
    </summary>
    
    
      <category term="Python" scheme="http://tao93.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库支持 emoji 表情字符</title>
    <link href="http://tao93.top/2018/09/26/MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%20emoji%20%E8%A1%A8%E6%83%85%E5%AD%97%E7%AC%A6/"/>
    <id>http://tao93.top/2018/09/26/MySQL 数据库支持 emoji 表情字符/</id>
    <published>2018-09-26T07:47:46.652Z</published>
    <updated>2018-09-26T07:47:46.653Z</updated>
    
    <content type="html"><![CDATA[<p>兴冲冲的整个博客，死皮赖脸的叫几个同学来评论，结果评论中输入的 emoji 表情最后会变成问号，试想别人评论「写的真棒 😄」结果变成了「写的真棒 ？」，这是何其的尴尬。</p><p>继续回到这个问题本身。我登录到数据库一查，发现数据库中存的评论文本就是个问号，这说明 emoji 表情存到数据库的过程出问题了。赶紧一查，发现网上还是很容易找到了解决方法。问题的原因是 MySQL 存储文本时默认的 UTF-8 仅支持 3 个字节编码，而 emoji 是 4 字节编码的，所以存储过程出问题了。所以需要将 charset 设置为 UTF-8 的超集 UTF-8mb4，虽然我也不知道这个 UTF-8mb4 是何方神圣。</p><p>首先，需要在配置文件 my.cnf (在我的机器上这个文件路径是 /etc/my.cnf) 中添加一下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-client-handshake</span> = <span class="literal">FALSE</span></span><br><span class="line"><span class="attr">character-set-server</span> = utf8mb4</span><br><span class="line"><span class="attr">collation-server</span> = utf8mb4_unicode_ci</span><br><span class="line"><span class="attr">init_connect</span>=’SET NAMES utf8mb4<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysql]</span></span><br><span class="line"><span class="string">default-character-set=utf8mb4</span></span><br></pre></td></tr></table></figure><p>然后，需要修改已有库、表、字段的 charset。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改库的 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> &lt;database_name&gt; <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci; </span><br><span class="line"></span><br><span class="line"># 修改表的 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;table_name&gt; <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci; </span><br><span class="line"></span><br><span class="line"># 修改字段的 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;table_name&gt; <span class="keyword">CHANGE</span> &lt;column_name&gt; &lt;column_name&gt; &lt;original_column_type&gt; <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>最后重新启动 MySQL 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure><p>另外，mysqldump 时，也需要进行额外指定 char set：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -default-character-set-utf8mb4 -u &lt;db_user_name&gt; -p --databases &lt;db_name&gt; --lock-all-tables &gt; &lt;file_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;兴冲冲的整个博客，死皮赖脸的叫几个同学来评论，结果评论中输入的 emoji 表情最后会变成问号，试想别人评论「写的真棒 😄」结果变成了「写的真棒 ？」，这是何其的尴尬。&lt;/p&gt;
&lt;p&gt;继续回到这个问题本身。我登录到数据库一查，发现数据库中存的评论文本就是个问号，这说明 e
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://tao93.top/tags/MySQL/"/>
    
  </entry>
  
</feed>
